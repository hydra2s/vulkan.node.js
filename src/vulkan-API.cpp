#pragma once 

#ifndef NAPI_VERSION
#define NAPI_VERSION 8
#endif

#ifndef NAPI_EXPERIMENTAL
#define NAPI_EXPERIMENTAL
#endif

//
#ifndef VK_NO_PROTOTYPES
#define VK_NO_PROTOTYPES
#endif

//
#define WINDOWS_IGNORE_PACKING_MISMATCH

//
#pragma pack(push,16)
#ifdef WIN32_
#include <windows.h>
#endif
#pragma pack(pop)

//
//#pragma pack(push,1)
#pragma pack(push,16)
#include <volk/volk.h>
#pragma pack(pop)

//
#include <napi.h>
#include "./sizes.h"

//
static Napi::Value Dealloc(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    if (info_[0].IsBigInt()) {
        bool lossless = true;
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    delete (void*)address;
    return Napi::BigInt::New(env, (uint64_t)0ull);
}

static Napi::Value GetAddress(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();

    uint64_t address = 0ull;
    if (info_[0].IsString()) {
        decltype(auto) STR = info_[0].As<Napi::String>().Utf8Value();
        decltype(auto) ptr = Napi::Uint8Array::New(env, STR.length()); // you can't use directly c_str, it should to be context visible
        memcpy(ptr.Data(), STR.c_str(), STR.size());
        address = uint64_t(ptr.Data());
    }
    if (info_[0].IsTypedArray()) {
        decltype(auto) TA = info_[0].As<Napi::TypedArray>();
        decltype(auto) AB = TA.ArrayBuffer();
        address = uint64_t(AB.Data()) + TA.ByteOffset();
    }
    if (info_[0].IsDataView()) {
        decltype(auto) TA = info_[0].As<Napi::DataView>();
        decltype(auto) AB = TA.ArrayBuffer();
        address = uint64_t(AB.Data()) + TA.ByteOffset();
    }
    if (info_[0].IsArrayBuffer()) {
        decltype(auto) AB = info_[0].As<Napi::ArrayBuffer>();
        address = uint64_t(AB.Data());
    }
    if (info_[0].IsBuffer()) {
        decltype(auto) AB = info_[0].As<Napi::Buffer<uint8_t>>();
        address = uint64_t(AB.Data());
    }
    if (info_[0].IsExternal()) {
        decltype(auto) AB = info_[0].As<Napi::External<void>>();
        address = uint64_t(AB.Data());
    }

    return Napi::BigInt::New(env, (uint64_t)address);
}

static Napi::ArrayBuffer WrapArrayBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    bool lossless = true;
    if (info_[0].IsBigInt()) {
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    size_t byteLength = 0ull;
    if (info_[0].IsBigInt()) { byteLength = info_[0].As<Napi::BigInt>().Uint64Value(&lossless); }
    if (info_[1].IsNumber()) { byteLength = info_[1].As<Napi::Number>().Uint32Value(); }
    return Napi::ArrayBuffer::New(env, (void*)address, byteLength);
}

static Napi::Buffer<uint8_t> WrapBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    bool lossless = true;
    if (info_[0].IsBigInt()) {
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    size_t byteLength = 0ull;
    if (info_[0].IsBigInt()) { byteLength = info_[0].As<Napi::BigInt>().Uint64Value(&lossless); }
    if (info_[1].IsNumber()) { byteLength = info_[1].As<Napi::Number>().Uint32Value(); }
    return Napi::Buffer<uint8_t>::New(env, (uint8_t*)address, byteLength);
}

static Napi::String WrapString(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    bool lossless = true;
    if (info_[0].IsBigInt()) {
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    size_t length = 0ull;
    if (info_[0].IsBigInt()) { length = info_[0].As<Napi::BigInt>().Uint64Value(&lossless); }
    if (info_[1].IsNumber()) { length = info_[1].As<Napi::Number>().Uint32Value(); }

    //
    if (length) {
        return Napi::String::New(env, (char*)address, length);
    } else {
        return Napi::String::New(env, (char*)address);
    }
}

static Napi::String WrapStringUTF16(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    bool lossless = true;
    if (info_[0].IsBigInt()) {
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    size_t length = 0ull;
    if (info_[0].IsBigInt()) { length = info_[0].As<Napi::BigInt>().Uint64Value(&lossless); }
    if (info_[1].IsNumber()) { length = info_[1].As<Napi::Number>().Uint32Value(); }

    //
    if (length) {
        return Napi::String::New(env, (char16_t*)address, length);
    } else {
        return Napi::String::New(env, (char16_t*)address);
    }
}

static Napi::Number DebugUint8(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    if (info_[0].IsBigInt()) {
        bool lossless = true;
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    return Napi::Number::New(env, *((uint8_t*)address));
}

static Napi::Number DebugUint16(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    if (info_[0].IsBigInt()) {
        bool lossless = true;
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    return Napi::Number::New(env, *((uint16_t*)address));
}

static Napi::Number DebugUint32(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    if (info_[0].IsBigInt()) {
        bool lossless = true;
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    return Napi::Number::New(env, *((uint32_t*)address));
}

static Napi::Value DebugUint64(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    if (info_[0].IsBigInt()) {
        bool lossless = true;
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    return Napi::BigInt::New(env, (uint64_t)address);
}

static Napi::Number DebugFloat32(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    if (info_[0].IsBigInt()) {
        bool lossless = true;
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    return Napi::Number::New(env, *((float*)address));
}

static Napi::Number DebugFloat64(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    if (info_[0].IsBigInt()) {
        bool lossless = true;
        address = info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    }
    return Napi::Number::New(env, *((double*)address));
}

static Napi::Value rawGetStructureSizeBySType(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    uint64_t address = 0ull;
    if (info_[0].IsNumber()) {
        return Napi::Number::New(env, vkGetStructureSizeBySType((VkStructureType)info_[0].As<Napi::Number>().Uint32Value()));
    }
    return Napi::Number::New(env, 0);
}
    


static Napi::Value VkBaseOutStructure_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBaseOutStructure, sType));
}


static Napi::Value VkBaseOutStructure_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBaseOutStructure, pNext));
}


static Napi::Value VkBaseInStructure_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBaseInStructure, sType));
}


static Napi::Value VkBaseInStructure_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBaseInStructure, pNext));
}


static Napi::Value VkOffset2D_x_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOffset2D, x));
}


static Napi::Value VkOffset2D_y_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOffset2D, y));
}


static Napi::Value VkOffset3D_x_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOffset3D, x));
}


static Napi::Value VkOffset3D_y_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOffset3D, y));
}


static Napi::Value VkOffset3D_z_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOffset3D, z));
}


static Napi::Value VkExtent2D_width_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExtent2D, width));
}


static Napi::Value VkExtent2D_height_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExtent2D, height));
}


static Napi::Value VkExtent3D_width_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExtent3D, width));
}


static Napi::Value VkExtent3D_height_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExtent3D, height));
}


static Napi::Value VkExtent3D_depth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExtent3D, depth));
}


static Napi::Value VkViewport_x_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewport, x));
}


static Napi::Value VkViewport_y_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewport, y));
}


static Napi::Value VkViewport_width_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewport, width));
}


static Napi::Value VkViewport_height_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewport, height));
}


static Napi::Value VkViewport_minDepth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewport, minDepth));
}


static Napi::Value VkViewport_maxDepth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewport, maxDepth));
}


static Napi::Value VkRect2D_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRect2D, offset));
}


static Napi::Value VkRect2D_extent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRect2D, extent));
}


static Napi::Value VkClearRect_rect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkClearRect, rect));
}


static Napi::Value VkClearRect_baseArrayLayer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkClearRect, baseArrayLayer));
}


static Napi::Value VkClearRect_layerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkClearRect, layerCount));
}


static Napi::Value VkComponentMapping_r_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComponentMapping, r));
}


static Napi::Value VkComponentMapping_g_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComponentMapping, g));
}


static Napi::Value VkComponentMapping_b_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComponentMapping, b));
}


static Napi::Value VkComponentMapping_a_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComponentMapping, a));
}


static Napi::Value VkPhysicalDeviceProperties_apiVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, apiVersion));
}


static Napi::Value VkPhysicalDeviceProperties_driverVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, driverVersion));
}


static Napi::Value VkPhysicalDeviceProperties_vendorID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, vendorID));
}


static Napi::Value VkPhysicalDeviceProperties_deviceID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, deviceID));
}


static Napi::Value VkPhysicalDeviceProperties_deviceType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, deviceType));
}


static Napi::Value VkPhysicalDeviceProperties_deviceName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, deviceName));
}


static Napi::Value VkPhysicalDeviceProperties_pipelineCacheUUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, pipelineCacheUUID));
}


static Napi::Value VkPhysicalDeviceProperties_limits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, limits));
}


static Napi::Value VkPhysicalDeviceProperties_sparseProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties, sparseProperties));
}


static Napi::Value VkExtensionProperties_extensionName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExtensionProperties, extensionName));
}


static Napi::Value VkExtensionProperties_specVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExtensionProperties, specVersion));
}


static Napi::Value VkLayerProperties_layerName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkLayerProperties, layerName));
}


static Napi::Value VkLayerProperties_specVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkLayerProperties, specVersion));
}


static Napi::Value VkLayerProperties_implementationVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkLayerProperties, implementationVersion));
}


static Napi::Value VkLayerProperties_description_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkLayerProperties, description));
}


static Napi::Value VkApplicationInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkApplicationInfo, sType));
}


static Napi::Value VkApplicationInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkApplicationInfo, pNext));
}


static Napi::Value VkApplicationInfo_pApplicationName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkApplicationInfo, pApplicationName));
}


static Napi::Value VkApplicationInfo_applicationVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkApplicationInfo, applicationVersion));
}


static Napi::Value VkApplicationInfo_pEngineName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkApplicationInfo, pEngineName));
}


static Napi::Value VkApplicationInfo_engineVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkApplicationInfo, engineVersion));
}


static Napi::Value VkApplicationInfo_apiVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkApplicationInfo, apiVersion));
}


static Napi::Value VkAllocationCallbacks_pUserData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAllocationCallbacks, pUserData));
}


static Napi::Value VkAllocationCallbacks_pfnAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnAllocation));
}


static Napi::Value VkAllocationCallbacks_pfnReallocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnReallocation));
}


static Napi::Value VkAllocationCallbacks_pfnFree_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnFree));
}


static Napi::Value VkAllocationCallbacks_pfnInternalAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnInternalAllocation));
}


static Napi::Value VkAllocationCallbacks_pfnInternalFree_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAllocationCallbacks, pfnInternalFree));
}


static Napi::Value VkDeviceQueueCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, sType));
}


static Napi::Value VkDeviceQueueCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, pNext));
}


static Napi::Value VkDeviceQueueCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, flags));
}


static Napi::Value VkDeviceQueueCreateInfo_queueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, queueFamilyIndex));
}


static Napi::Value VkDeviceQueueCreateInfo_queueCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, queueCount));
}


static Napi::Value VkDeviceQueueCreateInfo_pQueuePriorities_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueCreateInfo, pQueuePriorities));
}


static Napi::Value VkDeviceCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, sType));
}


static Napi::Value VkDeviceCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, pNext));
}


static Napi::Value VkDeviceCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, flags));
}


static Napi::Value VkDeviceCreateInfo_queueCreateInfoCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, queueCreateInfoCount));
}


static Napi::Value VkDeviceCreateInfo_pQueueCreateInfos_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, pQueueCreateInfos));
}


static Napi::Value VkDeviceCreateInfo_enabledLayerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, enabledLayerCount));
}


static Napi::Value VkDeviceCreateInfo_ppEnabledLayerNames_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, ppEnabledLayerNames));
}


static Napi::Value VkDeviceCreateInfo_enabledExtensionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, enabledExtensionCount));
}


static Napi::Value VkDeviceCreateInfo_ppEnabledExtensionNames_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, ppEnabledExtensionNames));
}


static Napi::Value VkDeviceCreateInfo_pEnabledFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceCreateInfo, pEnabledFeatures));
}


static Napi::Value VkInstanceCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInstanceCreateInfo, sType));
}


static Napi::Value VkInstanceCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInstanceCreateInfo, pNext));
}


static Napi::Value VkInstanceCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInstanceCreateInfo, flags));
}


static Napi::Value VkInstanceCreateInfo_pApplicationInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInstanceCreateInfo, pApplicationInfo));
}


static Napi::Value VkInstanceCreateInfo_enabledLayerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInstanceCreateInfo, enabledLayerCount));
}


static Napi::Value VkInstanceCreateInfo_ppEnabledLayerNames_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInstanceCreateInfo, ppEnabledLayerNames));
}


static Napi::Value VkInstanceCreateInfo_enabledExtensionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInstanceCreateInfo, enabledExtensionCount));
}


static Napi::Value VkInstanceCreateInfo_ppEnabledExtensionNames_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInstanceCreateInfo, ppEnabledExtensionNames));
}


static Napi::Value VkQueueFamilyProperties_queueFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyProperties, queueFlags));
}


static Napi::Value VkQueueFamilyProperties_queueCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyProperties, queueCount));
}


static Napi::Value VkQueueFamilyProperties_timestampValidBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyProperties, timestampValidBits));
}


static Napi::Value VkQueueFamilyProperties_minImageTransferGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyProperties, minImageTransferGranularity));
}


static Napi::Value VkPhysicalDeviceMemoryProperties_memoryTypeCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties, memoryTypeCount));
}


static Napi::Value VkPhysicalDeviceMemoryProperties_memoryTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties, memoryTypes));
}


static Napi::Value VkPhysicalDeviceMemoryProperties_memoryHeapCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties, memoryHeapCount));
}


static Napi::Value VkPhysicalDeviceMemoryProperties_memoryHeaps_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties, memoryHeaps));
}


static Napi::Value VkMemoryAllocateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryAllocateInfo, sType));
}


static Napi::Value VkMemoryAllocateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryAllocateInfo, pNext));
}


static Napi::Value VkMemoryAllocateInfo_allocationSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryAllocateInfo, allocationSize));
}


static Napi::Value VkMemoryAllocateInfo_memoryTypeIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryAllocateInfo, memoryTypeIndex));
}


static Napi::Value VkMemoryRequirements_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryRequirements, size));
}


static Napi::Value VkMemoryRequirements_alignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryRequirements, alignment));
}


static Napi::Value VkMemoryRequirements_memoryTypeBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryRequirements, memoryTypeBits));
}


static Napi::Value VkSparseImageFormatProperties_aspectMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageFormatProperties, aspectMask));
}


static Napi::Value VkSparseImageFormatProperties_imageGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageFormatProperties, imageGranularity));
}


static Napi::Value VkSparseImageFormatProperties_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageFormatProperties, flags));
}


static Napi::Value VkSparseImageMemoryRequirements_formatProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, formatProperties));
}


static Napi::Value VkSparseImageMemoryRequirements_imageMipTailFirstLod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, imageMipTailFirstLod));
}


static Napi::Value VkSparseImageMemoryRequirements_imageMipTailSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, imageMipTailSize));
}


static Napi::Value VkSparseImageMemoryRequirements_imageMipTailOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, imageMipTailOffset));
}


static Napi::Value VkSparseImageMemoryRequirements_imageMipTailStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements, imageMipTailStride));
}


static Napi::Value VkMemoryType_propertyFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryType, propertyFlags));
}


static Napi::Value VkMemoryType_heapIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryType, heapIndex));
}


static Napi::Value VkMemoryHeap_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryHeap, size));
}


static Napi::Value VkMemoryHeap_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryHeap, flags));
}


static Napi::Value VkMappedMemoryRange_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMappedMemoryRange, sType));
}


static Napi::Value VkMappedMemoryRange_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMappedMemoryRange, pNext));
}


static Napi::Value VkMappedMemoryRange_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMappedMemoryRange, memory));
}


static Napi::Value VkMappedMemoryRange_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMappedMemoryRange, offset));
}


static Napi::Value VkMappedMemoryRange_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMappedMemoryRange, size));
}


static Napi::Value VkFormatProperties_linearTilingFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties, linearTilingFeatures));
}


static Napi::Value VkFormatProperties_optimalTilingFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties, optimalTilingFeatures));
}


static Napi::Value VkFormatProperties_bufferFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties, bufferFeatures));
}


static Napi::Value VkImageFormatProperties_maxExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatProperties, maxExtent));
}


static Napi::Value VkImageFormatProperties_maxMipLevels_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatProperties, maxMipLevels));
}


static Napi::Value VkImageFormatProperties_maxArrayLayers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatProperties, maxArrayLayers));
}


static Napi::Value VkImageFormatProperties_sampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatProperties, sampleCounts));
}


static Napi::Value VkImageFormatProperties_maxResourceSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatProperties, maxResourceSize));
}


static Napi::Value VkDescriptorBufferInfo_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorBufferInfo, buffer));
}


static Napi::Value VkDescriptorBufferInfo_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorBufferInfo, offset));
}


static Napi::Value VkDescriptorBufferInfo_range_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorBufferInfo, range));
}


static Napi::Value VkDescriptorImageInfo_sampler_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorImageInfo, sampler));
}


static Napi::Value VkDescriptorImageInfo_imageView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorImageInfo, imageView));
}


static Napi::Value VkDescriptorImageInfo_imageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorImageInfo, imageLayout));
}


static Napi::Value VkWriteDescriptorSet_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, sType));
}


static Napi::Value VkWriteDescriptorSet_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, pNext));
}


static Napi::Value VkWriteDescriptorSet_dstSet_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, dstSet));
}


static Napi::Value VkWriteDescriptorSet_dstBinding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, dstBinding));
}


static Napi::Value VkWriteDescriptorSet_dstArrayElement_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, dstArrayElement));
}


static Napi::Value VkWriteDescriptorSet_descriptorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, descriptorCount));
}


static Napi::Value VkWriteDescriptorSet_descriptorType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, descriptorType));
}


static Napi::Value VkWriteDescriptorSet_pImageInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, pImageInfo));
}


static Napi::Value VkWriteDescriptorSet_pBufferInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, pBufferInfo));
}


static Napi::Value VkWriteDescriptorSet_pTexelBufferView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSet, pTexelBufferView));
}


static Napi::Value VkCopyDescriptorSet_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyDescriptorSet, sType));
}


static Napi::Value VkCopyDescriptorSet_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyDescriptorSet, pNext));
}


static Napi::Value VkCopyDescriptorSet_srcSet_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyDescriptorSet, srcSet));
}


static Napi::Value VkCopyDescriptorSet_srcBinding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyDescriptorSet, srcBinding));
}


static Napi::Value VkCopyDescriptorSet_srcArrayElement_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyDescriptorSet, srcArrayElement));
}


static Napi::Value VkCopyDescriptorSet_dstSet_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyDescriptorSet, dstSet));
}


static Napi::Value VkCopyDescriptorSet_dstBinding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyDescriptorSet, dstBinding));
}


static Napi::Value VkCopyDescriptorSet_dstArrayElement_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyDescriptorSet, dstArrayElement));
}


static Napi::Value VkCopyDescriptorSet_descriptorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyDescriptorSet, descriptorCount));
}


static Napi::Value VkBufferCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCreateInfo, sType));
}


static Napi::Value VkBufferCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCreateInfo, pNext));
}


static Napi::Value VkBufferCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCreateInfo, flags));
}


static Napi::Value VkBufferCreateInfo_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCreateInfo, size));
}


static Napi::Value VkBufferCreateInfo_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCreateInfo, usage));
}


static Napi::Value VkBufferCreateInfo_sharingMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCreateInfo, sharingMode));
}


static Napi::Value VkBufferCreateInfo_queueFamilyIndexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCreateInfo, queueFamilyIndexCount));
}


static Napi::Value VkBufferCreateInfo_pQueueFamilyIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCreateInfo, pQueueFamilyIndices));
}


static Napi::Value VkBufferViewCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, sType));
}


static Napi::Value VkBufferViewCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, pNext));
}


static Napi::Value VkBufferViewCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, flags));
}


static Napi::Value VkBufferViewCreateInfo_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, buffer));
}


static Napi::Value VkBufferViewCreateInfo_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, format));
}


static Napi::Value VkBufferViewCreateInfo_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, offset));
}


static Napi::Value VkBufferViewCreateInfo_range_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferViewCreateInfo, range));
}


static Napi::Value VkImageSubresource_aspectMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresource, aspectMask));
}


static Napi::Value VkImageSubresource_mipLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresource, mipLevel));
}


static Napi::Value VkImageSubresource_arrayLayer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresource, arrayLayer));
}


static Napi::Value VkImageSubresourceLayers_aspectMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresourceLayers, aspectMask));
}


static Napi::Value VkImageSubresourceLayers_mipLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresourceLayers, mipLevel));
}


static Napi::Value VkImageSubresourceLayers_baseArrayLayer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresourceLayers, baseArrayLayer));
}


static Napi::Value VkImageSubresourceLayers_layerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresourceLayers, layerCount));
}


static Napi::Value VkImageSubresourceRange_aspectMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresourceRange, aspectMask));
}


static Napi::Value VkImageSubresourceRange_baseMipLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresourceRange, baseMipLevel));
}


static Napi::Value VkImageSubresourceRange_levelCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresourceRange, levelCount));
}


static Napi::Value VkImageSubresourceRange_baseArrayLayer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresourceRange, baseArrayLayer));
}


static Napi::Value VkImageSubresourceRange_layerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresourceRange, layerCount));
}


static Napi::Value VkMemoryBarrier_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier, sType));
}


static Napi::Value VkMemoryBarrier_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier, pNext));
}


static Napi::Value VkMemoryBarrier_srcAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier, srcAccessMask));
}


static Napi::Value VkMemoryBarrier_dstAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier, dstAccessMask));
}


static Napi::Value VkBufferMemoryBarrier_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, sType));
}


static Napi::Value VkBufferMemoryBarrier_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, pNext));
}


static Napi::Value VkBufferMemoryBarrier_srcAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, srcAccessMask));
}


static Napi::Value VkBufferMemoryBarrier_dstAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, dstAccessMask));
}


static Napi::Value VkBufferMemoryBarrier_srcQueueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, srcQueueFamilyIndex));
}


static Napi::Value VkBufferMemoryBarrier_dstQueueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, dstQueueFamilyIndex));
}


static Napi::Value VkBufferMemoryBarrier_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, buffer));
}


static Napi::Value VkBufferMemoryBarrier_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, offset));
}


static Napi::Value VkBufferMemoryBarrier_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier, size));
}


static Napi::Value VkImageMemoryBarrier_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, sType));
}


static Napi::Value VkImageMemoryBarrier_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, pNext));
}


static Napi::Value VkImageMemoryBarrier_srcAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, srcAccessMask));
}


static Napi::Value VkImageMemoryBarrier_dstAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, dstAccessMask));
}


static Napi::Value VkImageMemoryBarrier_oldLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, oldLayout));
}


static Napi::Value VkImageMemoryBarrier_newLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, newLayout));
}


static Napi::Value VkImageMemoryBarrier_srcQueueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, srcQueueFamilyIndex));
}


static Napi::Value VkImageMemoryBarrier_dstQueueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, dstQueueFamilyIndex));
}


static Napi::Value VkImageMemoryBarrier_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, image));
}


static Napi::Value VkImageMemoryBarrier_subresourceRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier, subresourceRange));
}


static Napi::Value VkImageCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, sType));
}


static Napi::Value VkImageCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, pNext));
}


static Napi::Value VkImageCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, flags));
}


static Napi::Value VkImageCreateInfo_imageType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, imageType));
}


static Napi::Value VkImageCreateInfo_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, format));
}


static Napi::Value VkImageCreateInfo_extent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, extent));
}


static Napi::Value VkImageCreateInfo_mipLevels_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, mipLevels));
}


static Napi::Value VkImageCreateInfo_arrayLayers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, arrayLayers));
}


static Napi::Value VkImageCreateInfo_samples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, samples));
}


static Napi::Value VkImageCreateInfo_tiling_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, tiling));
}


static Napi::Value VkImageCreateInfo_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, usage));
}


static Napi::Value VkImageCreateInfo_sharingMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, sharingMode));
}


static Napi::Value VkImageCreateInfo_queueFamilyIndexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, queueFamilyIndexCount));
}


static Napi::Value VkImageCreateInfo_pQueueFamilyIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, pQueueFamilyIndices));
}


static Napi::Value VkImageCreateInfo_initialLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCreateInfo, initialLayout));
}


static Napi::Value VkSubresourceLayout_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubresourceLayout, offset));
}


static Napi::Value VkSubresourceLayout_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubresourceLayout, size));
}


static Napi::Value VkSubresourceLayout_rowPitch_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubresourceLayout, rowPitch));
}


static Napi::Value VkSubresourceLayout_arrayPitch_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubresourceLayout, arrayPitch));
}


static Napi::Value VkSubresourceLayout_depthPitch_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubresourceLayout, depthPitch));
}


static Napi::Value VkImageViewCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewCreateInfo, sType));
}


static Napi::Value VkImageViewCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewCreateInfo, pNext));
}


static Napi::Value VkImageViewCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewCreateInfo, flags));
}


static Napi::Value VkImageViewCreateInfo_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewCreateInfo, image));
}


static Napi::Value VkImageViewCreateInfo_viewType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewCreateInfo, viewType));
}


static Napi::Value VkImageViewCreateInfo_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewCreateInfo, format));
}


static Napi::Value VkImageViewCreateInfo_components_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewCreateInfo, components));
}


static Napi::Value VkImageViewCreateInfo_subresourceRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewCreateInfo, subresourceRange));
}


static Napi::Value VkBufferCopy_srcOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCopy, srcOffset));
}


static Napi::Value VkBufferCopy_dstOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCopy, dstOffset));
}


static Napi::Value VkBufferCopy_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCopy, size));
}


static Napi::Value VkSparseMemoryBind_resourceOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseMemoryBind, resourceOffset));
}


static Napi::Value VkSparseMemoryBind_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseMemoryBind, size));
}


static Napi::Value VkSparseMemoryBind_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseMemoryBind, memory));
}


static Napi::Value VkSparseMemoryBind_memoryOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseMemoryBind, memoryOffset));
}


static Napi::Value VkSparseMemoryBind_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseMemoryBind, flags));
}


static Napi::Value VkSparseImageMemoryBind_subresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, subresource));
}


static Napi::Value VkSparseImageMemoryBind_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, offset));
}


static Napi::Value VkSparseImageMemoryBind_extent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, extent));
}


static Napi::Value VkSparseImageMemoryBind_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, memory));
}


static Napi::Value VkSparseImageMemoryBind_memoryOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, memoryOffset));
}


static Napi::Value VkSparseImageMemoryBind_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryBind, flags));
}


static Napi::Value VkSparseBufferMemoryBindInfo_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseBufferMemoryBindInfo, buffer));
}


static Napi::Value VkSparseBufferMemoryBindInfo_bindCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseBufferMemoryBindInfo, bindCount));
}


static Napi::Value VkSparseBufferMemoryBindInfo_pBinds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseBufferMemoryBindInfo, pBinds));
}


static Napi::Value VkSparseImageOpaqueMemoryBindInfo_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageOpaqueMemoryBindInfo, image));
}


static Napi::Value VkSparseImageOpaqueMemoryBindInfo_bindCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageOpaqueMemoryBindInfo, bindCount));
}


static Napi::Value VkSparseImageOpaqueMemoryBindInfo_pBinds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageOpaqueMemoryBindInfo, pBinds));
}


static Napi::Value VkSparseImageMemoryBindInfo_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryBindInfo, image));
}


static Napi::Value VkSparseImageMemoryBindInfo_bindCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryBindInfo, bindCount));
}


static Napi::Value VkSparseImageMemoryBindInfo_pBinds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryBindInfo, pBinds));
}


static Napi::Value VkBindSparseInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, sType));
}


static Napi::Value VkBindSparseInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, pNext));
}


static Napi::Value VkBindSparseInfo_waitSemaphoreCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, waitSemaphoreCount));
}


static Napi::Value VkBindSparseInfo_pWaitSemaphores_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, pWaitSemaphores));
}


static Napi::Value VkBindSparseInfo_bufferBindCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, bufferBindCount));
}


static Napi::Value VkBindSparseInfo_pBufferBinds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, pBufferBinds));
}


static Napi::Value VkBindSparseInfo_imageOpaqueBindCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, imageOpaqueBindCount));
}


static Napi::Value VkBindSparseInfo_pImageOpaqueBinds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, pImageOpaqueBinds));
}


static Napi::Value VkBindSparseInfo_imageBindCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, imageBindCount));
}


static Napi::Value VkBindSparseInfo_pImageBinds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, pImageBinds));
}


static Napi::Value VkBindSparseInfo_signalSemaphoreCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, signalSemaphoreCount));
}


static Napi::Value VkBindSparseInfo_pSignalSemaphores_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindSparseInfo, pSignalSemaphores));
}


static Napi::Value VkImageCopy_srcSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy, srcSubresource));
}


static Napi::Value VkImageCopy_srcOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy, srcOffset));
}


static Napi::Value VkImageCopy_dstSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy, dstSubresource));
}


static Napi::Value VkImageCopy_dstOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy, dstOffset));
}


static Napi::Value VkImageCopy_extent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy, extent));
}


static Napi::Value VkImageBlit_srcSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit, srcSubresource));
}


static Napi::Value VkImageBlit_srcOffsets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit, srcOffsets));
}


static Napi::Value VkImageBlit_dstSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit, dstSubresource));
}


static Napi::Value VkImageBlit_dstOffsets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit, dstOffsets));
}


static Napi::Value VkBufferImageCopy_bufferOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy, bufferOffset));
}


static Napi::Value VkBufferImageCopy_bufferRowLength_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy, bufferRowLength));
}


static Napi::Value VkBufferImageCopy_bufferImageHeight_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy, bufferImageHeight));
}


static Napi::Value VkBufferImageCopy_imageSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy, imageSubresource));
}


static Napi::Value VkBufferImageCopy_imageOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy, imageOffset));
}


static Napi::Value VkBufferImageCopy_imageExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy, imageExtent));
}

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkCopyMemoryIndirectCommandNV_srcAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryIndirectCommandNV, srcAddress));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkCopyMemoryIndirectCommandNV_dstAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryIndirectCommandNV, dstAddress));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkCopyMemoryIndirectCommandNV_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryIndirectCommandNV, size));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkCopyMemoryToImageIndirectCommandNV_srcAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToImageIndirectCommandNV, srcAddress));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkCopyMemoryToImageIndirectCommandNV_bufferRowLength_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToImageIndirectCommandNV, bufferRowLength));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkCopyMemoryToImageIndirectCommandNV_bufferImageHeight_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToImageIndirectCommandNV, bufferImageHeight));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkCopyMemoryToImageIndirectCommandNV_imageSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToImageIndirectCommandNV, imageSubresource));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkCopyMemoryToImageIndirectCommandNV_imageOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToImageIndirectCommandNV, imageOffset));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkCopyMemoryToImageIndirectCommandNV_imageExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToImageIndirectCommandNV, imageExtent));
}
#endif


static Napi::Value VkImageResolve_srcSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve, srcSubresource));
}


static Napi::Value VkImageResolve_srcOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve, srcOffset));
}


static Napi::Value VkImageResolve_dstSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve, dstSubresource));
}


static Napi::Value VkImageResolve_dstOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve, dstOffset));
}


static Napi::Value VkImageResolve_extent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve, extent));
}


static Napi::Value VkShaderModuleCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, sType));
}


static Napi::Value VkShaderModuleCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, pNext));
}


static Napi::Value VkShaderModuleCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, flags));
}


static Napi::Value VkShaderModuleCreateInfo_codeSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, codeSize));
}


static Napi::Value VkShaderModuleCreateInfo_pCode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleCreateInfo, pCode));
}


static Napi::Value VkDescriptorSetLayoutBinding_binding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, binding));
}


static Napi::Value VkDescriptorSetLayoutBinding_descriptorType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, descriptorType));
}


static Napi::Value VkDescriptorSetLayoutBinding_descriptorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, descriptorCount));
}


static Napi::Value VkDescriptorSetLayoutBinding_stageFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, stageFlags));
}


static Napi::Value VkDescriptorSetLayoutBinding_pImmutableSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBinding, pImmutableSamplers));
}


static Napi::Value VkDescriptorSetLayoutCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, sType));
}


static Napi::Value VkDescriptorSetLayoutCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, pNext));
}


static Napi::Value VkDescriptorSetLayoutCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, flags));
}


static Napi::Value VkDescriptorSetLayoutCreateInfo_bindingCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, bindingCount));
}


static Napi::Value VkDescriptorSetLayoutCreateInfo_pBindings_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutCreateInfo, pBindings));
}


static Napi::Value VkDescriptorPoolSize_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolSize, type));
}


static Napi::Value VkDescriptorPoolSize_descriptorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolSize, descriptorCount));
}


static Napi::Value VkDescriptorPoolCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, sType));
}


static Napi::Value VkDescriptorPoolCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, pNext));
}


static Napi::Value VkDescriptorPoolCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, flags));
}


static Napi::Value VkDescriptorPoolCreateInfo_maxSets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, maxSets));
}


static Napi::Value VkDescriptorPoolCreateInfo_poolSizeCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, poolSizeCount));
}


static Napi::Value VkDescriptorPoolCreateInfo_pPoolSizes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolCreateInfo, pPoolSizes));
}


static Napi::Value VkDescriptorSetAllocateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, sType));
}


static Napi::Value VkDescriptorSetAllocateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, pNext));
}


static Napi::Value VkDescriptorSetAllocateInfo_descriptorPool_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, descriptorPool));
}


static Napi::Value VkDescriptorSetAllocateInfo_descriptorSetCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, descriptorSetCount));
}


static Napi::Value VkDescriptorSetAllocateInfo_pSetLayouts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetAllocateInfo, pSetLayouts));
}


static Napi::Value VkSpecializationMapEntry_constantID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSpecializationMapEntry, constantID));
}


static Napi::Value VkSpecializationMapEntry_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSpecializationMapEntry, offset));
}


static Napi::Value VkSpecializationMapEntry_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSpecializationMapEntry, size));
}


static Napi::Value VkSpecializationInfo_mapEntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSpecializationInfo, mapEntryCount));
}


static Napi::Value VkSpecializationInfo_pMapEntries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSpecializationInfo, pMapEntries));
}


static Napi::Value VkSpecializationInfo_dataSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSpecializationInfo, dataSize));
}


static Napi::Value VkSpecializationInfo_pData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSpecializationInfo, pData));
}


static Napi::Value VkPipelineShaderStageCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, sType));
}


static Napi::Value VkPipelineShaderStageCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, pNext));
}


static Napi::Value VkPipelineShaderStageCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, flags));
}


static Napi::Value VkPipelineShaderStageCreateInfo_stage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, stage));
}


static Napi::Value VkPipelineShaderStageCreateInfo_module_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, module));
}


static Napi::Value VkPipelineShaderStageCreateInfo_pName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, pName));
}


static Napi::Value VkPipelineShaderStageCreateInfo_pSpecializationInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageCreateInfo, pSpecializationInfo));
}


static Napi::Value VkComputePipelineCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, sType));
}


static Napi::Value VkComputePipelineCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, pNext));
}


static Napi::Value VkComputePipelineCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, flags));
}


static Napi::Value VkComputePipelineCreateInfo_stage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, stage));
}


static Napi::Value VkComputePipelineCreateInfo_layout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, layout));
}


static Napi::Value VkComputePipelineCreateInfo_basePipelineHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, basePipelineHandle));
}


static Napi::Value VkComputePipelineCreateInfo_basePipelineIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkComputePipelineCreateInfo, basePipelineIndex));
}


static Napi::Value VkVertexInputBindingDescription_binding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDescription, binding));
}


static Napi::Value VkVertexInputBindingDescription_stride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDescription, stride));
}


static Napi::Value VkVertexInputBindingDescription_inputRate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDescription, inputRate));
}


static Napi::Value VkVertexInputAttributeDescription_location_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription, location));
}


static Napi::Value VkVertexInputAttributeDescription_binding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription, binding));
}


static Napi::Value VkVertexInputAttributeDescription_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription, format));
}


static Napi::Value VkVertexInputAttributeDescription_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription, offset));
}


static Napi::Value VkPipelineVertexInputStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, sType));
}


static Napi::Value VkPipelineVertexInputStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, pNext));
}


static Napi::Value VkPipelineVertexInputStateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, flags));
}


static Napi::Value VkPipelineVertexInputStateCreateInfo_vertexBindingDescriptionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, vertexBindingDescriptionCount));
}


static Napi::Value VkPipelineVertexInputStateCreateInfo_pVertexBindingDescriptions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, pVertexBindingDescriptions));
}


static Napi::Value VkPipelineVertexInputStateCreateInfo_vertexAttributeDescriptionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, vertexAttributeDescriptionCount));
}


static Napi::Value VkPipelineVertexInputStateCreateInfo_pVertexAttributeDescriptions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputStateCreateInfo, pVertexAttributeDescriptions));
}


static Napi::Value VkPipelineInputAssemblyStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, sType));
}


static Napi::Value VkPipelineInputAssemblyStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, pNext));
}


static Napi::Value VkPipelineInputAssemblyStateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, flags));
}


static Napi::Value VkPipelineInputAssemblyStateCreateInfo_topology_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, topology));
}


static Napi::Value VkPipelineInputAssemblyStateCreateInfo_primitiveRestartEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineInputAssemblyStateCreateInfo, primitiveRestartEnable));
}


static Napi::Value VkPipelineTessellationStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineTessellationStateCreateInfo, sType));
}


static Napi::Value VkPipelineTessellationStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineTessellationStateCreateInfo, pNext));
}


static Napi::Value VkPipelineTessellationStateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineTessellationStateCreateInfo, flags));
}


static Napi::Value VkPipelineTessellationStateCreateInfo_patchControlPoints_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineTessellationStateCreateInfo, patchControlPoints));
}


static Napi::Value VkPipelineViewportStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, sType));
}


static Napi::Value VkPipelineViewportStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, pNext));
}


static Napi::Value VkPipelineViewportStateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, flags));
}


static Napi::Value VkPipelineViewportStateCreateInfo_viewportCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, viewportCount));
}


static Napi::Value VkPipelineViewportStateCreateInfo_pViewports_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, pViewports));
}


static Napi::Value VkPipelineViewportStateCreateInfo_scissorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, scissorCount));
}


static Napi::Value VkPipelineViewportStateCreateInfo_pScissors_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportStateCreateInfo, pScissors));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, sType));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, pNext));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, flags));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_depthClampEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthClampEnable));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_rasterizerDiscardEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, rasterizerDiscardEnable));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_polygonMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, polygonMode));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_cullMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, cullMode));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_frontFace_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, frontFace));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_depthBiasEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasEnable));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_depthBiasConstantFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasConstantFactor));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_depthBiasClamp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasClamp));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_depthBiasSlopeFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasSlopeFactor));
}


static Napi::Value VkPipelineRasterizationStateCreateInfo_lineWidth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateCreateInfo, lineWidth));
}


static Napi::Value VkPipelineMultisampleStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, sType));
}


static Napi::Value VkPipelineMultisampleStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, pNext));
}


static Napi::Value VkPipelineMultisampleStateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, flags));
}


static Napi::Value VkPipelineMultisampleStateCreateInfo_rasterizationSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, rasterizationSamples));
}


static Napi::Value VkPipelineMultisampleStateCreateInfo_sampleShadingEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, sampleShadingEnable));
}


static Napi::Value VkPipelineMultisampleStateCreateInfo_minSampleShading_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, minSampleShading));
}


static Napi::Value VkPipelineMultisampleStateCreateInfo_pSampleMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, pSampleMask));
}


static Napi::Value VkPipelineMultisampleStateCreateInfo_alphaToCoverageEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, alphaToCoverageEnable));
}


static Napi::Value VkPipelineMultisampleStateCreateInfo_alphaToOneEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineMultisampleStateCreateInfo, alphaToOneEnable));
}


static Napi::Value VkPipelineColorBlendAttachmentState_blendEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, blendEnable));
}


static Napi::Value VkPipelineColorBlendAttachmentState_srcColorBlendFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, srcColorBlendFactor));
}


static Napi::Value VkPipelineColorBlendAttachmentState_dstColorBlendFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, dstColorBlendFactor));
}


static Napi::Value VkPipelineColorBlendAttachmentState_colorBlendOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, colorBlendOp));
}


static Napi::Value VkPipelineColorBlendAttachmentState_srcAlphaBlendFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, srcAlphaBlendFactor));
}


static Napi::Value VkPipelineColorBlendAttachmentState_dstAlphaBlendFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, dstAlphaBlendFactor));
}


static Napi::Value VkPipelineColorBlendAttachmentState_alphaBlendOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, alphaBlendOp));
}


static Napi::Value VkPipelineColorBlendAttachmentState_colorWriteMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAttachmentState, colorWriteMask));
}


static Napi::Value VkPipelineColorBlendStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, sType));
}


static Napi::Value VkPipelineColorBlendStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, pNext));
}


static Napi::Value VkPipelineColorBlendStateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, flags));
}


static Napi::Value VkPipelineColorBlendStateCreateInfo_logicOpEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, logicOpEnable));
}


static Napi::Value VkPipelineColorBlendStateCreateInfo_logicOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, logicOp));
}


static Napi::Value VkPipelineColorBlendStateCreateInfo_attachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, attachmentCount));
}


static Napi::Value VkPipelineColorBlendStateCreateInfo_pAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, pAttachments));
}


static Napi::Value VkPipelineColorBlendStateCreateInfo_blendConstants_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendStateCreateInfo, blendConstants));
}


static Napi::Value VkPipelineDynamicStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, sType));
}


static Napi::Value VkPipelineDynamicStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, pNext));
}


static Napi::Value VkPipelineDynamicStateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, flags));
}


static Napi::Value VkPipelineDynamicStateCreateInfo_dynamicStateCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, dynamicStateCount));
}


static Napi::Value VkPipelineDynamicStateCreateInfo_pDynamicStates_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDynamicStateCreateInfo, pDynamicStates));
}


static Napi::Value VkStencilOpState_failOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStencilOpState, failOp));
}


static Napi::Value VkStencilOpState_passOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStencilOpState, passOp));
}


static Napi::Value VkStencilOpState_depthFailOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStencilOpState, depthFailOp));
}


static Napi::Value VkStencilOpState_compareOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStencilOpState, compareOp));
}


static Napi::Value VkStencilOpState_compareMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStencilOpState, compareMask));
}


static Napi::Value VkStencilOpState_writeMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStencilOpState, writeMask));
}


static Napi::Value VkStencilOpState_reference_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStencilOpState, reference));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, sType));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, pNext));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, flags));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_depthTestEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, depthTestEnable));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_depthWriteEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, depthWriteEnable));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_depthCompareOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, depthCompareOp));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_depthBoundsTestEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, depthBoundsTestEnable));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_stencilTestEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, stencilTestEnable));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_front_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, front));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_back_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, back));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_minDepthBounds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, minDepthBounds));
}


static Napi::Value VkPipelineDepthStencilStateCreateInfo_maxDepthBounds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDepthStencilStateCreateInfo, maxDepthBounds));
}


static Napi::Value VkGraphicsPipelineCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, sType));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pNext));
}


static Napi::Value VkGraphicsPipelineCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, flags));
}


static Napi::Value VkGraphicsPipelineCreateInfo_stageCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, stageCount));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pStages));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pVertexInputState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pVertexInputState));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pInputAssemblyState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pInputAssemblyState));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pTessellationState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pTessellationState));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pViewportState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pViewportState));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pRasterizationState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pRasterizationState));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pMultisampleState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pMultisampleState));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pDepthStencilState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pDepthStencilState));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pColorBlendState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pColorBlendState));
}


static Napi::Value VkGraphicsPipelineCreateInfo_pDynamicState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, pDynamicState));
}


static Napi::Value VkGraphicsPipelineCreateInfo_layout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, layout));
}


static Napi::Value VkGraphicsPipelineCreateInfo_renderPass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, renderPass));
}


static Napi::Value VkGraphicsPipelineCreateInfo_subpass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, subpass));
}


static Napi::Value VkGraphicsPipelineCreateInfo_basePipelineHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, basePipelineHandle));
}


static Napi::Value VkGraphicsPipelineCreateInfo_basePipelineIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineCreateInfo, basePipelineIndex));
}


static Napi::Value VkPipelineCacheCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, sType));
}


static Napi::Value VkPipelineCacheCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, pNext));
}


static Napi::Value VkPipelineCacheCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, flags));
}


static Napi::Value VkPipelineCacheCreateInfo_initialDataSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, initialDataSize));
}


static Napi::Value VkPipelineCacheCreateInfo_pInitialData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheCreateInfo, pInitialData));
}


static Napi::Value VkPipelineCacheHeaderVersionOne_headerSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheHeaderVersionOne, headerSize));
}


static Napi::Value VkPipelineCacheHeaderVersionOne_headerVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheHeaderVersionOne, headerVersion));
}


static Napi::Value VkPipelineCacheHeaderVersionOne_vendorID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheHeaderVersionOne, vendorID));
}


static Napi::Value VkPipelineCacheHeaderVersionOne_deviceID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheHeaderVersionOne, deviceID));
}


static Napi::Value VkPipelineCacheHeaderVersionOne_pipelineCacheUUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCacheHeaderVersionOne, pipelineCacheUUID));
}


static Napi::Value VkPushConstantRange_stageFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPushConstantRange, stageFlags));
}


static Napi::Value VkPushConstantRange_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPushConstantRange, offset));
}


static Napi::Value VkPushConstantRange_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPushConstantRange, size));
}


static Napi::Value VkPipelineLayoutCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, sType));
}


static Napi::Value VkPipelineLayoutCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, pNext));
}


static Napi::Value VkPipelineLayoutCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, flags));
}


static Napi::Value VkPipelineLayoutCreateInfo_setLayoutCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, setLayoutCount));
}


static Napi::Value VkPipelineLayoutCreateInfo_pSetLayouts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, pSetLayouts));
}


static Napi::Value VkPipelineLayoutCreateInfo_pushConstantRangeCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, pushConstantRangeCount));
}


static Napi::Value VkPipelineLayoutCreateInfo_pPushConstantRanges_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLayoutCreateInfo, pPushConstantRanges));
}


static Napi::Value VkSamplerCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, sType));
}


static Napi::Value VkSamplerCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, pNext));
}


static Napi::Value VkSamplerCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, flags));
}


static Napi::Value VkSamplerCreateInfo_magFilter_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, magFilter));
}


static Napi::Value VkSamplerCreateInfo_minFilter_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, minFilter));
}


static Napi::Value VkSamplerCreateInfo_mipmapMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, mipmapMode));
}


static Napi::Value VkSamplerCreateInfo_addressModeU_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, addressModeU));
}


static Napi::Value VkSamplerCreateInfo_addressModeV_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, addressModeV));
}


static Napi::Value VkSamplerCreateInfo_addressModeW_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, addressModeW));
}


static Napi::Value VkSamplerCreateInfo_mipLodBias_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, mipLodBias));
}


static Napi::Value VkSamplerCreateInfo_anisotropyEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, anisotropyEnable));
}


static Napi::Value VkSamplerCreateInfo_maxAnisotropy_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, maxAnisotropy));
}


static Napi::Value VkSamplerCreateInfo_compareEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, compareEnable));
}


static Napi::Value VkSamplerCreateInfo_compareOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, compareOp));
}


static Napi::Value VkSamplerCreateInfo_minLod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, minLod));
}


static Napi::Value VkSamplerCreateInfo_maxLod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, maxLod));
}


static Napi::Value VkSamplerCreateInfo_borderColor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, borderColor));
}


static Napi::Value VkSamplerCreateInfo_unnormalizedCoordinates_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCreateInfo, unnormalizedCoordinates));
}


static Napi::Value VkCommandPoolCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandPoolCreateInfo, sType));
}


static Napi::Value VkCommandPoolCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandPoolCreateInfo, pNext));
}


static Napi::Value VkCommandPoolCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandPoolCreateInfo, flags));
}


static Napi::Value VkCommandPoolCreateInfo_queueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandPoolCreateInfo, queueFamilyIndex));
}


static Napi::Value VkCommandBufferAllocateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, sType));
}


static Napi::Value VkCommandBufferAllocateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, pNext));
}


static Napi::Value VkCommandBufferAllocateInfo_commandPool_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, commandPool));
}


static Napi::Value VkCommandBufferAllocateInfo_level_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, level));
}


static Napi::Value VkCommandBufferAllocateInfo_commandBufferCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferAllocateInfo, commandBufferCount));
}


static Napi::Value VkCommandBufferInheritanceInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, sType));
}


static Napi::Value VkCommandBufferInheritanceInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, pNext));
}


static Napi::Value VkCommandBufferInheritanceInfo_renderPass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, renderPass));
}


static Napi::Value VkCommandBufferInheritanceInfo_subpass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, subpass));
}


static Napi::Value VkCommandBufferInheritanceInfo_framebuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, framebuffer));
}


static Napi::Value VkCommandBufferInheritanceInfo_occlusionQueryEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, occlusionQueryEnable));
}


static Napi::Value VkCommandBufferInheritanceInfo_queryFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, queryFlags));
}


static Napi::Value VkCommandBufferInheritanceInfo_pipelineStatistics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceInfo, pipelineStatistics));
}


static Napi::Value VkCommandBufferBeginInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferBeginInfo, sType));
}


static Napi::Value VkCommandBufferBeginInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferBeginInfo, pNext));
}


static Napi::Value VkCommandBufferBeginInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferBeginInfo, flags));
}


static Napi::Value VkCommandBufferBeginInfo_pInheritanceInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferBeginInfo, pInheritanceInfo));
}


static Napi::Value VkRenderPassBeginInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, sType));
}


static Napi::Value VkRenderPassBeginInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, pNext));
}


static Napi::Value VkRenderPassBeginInfo_renderPass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, renderPass));
}


static Napi::Value VkRenderPassBeginInfo_framebuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, framebuffer));
}


static Napi::Value VkRenderPassBeginInfo_renderArea_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, renderArea));
}


static Napi::Value VkRenderPassBeginInfo_clearValueCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, clearValueCount));
}


static Napi::Value VkRenderPassBeginInfo_pClearValues_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassBeginInfo, pClearValues));
}


static Napi::Value VkClearDepthStencilValue_depth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkClearDepthStencilValue, depth));
}


static Napi::Value VkClearDepthStencilValue_stencil_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkClearDepthStencilValue, stencil));
}


static Napi::Value VkClearAttachment_aspectMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkClearAttachment, aspectMask));
}


static Napi::Value VkClearAttachment_colorAttachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkClearAttachment, colorAttachment));
}


static Napi::Value VkClearAttachment_clearValue_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkClearAttachment, clearValue));
}


static Napi::Value VkAttachmentDescription_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription, flags));
}


static Napi::Value VkAttachmentDescription_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription, format));
}


static Napi::Value VkAttachmentDescription_samples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription, samples));
}


static Napi::Value VkAttachmentDescription_loadOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription, loadOp));
}


static Napi::Value VkAttachmentDescription_storeOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription, storeOp));
}


static Napi::Value VkAttachmentDescription_stencilLoadOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription, stencilLoadOp));
}


static Napi::Value VkAttachmentDescription_stencilStoreOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription, stencilStoreOp));
}


static Napi::Value VkAttachmentDescription_initialLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription, initialLayout));
}


static Napi::Value VkAttachmentDescription_finalLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription, finalLayout));
}


static Napi::Value VkAttachmentReference_attachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReference, attachment));
}


static Napi::Value VkAttachmentReference_layout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReference, layout));
}


static Napi::Value VkSubpassDescription_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, flags));
}


static Napi::Value VkSubpassDescription_pipelineBindPoint_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, pipelineBindPoint));
}


static Napi::Value VkSubpassDescription_inputAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, inputAttachmentCount));
}


static Napi::Value VkSubpassDescription_pInputAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, pInputAttachments));
}


static Napi::Value VkSubpassDescription_colorAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, colorAttachmentCount));
}


static Napi::Value VkSubpassDescription_pColorAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, pColorAttachments));
}


static Napi::Value VkSubpassDescription_pResolveAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, pResolveAttachments));
}


static Napi::Value VkSubpassDescription_pDepthStencilAttachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, pDepthStencilAttachment));
}


static Napi::Value VkSubpassDescription_preserveAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, preserveAttachmentCount));
}


static Napi::Value VkSubpassDescription_pPreserveAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription, pPreserveAttachments));
}


static Napi::Value VkSubpassDependency_srcSubpass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency, srcSubpass));
}


static Napi::Value VkSubpassDependency_dstSubpass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency, dstSubpass));
}


static Napi::Value VkSubpassDependency_srcStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency, srcStageMask));
}


static Napi::Value VkSubpassDependency_dstStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency, dstStageMask));
}


static Napi::Value VkSubpassDependency_srcAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency, srcAccessMask));
}


static Napi::Value VkSubpassDependency_dstAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency, dstAccessMask));
}


static Napi::Value VkSubpassDependency_dependencyFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency, dependencyFlags));
}


static Napi::Value VkRenderPassCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, sType));
}


static Napi::Value VkRenderPassCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, pNext));
}


static Napi::Value VkRenderPassCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, flags));
}


static Napi::Value VkRenderPassCreateInfo_attachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, attachmentCount));
}


static Napi::Value VkRenderPassCreateInfo_pAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, pAttachments));
}


static Napi::Value VkRenderPassCreateInfo_subpassCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, subpassCount));
}


static Napi::Value VkRenderPassCreateInfo_pSubpasses_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, pSubpasses));
}


static Napi::Value VkRenderPassCreateInfo_dependencyCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, dependencyCount));
}


static Napi::Value VkRenderPassCreateInfo_pDependencies_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo, pDependencies));
}


static Napi::Value VkEventCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkEventCreateInfo, sType));
}


static Napi::Value VkEventCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkEventCreateInfo, pNext));
}


static Napi::Value VkEventCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkEventCreateInfo, flags));
}


static Napi::Value VkFenceCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceCreateInfo, sType));
}


static Napi::Value VkFenceCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceCreateInfo, pNext));
}


static Napi::Value VkFenceCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceCreateInfo, flags));
}


static Napi::Value VkPhysicalDeviceFeatures_robustBufferAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, robustBufferAccess));
}


static Napi::Value VkPhysicalDeviceFeatures_fullDrawIndexUint32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, fullDrawIndexUint32));
}


static Napi::Value VkPhysicalDeviceFeatures_imageCubeArray_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, imageCubeArray));
}


static Napi::Value VkPhysicalDeviceFeatures_independentBlend_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, independentBlend));
}


static Napi::Value VkPhysicalDeviceFeatures_geometryShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, geometryShader));
}


static Napi::Value VkPhysicalDeviceFeatures_tessellationShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, tessellationShader));
}


static Napi::Value VkPhysicalDeviceFeatures_sampleRateShading_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sampleRateShading));
}


static Napi::Value VkPhysicalDeviceFeatures_dualSrcBlend_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, dualSrcBlend));
}


static Napi::Value VkPhysicalDeviceFeatures_logicOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, logicOp));
}


static Napi::Value VkPhysicalDeviceFeatures_multiDrawIndirect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, multiDrawIndirect));
}


static Napi::Value VkPhysicalDeviceFeatures_drawIndirectFirstInstance_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, drawIndirectFirstInstance));
}


static Napi::Value VkPhysicalDeviceFeatures_depthClamp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, depthClamp));
}


static Napi::Value VkPhysicalDeviceFeatures_depthBiasClamp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, depthBiasClamp));
}


static Napi::Value VkPhysicalDeviceFeatures_fillModeNonSolid_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, fillModeNonSolid));
}


static Napi::Value VkPhysicalDeviceFeatures_depthBounds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, depthBounds));
}


static Napi::Value VkPhysicalDeviceFeatures_wideLines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, wideLines));
}


static Napi::Value VkPhysicalDeviceFeatures_largePoints_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, largePoints));
}


static Napi::Value VkPhysicalDeviceFeatures_alphaToOne_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, alphaToOne));
}


static Napi::Value VkPhysicalDeviceFeatures_multiViewport_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, multiViewport));
}


static Napi::Value VkPhysicalDeviceFeatures_samplerAnisotropy_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, samplerAnisotropy));
}


static Napi::Value VkPhysicalDeviceFeatures_textureCompressionETC2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, textureCompressionETC2));
}


static Napi::Value VkPhysicalDeviceFeatures_textureCompressionASTC_LDR_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, textureCompressionASTC_LDR));
}


static Napi::Value VkPhysicalDeviceFeatures_textureCompressionBC_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, textureCompressionBC));
}


static Napi::Value VkPhysicalDeviceFeatures_occlusionQueryPrecise_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, occlusionQueryPrecise));
}


static Napi::Value VkPhysicalDeviceFeatures_pipelineStatisticsQuery_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, pipelineStatisticsQuery));
}


static Napi::Value VkPhysicalDeviceFeatures_vertexPipelineStoresAndAtomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, vertexPipelineStoresAndAtomics));
}


static Napi::Value VkPhysicalDeviceFeatures_fragmentStoresAndAtomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, fragmentStoresAndAtomics));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderTessellationAndGeometryPointSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderTessellationAndGeometryPointSize));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderImageGatherExtended_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderImageGatherExtended));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderStorageImageExtendedFormats_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageExtendedFormats));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderStorageImageMultisample_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageMultisample));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderStorageImageReadWithoutFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageReadWithoutFormat));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderStorageImageWriteWithoutFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageWriteWithoutFormat));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderUniformBufferArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderUniformBufferArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderSampledImageArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderSampledImageArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderStorageBufferArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageBufferArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderStorageImageArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderStorageImageArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderClipDistance_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderClipDistance));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderCullDistance_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderCullDistance));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderFloat64));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderInt64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderInt64));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderInt16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderInt16));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderResourceResidency_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderResourceResidency));
}


static Napi::Value VkPhysicalDeviceFeatures_shaderResourceMinLod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, shaderResourceMinLod));
}


static Napi::Value VkPhysicalDeviceFeatures_sparseBinding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseBinding));
}


static Napi::Value VkPhysicalDeviceFeatures_sparseResidencyBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidencyBuffer));
}


static Napi::Value VkPhysicalDeviceFeatures_sparseResidencyImage2D_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage2D));
}


static Napi::Value VkPhysicalDeviceFeatures_sparseResidencyImage3D_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage3D));
}


static Napi::Value VkPhysicalDeviceFeatures_sparseResidency2Samples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidency2Samples));
}


static Napi::Value VkPhysicalDeviceFeatures_sparseResidency4Samples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidency4Samples));
}


static Napi::Value VkPhysicalDeviceFeatures_sparseResidency8Samples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidency8Samples));
}


static Napi::Value VkPhysicalDeviceFeatures_sparseResidency16Samples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidency16Samples));
}


static Napi::Value VkPhysicalDeviceFeatures_sparseResidencyAliased_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, sparseResidencyAliased));
}


static Napi::Value VkPhysicalDeviceFeatures_variableMultisampleRate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, variableMultisampleRate));
}


static Napi::Value VkPhysicalDeviceFeatures_inheritedQueries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures, inheritedQueries));
}


static Napi::Value VkPhysicalDeviceSparseProperties_residencyStandard2DBlockShape_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DBlockShape));
}


static Napi::Value VkPhysicalDeviceSparseProperties_residencyStandard2DMultisampleBlockShape_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DMultisampleBlockShape));
}


static Napi::Value VkPhysicalDeviceSparseProperties_residencyStandard3DBlockShape_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyStandard3DBlockShape));
}


static Napi::Value VkPhysicalDeviceSparseProperties_residencyAlignedMipSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyAlignedMipSize));
}


static Napi::Value VkPhysicalDeviceSparseProperties_residencyNonResidentStrict_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseProperties, residencyNonResidentStrict));
}


static Napi::Value VkPhysicalDeviceLimits_maxImageDimension1D_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageDimension1D));
}


static Napi::Value VkPhysicalDeviceLimits_maxImageDimension2D_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageDimension2D));
}


static Napi::Value VkPhysicalDeviceLimits_maxImageDimension3D_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageDimension3D));
}


static Napi::Value VkPhysicalDeviceLimits_maxImageDimensionCube_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageDimensionCube));
}


static Napi::Value VkPhysicalDeviceLimits_maxImageArrayLayers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxImageArrayLayers));
}


static Napi::Value VkPhysicalDeviceLimits_maxTexelBufferElements_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTexelBufferElements));
}


static Napi::Value VkPhysicalDeviceLimits_maxUniformBufferRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxUniformBufferRange));
}


static Napi::Value VkPhysicalDeviceLimits_maxStorageBufferRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxStorageBufferRange));
}


static Napi::Value VkPhysicalDeviceLimits_maxPushConstantsSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPushConstantsSize));
}


static Napi::Value VkPhysicalDeviceLimits_maxMemoryAllocationCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxMemoryAllocationCount));
}


static Napi::Value VkPhysicalDeviceLimits_maxSamplerAllocationCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxSamplerAllocationCount));
}


static Napi::Value VkPhysicalDeviceLimits_bufferImageGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, bufferImageGranularity));
}


static Napi::Value VkPhysicalDeviceLimits_sparseAddressSpaceSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sparseAddressSpaceSize));
}


static Napi::Value VkPhysicalDeviceLimits_maxBoundDescriptorSets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxBoundDescriptorSets));
}


static Napi::Value VkPhysicalDeviceLimits_maxPerStageDescriptorSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSamplers));
}


static Napi::Value VkPhysicalDeviceLimits_maxPerStageDescriptorUniformBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorUniformBuffers));
}


static Napi::Value VkPhysicalDeviceLimits_maxPerStageDescriptorStorageBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageBuffers));
}


static Napi::Value VkPhysicalDeviceLimits_maxPerStageDescriptorSampledImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSampledImages));
}


static Napi::Value VkPhysicalDeviceLimits_maxPerStageDescriptorStorageImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageImages));
}


static Napi::Value VkPhysicalDeviceLimits_maxPerStageDescriptorInputAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorInputAttachments));
}


static Napi::Value VkPhysicalDeviceLimits_maxPerStageResources_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxPerStageResources));
}


static Napi::Value VkPhysicalDeviceLimits_maxDescriptorSetSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSamplers));
}


static Napi::Value VkPhysicalDeviceLimits_maxDescriptorSetUniformBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffers));
}


static Napi::Value VkPhysicalDeviceLimits_maxDescriptorSetUniformBuffersDynamic_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffersDynamic));
}


static Napi::Value VkPhysicalDeviceLimits_maxDescriptorSetStorageBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffers));
}


static Napi::Value VkPhysicalDeviceLimits_maxDescriptorSetStorageBuffersDynamic_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffersDynamic));
}


static Napi::Value VkPhysicalDeviceLimits_maxDescriptorSetSampledImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSampledImages));
}


static Napi::Value VkPhysicalDeviceLimits_maxDescriptorSetStorageImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageImages));
}


static Napi::Value VkPhysicalDeviceLimits_maxDescriptorSetInputAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDescriptorSetInputAttachments));
}


static Napi::Value VkPhysicalDeviceLimits_maxVertexInputAttributes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributes));
}


static Napi::Value VkPhysicalDeviceLimits_maxVertexInputBindings_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexInputBindings));
}


static Napi::Value VkPhysicalDeviceLimits_maxVertexInputAttributeOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributeOffset));
}


static Napi::Value VkPhysicalDeviceLimits_maxVertexInputBindingStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexInputBindingStride));
}


static Napi::Value VkPhysicalDeviceLimits_maxVertexOutputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxVertexOutputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxTessellationGenerationLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationGenerationLevel));
}


static Napi::Value VkPhysicalDeviceLimits_maxTessellationPatchSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationPatchSize));
}


static Napi::Value VkPhysicalDeviceLimits_maxTessellationControlPerVertexInputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexInputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxTessellationControlPerVertexOutputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexOutputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxTessellationControlPerPatchOutputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerPatchOutputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxTessellationControlTotalOutputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationControlTotalOutputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxTessellationEvaluationInputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationInputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxTessellationEvaluationOutputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationOutputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxGeometryShaderInvocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryShaderInvocations));
}


static Napi::Value VkPhysicalDeviceLimits_maxGeometryInputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryInputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxGeometryOutputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryOutputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxGeometryOutputVertices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryOutputVertices));
}


static Napi::Value VkPhysicalDeviceLimits_maxGeometryTotalOutputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxGeometryTotalOutputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxFragmentInputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFragmentInputComponents));
}


static Napi::Value VkPhysicalDeviceLimits_maxFragmentOutputAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFragmentOutputAttachments));
}


static Napi::Value VkPhysicalDeviceLimits_maxFragmentDualSrcAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFragmentDualSrcAttachments));
}


static Napi::Value VkPhysicalDeviceLimits_maxFragmentCombinedOutputResources_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFragmentCombinedOutputResources));
}


static Napi::Value VkPhysicalDeviceLimits_maxComputeSharedMemorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxComputeSharedMemorySize));
}


static Napi::Value VkPhysicalDeviceLimits_maxComputeWorkGroupCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupCount));
}


static Napi::Value VkPhysicalDeviceLimits_maxComputeWorkGroupInvocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupInvocations));
}


static Napi::Value VkPhysicalDeviceLimits_maxComputeWorkGroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupSize));
}


static Napi::Value VkPhysicalDeviceLimits_subPixelPrecisionBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, subPixelPrecisionBits));
}


static Napi::Value VkPhysicalDeviceLimits_subTexelPrecisionBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, subTexelPrecisionBits));
}


static Napi::Value VkPhysicalDeviceLimits_mipmapPrecisionBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, mipmapPrecisionBits));
}


static Napi::Value VkPhysicalDeviceLimits_maxDrawIndexedIndexValue_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDrawIndexedIndexValue));
}


static Napi::Value VkPhysicalDeviceLimits_maxDrawIndirectCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxDrawIndirectCount));
}


static Napi::Value VkPhysicalDeviceLimits_maxSamplerLodBias_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxSamplerLodBias));
}


static Napi::Value VkPhysicalDeviceLimits_maxSamplerAnisotropy_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxSamplerAnisotropy));
}


static Napi::Value VkPhysicalDeviceLimits_maxViewports_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxViewports));
}


static Napi::Value VkPhysicalDeviceLimits_maxViewportDimensions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxViewportDimensions));
}


static Napi::Value VkPhysicalDeviceLimits_viewportBoundsRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, viewportBoundsRange));
}


static Napi::Value VkPhysicalDeviceLimits_viewportSubPixelBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, viewportSubPixelBits));
}


static Napi::Value VkPhysicalDeviceLimits_minMemoryMapAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minMemoryMapAlignment));
}


static Napi::Value VkPhysicalDeviceLimits_minTexelBufferOffsetAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minTexelBufferOffsetAlignment));
}


static Napi::Value VkPhysicalDeviceLimits_minUniformBufferOffsetAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minUniformBufferOffsetAlignment));
}


static Napi::Value VkPhysicalDeviceLimits_minStorageBufferOffsetAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minStorageBufferOffsetAlignment));
}


static Napi::Value VkPhysicalDeviceLimits_minTexelOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minTexelOffset));
}


static Napi::Value VkPhysicalDeviceLimits_maxTexelOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTexelOffset));
}


static Napi::Value VkPhysicalDeviceLimits_minTexelGatherOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minTexelGatherOffset));
}


static Napi::Value VkPhysicalDeviceLimits_maxTexelGatherOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxTexelGatherOffset));
}


static Napi::Value VkPhysicalDeviceLimits_minInterpolationOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, minInterpolationOffset));
}


static Napi::Value VkPhysicalDeviceLimits_maxInterpolationOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxInterpolationOffset));
}


static Napi::Value VkPhysicalDeviceLimits_subPixelInterpolationOffsetBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, subPixelInterpolationOffsetBits));
}


static Napi::Value VkPhysicalDeviceLimits_maxFramebufferWidth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFramebufferWidth));
}


static Napi::Value VkPhysicalDeviceLimits_maxFramebufferHeight_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFramebufferHeight));
}


static Napi::Value VkPhysicalDeviceLimits_maxFramebufferLayers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxFramebufferLayers));
}


static Napi::Value VkPhysicalDeviceLimits_framebufferColorSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, framebufferColorSampleCounts));
}


static Napi::Value VkPhysicalDeviceLimits_framebufferDepthSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, framebufferDepthSampleCounts));
}


static Napi::Value VkPhysicalDeviceLimits_framebufferStencilSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, framebufferStencilSampleCounts));
}


static Napi::Value VkPhysicalDeviceLimits_framebufferNoAttachmentsSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, framebufferNoAttachmentsSampleCounts));
}


static Napi::Value VkPhysicalDeviceLimits_maxColorAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxColorAttachments));
}


static Napi::Value VkPhysicalDeviceLimits_sampledImageColorSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sampledImageColorSampleCounts));
}


static Napi::Value VkPhysicalDeviceLimits_sampledImageIntegerSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sampledImageIntegerSampleCounts));
}


static Napi::Value VkPhysicalDeviceLimits_sampledImageDepthSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sampledImageDepthSampleCounts));
}


static Napi::Value VkPhysicalDeviceLimits_sampledImageStencilSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, sampledImageStencilSampleCounts));
}


static Napi::Value VkPhysicalDeviceLimits_storageImageSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, storageImageSampleCounts));
}


static Napi::Value VkPhysicalDeviceLimits_maxSampleMaskWords_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxSampleMaskWords));
}


static Napi::Value VkPhysicalDeviceLimits_timestampComputeAndGraphics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, timestampComputeAndGraphics));
}


static Napi::Value VkPhysicalDeviceLimits_timestampPeriod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, timestampPeriod));
}


static Napi::Value VkPhysicalDeviceLimits_maxClipDistances_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxClipDistances));
}


static Napi::Value VkPhysicalDeviceLimits_maxCullDistances_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxCullDistances));
}


static Napi::Value VkPhysicalDeviceLimits_maxCombinedClipAndCullDistances_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, maxCombinedClipAndCullDistances));
}


static Napi::Value VkPhysicalDeviceLimits_discreteQueuePriorities_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, discreteQueuePriorities));
}


static Napi::Value VkPhysicalDeviceLimits_pointSizeRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, pointSizeRange));
}


static Napi::Value VkPhysicalDeviceLimits_lineWidthRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, lineWidthRange));
}


static Napi::Value VkPhysicalDeviceLimits_pointSizeGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, pointSizeGranularity));
}


static Napi::Value VkPhysicalDeviceLimits_lineWidthGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, lineWidthGranularity));
}


static Napi::Value VkPhysicalDeviceLimits_strictLines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, strictLines));
}


static Napi::Value VkPhysicalDeviceLimits_standardSampleLocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, standardSampleLocations));
}


static Napi::Value VkPhysicalDeviceLimits_optimalBufferCopyOffsetAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, optimalBufferCopyOffsetAlignment));
}


static Napi::Value VkPhysicalDeviceLimits_optimalBufferCopyRowPitchAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, optimalBufferCopyRowPitchAlignment));
}


static Napi::Value VkPhysicalDeviceLimits_nonCoherentAtomSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLimits, nonCoherentAtomSize));
}


static Napi::Value VkSemaphoreCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreCreateInfo, sType));
}


static Napi::Value VkSemaphoreCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreCreateInfo, pNext));
}


static Napi::Value VkSemaphoreCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreCreateInfo, flags));
}


static Napi::Value VkQueryPoolCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, sType));
}


static Napi::Value VkQueryPoolCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, pNext));
}


static Napi::Value VkQueryPoolCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, flags));
}


static Napi::Value VkQueryPoolCreateInfo_queryType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, queryType));
}


static Napi::Value VkQueryPoolCreateInfo_queryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, queryCount));
}


static Napi::Value VkQueryPoolCreateInfo_pipelineStatistics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolCreateInfo, pipelineStatistics));
}


static Napi::Value VkFramebufferCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, sType));
}


static Napi::Value VkFramebufferCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, pNext));
}


static Napi::Value VkFramebufferCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, flags));
}


static Napi::Value VkFramebufferCreateInfo_renderPass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, renderPass));
}


static Napi::Value VkFramebufferCreateInfo_attachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, attachmentCount));
}


static Napi::Value VkFramebufferCreateInfo_pAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, pAttachments));
}


static Napi::Value VkFramebufferCreateInfo_width_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, width));
}


static Napi::Value VkFramebufferCreateInfo_height_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, height));
}


static Napi::Value VkFramebufferCreateInfo_layers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferCreateInfo, layers));
}


static Napi::Value VkDrawIndirectCommand_vertexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawIndirectCommand, vertexCount));
}


static Napi::Value VkDrawIndirectCommand_instanceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawIndirectCommand, instanceCount));
}


static Napi::Value VkDrawIndirectCommand_firstVertex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawIndirectCommand, firstVertex));
}


static Napi::Value VkDrawIndirectCommand_firstInstance_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawIndirectCommand, firstInstance));
}


static Napi::Value VkDrawIndexedIndirectCommand_indexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, indexCount));
}


static Napi::Value VkDrawIndexedIndirectCommand_instanceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, instanceCount));
}


static Napi::Value VkDrawIndexedIndirectCommand_firstIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, firstIndex));
}


static Napi::Value VkDrawIndexedIndirectCommand_vertexOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, vertexOffset));
}


static Napi::Value VkDrawIndexedIndirectCommand_firstInstance_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawIndexedIndirectCommand, firstInstance));
}


static Napi::Value VkDispatchIndirectCommand_x_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDispatchIndirectCommand, x));
}


static Napi::Value VkDispatchIndirectCommand_y_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDispatchIndirectCommand, y));
}


static Napi::Value VkDispatchIndirectCommand_z_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDispatchIndirectCommand, z));
}

#ifdef VK_EXT_multi_draw
static Napi::Value VkMultiDrawInfoEXT_firstVertex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultiDrawInfoEXT, firstVertex));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkMultiDrawInfoEXT_vertexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultiDrawInfoEXT, vertexCount));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkMultiDrawIndexedInfoEXT_firstIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultiDrawIndexedInfoEXT, firstIndex));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkMultiDrawIndexedInfoEXT_indexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultiDrawIndexedInfoEXT, indexCount));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkMultiDrawIndexedInfoEXT_vertexOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultiDrawIndexedInfoEXT, vertexOffset));
}
#endif


static Napi::Value VkSubmitInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo, sType));
}


static Napi::Value VkSubmitInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo, pNext));
}


static Napi::Value VkSubmitInfo_waitSemaphoreCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo, waitSemaphoreCount));
}


static Napi::Value VkSubmitInfo_pWaitSemaphores_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo, pWaitSemaphores));
}


static Napi::Value VkSubmitInfo_pWaitDstStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo, pWaitDstStageMask));
}


static Napi::Value VkSubmitInfo_commandBufferCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo, commandBufferCount));
}


static Napi::Value VkSubmitInfo_pCommandBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo, pCommandBuffers));
}


static Napi::Value VkSubmitInfo_signalSemaphoreCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo, signalSemaphoreCount));
}


static Napi::Value VkSubmitInfo_pSignalSemaphores_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo, pSignalSemaphores));
}

#ifdef VK_KHR_display
static Napi::Value VkDisplayPropertiesKHR_display_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, display));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPropertiesKHR_displayName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, displayName));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPropertiesKHR_physicalDimensions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, physicalDimensions));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPropertiesKHR_physicalResolution_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, physicalResolution));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPropertiesKHR_supportedTransforms_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, supportedTransforms));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPropertiesKHR_planeReorderPossible_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, planeReorderPossible));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPropertiesKHR_persistentContent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPropertiesKHR, persistentContent));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlanePropertiesKHR_currentDisplay_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlanePropertiesKHR, currentDisplay));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlanePropertiesKHR_currentStackIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlanePropertiesKHR, currentStackIndex));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayModeParametersKHR_visibleRegion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModeParametersKHR, visibleRegion));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayModeParametersKHR_refreshRate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModeParametersKHR, refreshRate));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayModePropertiesKHR_displayMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModePropertiesKHR, displayMode));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayModePropertiesKHR_parameters_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModePropertiesKHR, parameters));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayModeCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModeCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayModeCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModeCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayModeCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModeCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayModeCreateInfoKHR_parameters_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModeCreateInfoKHR, parameters));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlaneCapabilitiesKHR_supportedAlpha_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, supportedAlpha));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlaneCapabilitiesKHR_minSrcPosition_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcPosition));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlaneCapabilitiesKHR_maxSrcPosition_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcPosition));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlaneCapabilitiesKHR_minSrcExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcExtent));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlaneCapabilitiesKHR_maxSrcExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcExtent));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlaneCapabilitiesKHR_minDstPosition_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, minDstPosition));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlaneCapabilitiesKHR_maxDstPosition_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstPosition));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlaneCapabilitiesKHR_minDstExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, minDstExtent));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplayPlaneCapabilitiesKHR_maxDstExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstExtent));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_displayMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, displayMode));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_planeIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, planeIndex));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_planeStackIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, planeStackIndex));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_transform_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, transform));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_globalAlpha_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, globalAlpha));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_alphaMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, alphaMode));
}
#endif

#ifdef VK_KHR_display
static Napi::Value VkDisplaySurfaceCreateInfoKHR_imageExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplaySurfaceCreateInfoKHR, imageExtent));
}
#endif

#ifdef VK_KHR_display_swapchain
static Napi::Value VkDisplayPresentInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, sType));
}
#endif

#ifdef VK_KHR_display_swapchain
static Napi::Value VkDisplayPresentInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_display_swapchain
static Napi::Value VkDisplayPresentInfoKHR_srcRect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, srcRect));
}
#endif

#ifdef VK_KHR_display_swapchain
static Napi::Value VkDisplayPresentInfoKHR_dstRect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, dstRect));
}
#endif

#ifdef VK_KHR_display_swapchain
static Napi::Value VkDisplayPresentInfoKHR_persistent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPresentInfoKHR, persistent));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_minImageCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, minImageCount));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_maxImageCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, maxImageCount));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_currentExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, currentExtent));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_minImageExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, minImageExtent));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_maxImageExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, maxImageExtent));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_maxImageArrayLayers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, maxImageArrayLayers));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_supportedTransforms_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, supportedTransforms));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_currentTransform_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, currentTransform));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_supportedCompositeAlpha_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, supportedCompositeAlpha));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceCapabilitiesKHR_supportedUsageFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesKHR, supportedUsageFlags));
}
#endif

#ifdef VK_KHR_android_surface
static Napi::Value VkAndroidSurfaceCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidSurfaceCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_android_surface
static Napi::Value VkAndroidSurfaceCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidSurfaceCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_android_surface
static Napi::Value VkAndroidSurfaceCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidSurfaceCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_android_surface
static Napi::Value VkAndroidSurfaceCreateInfoKHR_window_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidSurfaceCreateInfoKHR, window));
}
#endif

#ifdef VK_NN_vi_surface
static Napi::Value VkViSurfaceCreateInfoNN_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViSurfaceCreateInfoNN, sType));
}
#endif

#ifdef VK_NN_vi_surface
static Napi::Value VkViSurfaceCreateInfoNN_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViSurfaceCreateInfoNN, pNext));
}
#endif

#ifdef VK_NN_vi_surface
static Napi::Value VkViSurfaceCreateInfoNN_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViSurfaceCreateInfoNN, flags));
}
#endif

#ifdef VK_NN_vi_surface
static Napi::Value VkViSurfaceCreateInfoNN_window_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViSurfaceCreateInfoNN, window));
}
#endif

#ifdef VK_KHR_wayland_surface
static Napi::Value VkWaylandSurfaceCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWaylandSurfaceCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_wayland_surface
static Napi::Value VkWaylandSurfaceCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWaylandSurfaceCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_wayland_surface
static Napi::Value VkWaylandSurfaceCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWaylandSurfaceCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_wayland_surface
static Napi::Value VkWaylandSurfaceCreateInfoKHR_display_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWaylandSurfaceCreateInfoKHR, display));
}
#endif

#ifdef VK_KHR_wayland_surface
static Napi::Value VkWaylandSurfaceCreateInfoKHR_surface_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWaylandSurfaceCreateInfoKHR, surface));
}
#endif

#ifdef VK_KHR_win32_surface
static Napi::Value VkWin32SurfaceCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_win32_surface
static Napi::Value VkWin32SurfaceCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_win32_surface
static Napi::Value VkWin32SurfaceCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_win32_surface
static Napi::Value VkWin32SurfaceCreateInfoKHR_hinstance_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, hinstance));
}
#endif

#ifdef VK_KHR_win32_surface
static Napi::Value VkWin32SurfaceCreateInfoKHR_hwnd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32SurfaceCreateInfoKHR, hwnd));
}
#endif

#ifdef VK_KHR_xlib_surface
static Napi::Value VkXlibSurfaceCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXlibSurfaceCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_xlib_surface
static Napi::Value VkXlibSurfaceCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXlibSurfaceCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_xlib_surface
static Napi::Value VkXlibSurfaceCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXlibSurfaceCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_xlib_surface
static Napi::Value VkXlibSurfaceCreateInfoKHR_dpy_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXlibSurfaceCreateInfoKHR, dpy));
}
#endif

#ifdef VK_KHR_xlib_surface
static Napi::Value VkXlibSurfaceCreateInfoKHR_window_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXlibSurfaceCreateInfoKHR, window));
}
#endif

#ifdef VK_KHR_xcb_surface
static Napi::Value VkXcbSurfaceCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXcbSurfaceCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_xcb_surface
static Napi::Value VkXcbSurfaceCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXcbSurfaceCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_xcb_surface
static Napi::Value VkXcbSurfaceCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXcbSurfaceCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_xcb_surface
static Napi::Value VkXcbSurfaceCreateInfoKHR_connection_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXcbSurfaceCreateInfoKHR, connection));
}
#endif

#ifdef VK_KHR_xcb_surface
static Napi::Value VkXcbSurfaceCreateInfoKHR_window_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXcbSurfaceCreateInfoKHR, window));
}
#endif

#ifdef VK_EXT_directfb_surface
static Napi::Value VkDirectFBSurfaceCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDirectFBSurfaceCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_directfb_surface
static Napi::Value VkDirectFBSurfaceCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDirectFBSurfaceCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_directfb_surface
static Napi::Value VkDirectFBSurfaceCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDirectFBSurfaceCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_directfb_surface
static Napi::Value VkDirectFBSurfaceCreateInfoEXT_dfb_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDirectFBSurfaceCreateInfoEXT, dfb));
}
#endif

#ifdef VK_EXT_directfb_surface
static Napi::Value VkDirectFBSurfaceCreateInfoEXT_surface_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDirectFBSurfaceCreateInfoEXT, surface));
}
#endif

#ifdef VK_FUCHSIA_imagepipe_surface
static Napi::Value VkImagePipeSurfaceCreateInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImagePipeSurfaceCreateInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_imagepipe_surface
static Napi::Value VkImagePipeSurfaceCreateInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImagePipeSurfaceCreateInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_imagepipe_surface
static Napi::Value VkImagePipeSurfaceCreateInfoFUCHSIA_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImagePipeSurfaceCreateInfoFUCHSIA, flags));
}
#endif

#ifdef VK_FUCHSIA_imagepipe_surface
static Napi::Value VkImagePipeSurfaceCreateInfoFUCHSIA_imagePipeHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImagePipeSurfaceCreateInfoFUCHSIA, imagePipeHandle));
}
#endif

#ifdef VK_GGP_stream_descriptor_surface
static Napi::Value VkStreamDescriptorSurfaceCreateInfoGGP_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStreamDescriptorSurfaceCreateInfoGGP, sType));
}
#endif

#ifdef VK_GGP_stream_descriptor_surface
static Napi::Value VkStreamDescriptorSurfaceCreateInfoGGP_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStreamDescriptorSurfaceCreateInfoGGP, pNext));
}
#endif

#ifdef VK_GGP_stream_descriptor_surface
static Napi::Value VkStreamDescriptorSurfaceCreateInfoGGP_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStreamDescriptorSurfaceCreateInfoGGP, flags));
}
#endif

#ifdef VK_GGP_stream_descriptor_surface
static Napi::Value VkStreamDescriptorSurfaceCreateInfoGGP_streamDescriptor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStreamDescriptorSurfaceCreateInfoGGP, streamDescriptor));
}
#endif

#ifdef VK_QNX_screen_surface
static Napi::Value VkScreenSurfaceCreateInfoQNX_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkScreenSurfaceCreateInfoQNX, sType));
}
#endif

#ifdef VK_QNX_screen_surface
static Napi::Value VkScreenSurfaceCreateInfoQNX_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkScreenSurfaceCreateInfoQNX, pNext));
}
#endif

#ifdef VK_QNX_screen_surface
static Napi::Value VkScreenSurfaceCreateInfoQNX_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkScreenSurfaceCreateInfoQNX, flags));
}
#endif

#ifdef VK_QNX_screen_surface
static Napi::Value VkScreenSurfaceCreateInfoQNX_context_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkScreenSurfaceCreateInfoQNX, context));
}
#endif

#ifdef VK_QNX_screen_surface
static Napi::Value VkScreenSurfaceCreateInfoQNX_window_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkScreenSurfaceCreateInfoQNX, window));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceFormatKHR_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFormatKHR, format));
}
#endif

#ifdef VK_KHR_surface
static Napi::Value VkSurfaceFormatKHR_colorSpace_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFormatKHR, colorSpace));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_surface_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, surface));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_minImageCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, minImageCount));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_imageFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageFormat));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_imageColorSpace_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageColorSpace));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_imageExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageExtent));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_imageArrayLayers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageArrayLayers));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_imageUsage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageUsage));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_imageSharingMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, imageSharingMode));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_queueFamilyIndexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, queueFamilyIndexCount));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_pQueueFamilyIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, pQueueFamilyIndices));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_preTransform_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, preTransform));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_compositeAlpha_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, compositeAlpha));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_presentMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, presentMode));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_clipped_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, clipped));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkSwapchainCreateInfoKHR_oldSwapchain_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCreateInfoKHR, oldSwapchain));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkPresentInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentInfoKHR, sType));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkPresentInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkPresentInfoKHR_waitSemaphoreCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentInfoKHR, waitSemaphoreCount));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkPresentInfoKHR_pWaitSemaphores_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentInfoKHR, pWaitSemaphores));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkPresentInfoKHR_swapchainCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentInfoKHR, swapchainCount));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkPresentInfoKHR_pSwapchains_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentInfoKHR, pSwapchains));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkPresentInfoKHR_pImageIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentInfoKHR, pImageIndices));
}
#endif

#ifdef VK_KHR_swapchain
static Napi::Value VkPresentInfoKHR_pResults_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentInfoKHR, pResults));
}
#endif

#ifdef VK_EXT_debug_report
static Napi::Value VkDebugReportCallbackCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_debug_report
static Napi::Value VkDebugReportCallbackCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_debug_report
static Napi::Value VkDebugReportCallbackCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_debug_report
static Napi::Value VkDebugReportCallbackCreateInfoEXT_pfnCallback_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, pfnCallback));
}
#endif

#ifdef VK_EXT_debug_report
static Napi::Value VkDebugReportCallbackCreateInfoEXT_pUserData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugReportCallbackCreateInfoEXT, pUserData));
}
#endif

#ifdef VK_EXT_validation_flags
static Napi::Value VkValidationFlagsEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFlagsEXT, sType));
}
#endif

#ifdef VK_EXT_validation_flags
static Napi::Value VkValidationFlagsEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFlagsEXT, pNext));
}
#endif

#ifdef VK_EXT_validation_flags
static Napi::Value VkValidationFlagsEXT_disabledValidationCheckCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFlagsEXT, disabledValidationCheckCount));
}
#endif

#ifdef VK_EXT_validation_flags
static Napi::Value VkValidationFlagsEXT_pDisabledValidationChecks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFlagsEXT, pDisabledValidationChecks));
}
#endif

#ifdef VK_EXT_validation_features
static Napi::Value VkValidationFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_validation_features
static Napi::Value VkValidationFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_validation_features
static Napi::Value VkValidationFeaturesEXT_enabledValidationFeatureCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, enabledValidationFeatureCount));
}
#endif

#ifdef VK_EXT_validation_features
static Napi::Value VkValidationFeaturesEXT_pEnabledValidationFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, pEnabledValidationFeatures));
}
#endif

#ifdef VK_EXT_validation_features
static Napi::Value VkValidationFeaturesEXT_disabledValidationFeatureCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, disabledValidationFeatureCount));
}
#endif

#ifdef VK_EXT_validation_features
static Napi::Value VkValidationFeaturesEXT_pDisabledValidationFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationFeaturesEXT, pDisabledValidationFeatures));
}
#endif

#ifdef VK_AMD_rasterization_order
static Napi::Value VkPipelineRasterizationStateRasterizationOrderAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateRasterizationOrderAMD, sType));
}
#endif

#ifdef VK_AMD_rasterization_order
static Napi::Value VkPipelineRasterizationStateRasterizationOrderAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateRasterizationOrderAMD, pNext));
}
#endif

#ifdef VK_AMD_rasterization_order
static Napi::Value VkPipelineRasterizationStateRasterizationOrderAMD_rasterizationOrder_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateRasterizationOrderAMD, rasterizationOrder));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectNameInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, sType));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectNameInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectNameInfoEXT_objectType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, objectType));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectNameInfoEXT_object_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, object));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectNameInfoEXT_pObjectName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectNameInfoEXT, pObjectName));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectTagInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, sType));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectTagInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectTagInfoEXT_objectType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, objectType));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectTagInfoEXT_object_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, object));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectTagInfoEXT_tagName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, tagName));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectTagInfoEXT_tagSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, tagSize));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerObjectTagInfoEXT_pTag_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerObjectTagInfoEXT, pTag));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerMarkerInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerMarkerInfoEXT, sType));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerMarkerInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerMarkerInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerMarkerInfoEXT_pMarkerName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerMarkerInfoEXT, pMarkerName));
}
#endif

#ifdef VK_EXT_debug_marker
static Napi::Value VkDebugMarkerMarkerInfoEXT_color_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugMarkerMarkerInfoEXT, color));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationImageCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationImageCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationImageCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationImageCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationImageCreateInfoNV_dedicatedAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationImageCreateInfoNV, dedicatedAllocation));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationBufferCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationBufferCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationBufferCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationBufferCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationBufferCreateInfoNV_dedicatedAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationBufferCreateInfoNV, dedicatedAllocation));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationMemoryAllocateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, sType));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationMemoryAllocateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, pNext));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationMemoryAllocateInfoNV_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, image));
}
#endif

#ifdef VK_NV_dedicated_allocation
static Napi::Value VkDedicatedAllocationMemoryAllocateInfoNV_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, buffer));
}
#endif

#ifdef VK_NV_external_memory_capabilities
static Napi::Value VkExternalImageFormatPropertiesNV_imageFormatProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesNV, imageFormatProperties));
}
#endif

#ifdef VK_NV_external_memory_capabilities
static Napi::Value VkExternalImageFormatPropertiesNV_externalMemoryFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesNV, externalMemoryFeatures));
}
#endif

#ifdef VK_NV_external_memory_capabilities
static Napi::Value VkExternalImageFormatPropertiesNV_exportFromImportedHandleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesNV, exportFromImportedHandleTypes));
}
#endif

#ifdef VK_NV_external_memory_capabilities
static Napi::Value VkExternalImageFormatPropertiesNV_compatibleHandleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalImageFormatPropertiesNV, compatibleHandleTypes));
}
#endif

#ifdef VK_NV_external_memory
static Napi::Value VkExternalMemoryImageCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_external_memory
static Napi::Value VkExternalMemoryImageCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_external_memory
static Napi::Value VkExternalMemoryImageCreateInfoNV_handleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfoNV, handleTypes));
}
#endif

#ifdef VK_NV_external_memory
static Napi::Value VkExportMemoryAllocateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfoNV, sType));
}
#endif

#ifdef VK_NV_external_memory
static Napi::Value VkExportMemoryAllocateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfoNV, pNext));
}
#endif

#ifdef VK_NV_external_memory
static Napi::Value VkExportMemoryAllocateInfoNV_handleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfoNV, handleTypes));
}
#endif

#ifdef VK_NV_external_memory_win32
static Napi::Value VkImportMemoryWin32HandleInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoNV, sType));
}
#endif

#ifdef VK_NV_external_memory_win32
static Napi::Value VkImportMemoryWin32HandleInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoNV, pNext));
}
#endif

#ifdef VK_NV_external_memory_win32
static Napi::Value VkImportMemoryWin32HandleInfoNV_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoNV, handleType));
}
#endif

#ifdef VK_NV_external_memory_win32
static Napi::Value VkImportMemoryWin32HandleInfoNV_handle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoNV, handle));
}
#endif

#ifdef VK_NV_external_memory_win32
static Napi::Value VkExportMemoryWin32HandleInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoNV, sType));
}
#endif

#ifdef VK_NV_external_memory_win32
static Napi::Value VkExportMemoryWin32HandleInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoNV, pNext));
}
#endif

#ifdef VK_NV_external_memory_win32
static Napi::Value VkExportMemoryWin32HandleInfoNV_pAttributes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoNV, pAttributes));
}
#endif

#ifdef VK_NV_external_memory_win32
static Napi::Value VkExportMemoryWin32HandleInfoNV_dwAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoNV, dwAccess));
}
#endif

#ifdef VK_NV_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, sType));
}
#endif

#ifdef VK_NV_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pNext));
}
#endif

#ifdef VK_NV_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoNV_acquireCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, acquireCount));
}
#endif

#ifdef VK_NV_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoNV_pAcquireSyncs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pAcquireSyncs));
}
#endif

#ifdef VK_NV_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoNV_pAcquireKeys_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pAcquireKeys));
}
#endif

#ifdef VK_NV_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoNV_pAcquireTimeoutMilliseconds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pAcquireTimeoutMilliseconds));
}
#endif

#ifdef VK_NV_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoNV_releaseCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, releaseCount));
}
#endif

#ifdef VK_NV_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoNV_pReleaseSyncs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pReleaseSyncs));
}
#endif

#ifdef VK_NV_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoNV_pReleaseKeys_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pReleaseKeys));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, sType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_deviceGeneratedCommands_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, deviceGeneratedCommands));
}
#endif


static Napi::Value VkDevicePrivateDataCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDevicePrivateDataCreateInfo, sType));
}


static Napi::Value VkDevicePrivateDataCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDevicePrivateDataCreateInfo, pNext));
}


static Napi::Value VkDevicePrivateDataCreateInfo_privateDataSlotRequestCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDevicePrivateDataCreateInfo, privateDataSlotRequestCount));
}



static Napi::Value VkPrivateDataSlotCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPrivateDataSlotCreateInfo, sType));
}


static Napi::Value VkPrivateDataSlotCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPrivateDataSlotCreateInfo, pNext));
}


static Napi::Value VkPrivateDataSlotCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPrivateDataSlotCreateInfo, flags));
}



static Napi::Value VkPhysicalDevicePrivateDataFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrivateDataFeatures, sType));
}


static Napi::Value VkPhysicalDevicePrivateDataFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrivateDataFeatures, pNext));
}


static Napi::Value VkPhysicalDevicePrivateDataFeatures_privateData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrivateDataFeatures, privateData));
}


#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, sType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxGraphicsShaderGroupCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxGraphicsShaderGroupCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectSequenceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectSequenceCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsTokenCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectCommandsTokenCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsStreamCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectCommandsStreamCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsTokenOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectCommandsTokenOffset));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsStreamStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, maxIndirectCommandsStreamStride));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_minSequencesCountBufferOffsetAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, minSequencesCountBufferOffsetAlignment));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_minSequencesIndexBufferOffsetAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, minSequencesIndexBufferOffsetAlignment));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_minIndirectCommandsBufferOffsetAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, minIndirectCommandsBufferOffsetAlignment));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkPhysicalDeviceMultiDrawPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiDrawPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkPhysicalDeviceMultiDrawPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiDrawPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkPhysicalDeviceMultiDrawPropertiesEXT_maxMultiDrawCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiDrawPropertiesEXT, maxMultiDrawCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsShaderGroupCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsShaderGroupCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsShaderGroupCreateInfoNV_stageCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, stageCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsShaderGroupCreateInfoNV_pStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, pStages));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsShaderGroupCreateInfoNV_pVertexInputState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, pVertexInputState));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsShaderGroupCreateInfoNV_pTessellationState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsShaderGroupCreateInfoNV, pTessellationState));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsPipelineShaderGroupsCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsPipelineShaderGroupsCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsPipelineShaderGroupsCreateInfoNV_groupCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, groupCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsPipelineShaderGroupsCreateInfoNV_pGroups_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, pGroups));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsPipelineShaderGroupsCreateInfoNV_pipelineCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, pipelineCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGraphicsPipelineShaderGroupsCreateInfoNV_pPipelines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineShaderGroupsCreateInfoNV, pPipelines));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkBindShaderGroupIndirectCommandNV_groupIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindShaderGroupIndirectCommandNV, groupIndex));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkBindIndexBufferIndirectCommandNV_bufferAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindIndexBufferIndirectCommandNV, bufferAddress));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkBindIndexBufferIndirectCommandNV_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindIndexBufferIndirectCommandNV, size));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkBindIndexBufferIndirectCommandNV_indexType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindIndexBufferIndirectCommandNV, indexType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkBindVertexBufferIndirectCommandNV_bufferAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindVertexBufferIndirectCommandNV, bufferAddress));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkBindVertexBufferIndirectCommandNV_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindVertexBufferIndirectCommandNV, size));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkBindVertexBufferIndirectCommandNV_stride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindVertexBufferIndirectCommandNV, stride));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkSetStateFlagsIndirectCommandNV_data_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSetStateFlagsIndirectCommandNV, data));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsStreamNV_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsStreamNV, buffer));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsStreamNV_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsStreamNV, offset));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, sType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pNext));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_tokenType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, tokenType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_stream_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, stream));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, offset));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_vertexBindingUnit_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, vertexBindingUnit));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_vertexDynamicStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, vertexDynamicStride));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_pushconstantPipelineLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pushconstantPipelineLayout));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_pushconstantShaderStageFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pushconstantShaderStageFlags));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_pushconstantOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pushconstantOffset));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_pushconstantSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pushconstantSize));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_indirectStateFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, indirectStateFlags));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_indexTypeCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, indexTypeCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_pIndexTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pIndexTypes));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutTokenNV_pIndexTypeValues_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutTokenNV, pIndexTypeValues));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutCreateInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, flags));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutCreateInfoNV_pipelineBindPoint_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, pipelineBindPoint));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutCreateInfoNV_tokenCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, tokenCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutCreateInfoNV_pTokens_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, pTokens));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutCreateInfoNV_streamCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, streamCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkIndirectCommandsLayoutCreateInfoNV_pStreamStrides_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIndirectCommandsLayoutCreateInfoNV, pStreamStrides));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, pNext));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_pipelineBindPoint_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, pipelineBindPoint));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_pipeline_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, pipeline));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_indirectCommandsLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, indirectCommandsLayout));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_streamCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, streamCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_pStreams_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, pStreams));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_sequencesCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesCount));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_preprocessBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, preprocessBuffer));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_preprocessOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, preprocessOffset));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_preprocessSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, preprocessSize));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_sequencesCountBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesCountBuffer));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_sequencesCountOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesCountOffset));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_sequencesIndexBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesIndexBuffer));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsInfoNV_sequencesIndexOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsInfoNV, sequencesIndexOffset));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsMemoryRequirementsInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, sType));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsMemoryRequirementsInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, pNext));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsMemoryRequirementsInfoNV_pipelineBindPoint_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, pipelineBindPoint));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsMemoryRequirementsInfoNV_pipeline_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, pipeline));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsMemoryRequirementsInfoNV_indirectCommandsLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, indirectCommandsLayout));
}
#endif

#ifdef VK_NV_device_generated_commands
static Napi::Value VkGeneratedCommandsMemoryRequirementsInfoNV_maxSequencesCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeneratedCommandsMemoryRequirementsInfoNV, maxSequencesCount));
}
#endif


static Napi::Value VkPhysicalDeviceFeatures2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures2, sType));
}


static Napi::Value VkPhysicalDeviceFeatures2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures2, pNext));
}


static Napi::Value VkPhysicalDeviceFeatures2_features_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFeatures2, features));
}



static Napi::Value VkPhysicalDeviceProperties2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties2, sType));
}


static Napi::Value VkPhysicalDeviceProperties2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties2, pNext));
}


static Napi::Value VkPhysicalDeviceProperties2_properties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProperties2, properties));
}



static Napi::Value VkFormatProperties2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties2, sType));
}


static Napi::Value VkFormatProperties2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties2, pNext));
}


static Napi::Value VkFormatProperties2_formatProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties2, formatProperties));
}



static Napi::Value VkImageFormatProperties2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatProperties2, sType));
}


static Napi::Value VkImageFormatProperties2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatProperties2, pNext));
}


static Napi::Value VkImageFormatProperties2_imageFormatProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatProperties2, imageFormatProperties));
}



static Napi::Value VkPhysicalDeviceImageFormatInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, sType));
}


static Napi::Value VkPhysicalDeviceImageFormatInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, pNext));
}


static Napi::Value VkPhysicalDeviceImageFormatInfo2_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, format));
}


static Napi::Value VkPhysicalDeviceImageFormatInfo2_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, type));
}


static Napi::Value VkPhysicalDeviceImageFormatInfo2_tiling_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, tiling));
}


static Napi::Value VkPhysicalDeviceImageFormatInfo2_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, usage));
}


static Napi::Value VkPhysicalDeviceImageFormatInfo2_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageFormatInfo2, flags));
}



static Napi::Value VkQueueFamilyProperties2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyProperties2, sType));
}


static Napi::Value VkQueueFamilyProperties2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyProperties2, pNext));
}


static Napi::Value VkQueueFamilyProperties2_queueFamilyProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyProperties2, queueFamilyProperties));
}



static Napi::Value VkPhysicalDeviceMemoryProperties2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties2, sType));
}


static Napi::Value VkPhysicalDeviceMemoryProperties2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties2, pNext));
}


static Napi::Value VkPhysicalDeviceMemoryProperties2_memoryProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryProperties2, memoryProperties));
}



static Napi::Value VkSparseImageFormatProperties2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageFormatProperties2, sType));
}


static Napi::Value VkSparseImageFormatProperties2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageFormatProperties2, pNext));
}


static Napi::Value VkSparseImageFormatProperties2_properties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageFormatProperties2, properties));
}



static Napi::Value VkPhysicalDeviceSparseImageFormatInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, sType));
}


static Napi::Value VkPhysicalDeviceSparseImageFormatInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, pNext));
}


static Napi::Value VkPhysicalDeviceSparseImageFormatInfo2_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, format));
}


static Napi::Value VkPhysicalDeviceSparseImageFormatInfo2_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, type));
}


static Napi::Value VkPhysicalDeviceSparseImageFormatInfo2_samples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, samples));
}


static Napi::Value VkPhysicalDeviceSparseImageFormatInfo2_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, usage));
}


static Napi::Value VkPhysicalDeviceSparseImageFormatInfo2_tiling_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSparseImageFormatInfo2, tiling));
}


#ifdef VK_KHR_push_descriptor
static Napi::Value VkPhysicalDevicePushDescriptorPropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_push_descriptor
static Napi::Value VkPhysicalDevicePushDescriptorPropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_push_descriptor
static Napi::Value VkPhysicalDevicePushDescriptorPropertiesKHR_maxPushDescriptors_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, maxPushDescriptors));
}
#endif


static Napi::Value VkConformanceVersion_major_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkConformanceVersion, major));
}


static Napi::Value VkConformanceVersion_minor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkConformanceVersion, minor));
}


static Napi::Value VkConformanceVersion_subminor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkConformanceVersion, subminor));
}


static Napi::Value VkConformanceVersion_patch_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkConformanceVersion, patch));
}



static Napi::Value VkPhysicalDeviceDriverProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, sType));
}


static Napi::Value VkPhysicalDeviceDriverProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, pNext));
}


static Napi::Value VkPhysicalDeviceDriverProperties_driverID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, driverID));
}


static Napi::Value VkPhysicalDeviceDriverProperties_driverName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, driverName));
}


static Napi::Value VkPhysicalDeviceDriverProperties_driverInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, driverInfo));
}


static Napi::Value VkPhysicalDeviceDriverProperties_conformanceVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDriverProperties, conformanceVersion));
}


#ifdef VK_KHR_incremental_present
static Napi::Value VkPresentRegionsKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentRegionsKHR, sType));
}
#endif

#ifdef VK_KHR_incremental_present
static Napi::Value VkPresentRegionsKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentRegionsKHR, pNext));
}
#endif

#ifdef VK_KHR_incremental_present
static Napi::Value VkPresentRegionsKHR_swapchainCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentRegionsKHR, swapchainCount));
}
#endif

#ifdef VK_KHR_incremental_present
static Napi::Value VkPresentRegionsKHR_pRegions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentRegionsKHR, pRegions));
}
#endif

#ifdef VK_KHR_incremental_present
static Napi::Value VkPresentRegionKHR_rectangleCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentRegionKHR, rectangleCount));
}
#endif

#ifdef VK_KHR_incremental_present
static Napi::Value VkPresentRegionKHR_pRectangles_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentRegionKHR, pRectangles));
}
#endif

#ifdef VK_KHR_incremental_present
static Napi::Value VkRectLayerKHR_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRectLayerKHR, offset));
}
#endif

#ifdef VK_KHR_incremental_present
static Napi::Value VkRectLayerKHR_extent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRectLayerKHR, extent));
}
#endif

#ifdef VK_KHR_incremental_present
static Napi::Value VkRectLayerKHR_layer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRectLayerKHR, layer));
}
#endif


static Napi::Value VkPhysicalDeviceVariablePointersFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeatures, sType));
}


static Napi::Value VkPhysicalDeviceVariablePointersFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceVariablePointersFeatures_variablePointersStorageBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeatures, variablePointersStorageBuffer));
}


static Napi::Value VkPhysicalDeviceVariablePointersFeatures_variablePointers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVariablePointersFeatures, variablePointers));
}





static Napi::Value VkExternalMemoryProperties_externalMemoryFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryProperties, externalMemoryFeatures));
}


static Napi::Value VkExternalMemoryProperties_exportFromImportedHandleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryProperties, exportFromImportedHandleTypes));
}


static Napi::Value VkExternalMemoryProperties_compatibleHandleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryProperties, compatibleHandleTypes));
}



static Napi::Value VkPhysicalDeviceExternalImageFormatInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalImageFormatInfo, sType));
}


static Napi::Value VkPhysicalDeviceExternalImageFormatInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalImageFormatInfo, pNext));
}


static Napi::Value VkPhysicalDeviceExternalImageFormatInfo_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalImageFormatInfo, handleType));
}



static Napi::Value VkExternalImageFormatProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalImageFormatProperties, sType));
}


static Napi::Value VkExternalImageFormatProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalImageFormatProperties, pNext));
}


static Napi::Value VkExternalImageFormatProperties_externalMemoryProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalImageFormatProperties, externalMemoryProperties));
}



static Napi::Value VkPhysicalDeviceExternalBufferInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, sType));
}


static Napi::Value VkPhysicalDeviceExternalBufferInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, pNext));
}


static Napi::Value VkPhysicalDeviceExternalBufferInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, flags));
}


static Napi::Value VkPhysicalDeviceExternalBufferInfo_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, usage));
}


static Napi::Value VkPhysicalDeviceExternalBufferInfo_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalBufferInfo, handleType));
}



static Napi::Value VkExternalBufferProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalBufferProperties, sType));
}


static Napi::Value VkExternalBufferProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalBufferProperties, pNext));
}


static Napi::Value VkExternalBufferProperties_externalMemoryProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalBufferProperties, externalMemoryProperties));
}



static Napi::Value VkPhysicalDeviceIDProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, sType));
}


static Napi::Value VkPhysicalDeviceIDProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, pNext));
}


static Napi::Value VkPhysicalDeviceIDProperties_deviceUUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, deviceUUID));
}


static Napi::Value VkPhysicalDeviceIDProperties_driverUUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, driverUUID));
}


static Napi::Value VkPhysicalDeviceIDProperties_deviceLUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, deviceLUID));
}


static Napi::Value VkPhysicalDeviceIDProperties_deviceNodeMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, deviceNodeMask));
}


static Napi::Value VkPhysicalDeviceIDProperties_deviceLUIDValid_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIDProperties, deviceLUIDValid));
}



static Napi::Value VkExternalMemoryImageCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfo, sType));
}


static Napi::Value VkExternalMemoryImageCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfo, pNext));
}


static Napi::Value VkExternalMemoryImageCreateInfo_handleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryImageCreateInfo, handleTypes));
}



static Napi::Value VkExternalMemoryBufferCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryBufferCreateInfo, sType));
}


static Napi::Value VkExternalMemoryBufferCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryBufferCreateInfo, pNext));
}


static Napi::Value VkExternalMemoryBufferCreateInfo_handleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalMemoryBufferCreateInfo, handleTypes));
}



static Napi::Value VkExportMemoryAllocateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfo, sType));
}


static Napi::Value VkExportMemoryAllocateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfo, pNext));
}


static Napi::Value VkExportMemoryAllocateInfo_handleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryAllocateInfo, handleTypes));
}


#ifdef VK_KHR_external_memory_win32
static Napi::Value VkImportMemoryWin32HandleInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkImportMemoryWin32HandleInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkImportMemoryWin32HandleInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkImportMemoryWin32HandleInfoKHR_handle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, handle));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkImportMemoryWin32HandleInfoKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryWin32HandleInfoKHR, name));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkExportMemoryWin32HandleInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkExportMemoryWin32HandleInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkExportMemoryWin32HandleInfoKHR_pAttributes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, pAttributes));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkExportMemoryWin32HandleInfoKHR_dwAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, dwAccess));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkExportMemoryWin32HandleInfoKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMemoryWin32HandleInfoKHR, name));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkImportMemoryZirconHandleInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryZirconHandleInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkImportMemoryZirconHandleInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryZirconHandleInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkImportMemoryZirconHandleInfoFUCHSIA_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryZirconHandleInfoFUCHSIA, handleType));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkImportMemoryZirconHandleInfoFUCHSIA_handle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryZirconHandleInfoFUCHSIA, handle));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkMemoryZirconHandlePropertiesFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryZirconHandlePropertiesFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkMemoryZirconHandlePropertiesFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryZirconHandlePropertiesFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkMemoryZirconHandlePropertiesFUCHSIA_memoryTypeBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryZirconHandlePropertiesFUCHSIA, memoryTypeBits));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkMemoryGetZirconHandleInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetZirconHandleInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkMemoryGetZirconHandleInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetZirconHandleInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkMemoryGetZirconHandleInfoFUCHSIA_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetZirconHandleInfoFUCHSIA, memory));
}
#endif

#ifdef VK_FUCHSIA_external_memory
static Napi::Value VkMemoryGetZirconHandleInfoFUCHSIA_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetZirconHandleInfoFUCHSIA, handleType));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkMemoryWin32HandlePropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryWin32HandlePropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkMemoryWin32HandlePropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryWin32HandlePropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkMemoryWin32HandlePropertiesKHR_memoryTypeBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryWin32HandlePropertiesKHR, memoryTypeBits));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkMemoryGetWin32HandleInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetWin32HandleInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkMemoryGetWin32HandleInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetWin32HandleInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkMemoryGetWin32HandleInfoKHR_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetWin32HandleInfoKHR, memory));
}
#endif

#ifdef VK_KHR_external_memory_win32
static Napi::Value VkMemoryGetWin32HandleInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetWin32HandleInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkImportMemoryFdInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryFdInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkImportMemoryFdInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryFdInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkImportMemoryFdInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryFdInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkImportMemoryFdInfoKHR_fd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryFdInfoKHR, fd));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkMemoryFdPropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryFdPropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkMemoryFdPropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryFdPropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkMemoryFdPropertiesKHR_memoryTypeBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryFdPropertiesKHR, memoryTypeBits));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkMemoryGetFdInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetFdInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkMemoryGetFdInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetFdInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkMemoryGetFdInfoKHR_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetFdInfoKHR, memory));
}
#endif

#ifdef VK_KHR_external_memory_fd
static Napi::Value VkMemoryGetFdInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetFdInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, sType));
}
#endif

#ifdef VK_KHR_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoKHR_acquireCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, acquireCount));
}
#endif

#ifdef VK_KHR_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoKHR_pAcquireSyncs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pAcquireSyncs));
}
#endif

#ifdef VK_KHR_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoKHR_pAcquireKeys_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pAcquireKeys));
}
#endif

#ifdef VK_KHR_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoKHR_pAcquireTimeouts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pAcquireTimeouts));
}
#endif

#ifdef VK_KHR_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoKHR_releaseCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, releaseCount));
}
#endif

#ifdef VK_KHR_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoKHR_pReleaseSyncs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pReleaseSyncs));
}
#endif

#ifdef VK_KHR_win32_keyed_mutex
static Napi::Value VkWin32KeyedMutexAcquireReleaseInfoKHR_pReleaseKeys_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pReleaseKeys));
}
#endif


static Napi::Value VkPhysicalDeviceExternalSemaphoreInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalSemaphoreInfo, sType));
}


static Napi::Value VkPhysicalDeviceExternalSemaphoreInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalSemaphoreInfo, pNext));
}


static Napi::Value VkPhysicalDeviceExternalSemaphoreInfo_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalSemaphoreInfo, handleType));
}



static Napi::Value VkExternalSemaphoreProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, sType));
}


static Napi::Value VkExternalSemaphoreProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, pNext));
}


static Napi::Value VkExternalSemaphoreProperties_exportFromImportedHandleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, exportFromImportedHandleTypes));
}


static Napi::Value VkExternalSemaphoreProperties_compatibleHandleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, compatibleHandleTypes));
}


static Napi::Value VkExternalSemaphoreProperties_externalSemaphoreFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalSemaphoreProperties, externalSemaphoreFeatures));
}



static Napi::Value VkExportSemaphoreCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportSemaphoreCreateInfo, sType));
}


static Napi::Value VkExportSemaphoreCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportSemaphoreCreateInfo, pNext));
}


static Napi::Value VkExportSemaphoreCreateInfo_handleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportSemaphoreCreateInfo, handleTypes));
}


#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkImportSemaphoreWin32HandleInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkImportSemaphoreWin32HandleInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkImportSemaphoreWin32HandleInfoKHR_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, semaphore));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkImportSemaphoreWin32HandleInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, flags));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkImportSemaphoreWin32HandleInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkImportSemaphoreWin32HandleInfoKHR_handle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, handle));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkImportSemaphoreWin32HandleInfoKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreWin32HandleInfoKHR, name));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkExportSemaphoreWin32HandleInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkExportSemaphoreWin32HandleInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkExportSemaphoreWin32HandleInfoKHR_pAttributes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, pAttributes));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkExportSemaphoreWin32HandleInfoKHR_dwAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, dwAccess));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkExportSemaphoreWin32HandleInfoKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportSemaphoreWin32HandleInfoKHR, name));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkD3D12FenceSubmitInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkD3D12FenceSubmitInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkD3D12FenceSubmitInfoKHR_waitSemaphoreValuesCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, waitSemaphoreValuesCount));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkD3D12FenceSubmitInfoKHR_pWaitSemaphoreValues_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, pWaitSemaphoreValues));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkD3D12FenceSubmitInfoKHR_signalSemaphoreValuesCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, signalSemaphoreValuesCount));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkD3D12FenceSubmitInfoKHR_pSignalSemaphoreValues_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkD3D12FenceSubmitInfoKHR, pSignalSemaphoreValues));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkSemaphoreGetWin32HandleInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetWin32HandleInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkSemaphoreGetWin32HandleInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetWin32HandleInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkSemaphoreGetWin32HandleInfoKHR_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetWin32HandleInfoKHR, semaphore));
}
#endif

#ifdef VK_KHR_external_semaphore_win32
static Napi::Value VkSemaphoreGetWin32HandleInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetWin32HandleInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkImportSemaphoreFdInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkImportSemaphoreFdInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkImportSemaphoreFdInfoKHR_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, semaphore));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkImportSemaphoreFdInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, flags));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkImportSemaphoreFdInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkImportSemaphoreFdInfoKHR_fd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreFdInfoKHR, fd));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkSemaphoreGetFdInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetFdInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkSemaphoreGetFdInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetFdInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkSemaphoreGetFdInfoKHR_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetFdInfoKHR, semaphore));
}
#endif

#ifdef VK_KHR_external_semaphore_fd
static Napi::Value VkSemaphoreGetFdInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetFdInfoKHR, handleType));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkImportSemaphoreZirconHandleInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreZirconHandleInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkImportSemaphoreZirconHandleInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreZirconHandleInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkImportSemaphoreZirconHandleInfoFUCHSIA_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreZirconHandleInfoFUCHSIA, semaphore));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkImportSemaphoreZirconHandleInfoFUCHSIA_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreZirconHandleInfoFUCHSIA, flags));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkImportSemaphoreZirconHandleInfoFUCHSIA_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreZirconHandleInfoFUCHSIA, handleType));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkImportSemaphoreZirconHandleInfoFUCHSIA_zirconHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportSemaphoreZirconHandleInfoFUCHSIA, zirconHandle));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkSemaphoreGetZirconHandleInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetZirconHandleInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkSemaphoreGetZirconHandleInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetZirconHandleInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkSemaphoreGetZirconHandleInfoFUCHSIA_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetZirconHandleInfoFUCHSIA, semaphore));
}
#endif

#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value VkSemaphoreGetZirconHandleInfoFUCHSIA_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreGetZirconHandleInfoFUCHSIA, handleType));
}
#endif


static Napi::Value VkPhysicalDeviceExternalFenceInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalFenceInfo, sType));
}


static Napi::Value VkPhysicalDeviceExternalFenceInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalFenceInfo, pNext));
}


static Napi::Value VkPhysicalDeviceExternalFenceInfo_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalFenceInfo, handleType));
}



static Napi::Value VkExternalFenceProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalFenceProperties, sType));
}


static Napi::Value VkExternalFenceProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalFenceProperties, pNext));
}


static Napi::Value VkExternalFenceProperties_exportFromImportedHandleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalFenceProperties, exportFromImportedHandleTypes));
}


static Napi::Value VkExternalFenceProperties_compatibleHandleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalFenceProperties, compatibleHandleTypes));
}


static Napi::Value VkExternalFenceProperties_externalFenceFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalFenceProperties, externalFenceFeatures));
}



static Napi::Value VkExportFenceCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportFenceCreateInfo, sType));
}


static Napi::Value VkExportFenceCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportFenceCreateInfo, pNext));
}


static Napi::Value VkExportFenceCreateInfo_handleTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportFenceCreateInfo, handleTypes));
}


#ifdef VK_KHR_external_fence_win32
static Napi::Value VkImportFenceWin32HandleInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkImportFenceWin32HandleInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkImportFenceWin32HandleInfoKHR_fence_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, fence));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkImportFenceWin32HandleInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, flags));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkImportFenceWin32HandleInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkImportFenceWin32HandleInfoKHR_handle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, handle));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkImportFenceWin32HandleInfoKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceWin32HandleInfoKHR, name));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkExportFenceWin32HandleInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkExportFenceWin32HandleInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkExportFenceWin32HandleInfoKHR_pAttributes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, pAttributes));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkExportFenceWin32HandleInfoKHR_dwAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, dwAccess));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkExportFenceWin32HandleInfoKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportFenceWin32HandleInfoKHR, name));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkFenceGetWin32HandleInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceGetWin32HandleInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkFenceGetWin32HandleInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceGetWin32HandleInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkFenceGetWin32HandleInfoKHR_fence_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceGetWin32HandleInfoKHR, fence));
}
#endif

#ifdef VK_KHR_external_fence_win32
static Napi::Value VkFenceGetWin32HandleInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceGetWin32HandleInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkImportFenceFdInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkImportFenceFdInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkImportFenceFdInfoKHR_fence_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, fence));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkImportFenceFdInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, flags));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkImportFenceFdInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, handleType));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkImportFenceFdInfoKHR_fd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportFenceFdInfoKHR, fd));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkFenceGetFdInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceGetFdInfoKHR, sType));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkFenceGetFdInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceGetFdInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkFenceGetFdInfoKHR_fence_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceGetFdInfoKHR, fence));
}
#endif

#ifdef VK_KHR_external_fence_fd
static Napi::Value VkFenceGetFdInfoKHR_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFenceGetFdInfoKHR, handleType));
}
#endif


static Napi::Value VkPhysicalDeviceMultiviewFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, sType));
}


static Napi::Value VkPhysicalDeviceMultiviewFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceMultiviewFeatures_multiview_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, multiview));
}


static Napi::Value VkPhysicalDeviceMultiviewFeatures_multiviewGeometryShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, multiviewGeometryShader));
}


static Napi::Value VkPhysicalDeviceMultiviewFeatures_multiviewTessellationShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewFeatures, multiviewTessellationShader));
}



static Napi::Value VkPhysicalDeviceMultiviewProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewProperties, sType));
}


static Napi::Value VkPhysicalDeviceMultiviewProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewProperties, pNext));
}


static Napi::Value VkPhysicalDeviceMultiviewProperties_maxMultiviewViewCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewProperties, maxMultiviewViewCount));
}


static Napi::Value VkPhysicalDeviceMultiviewProperties_maxMultiviewInstanceIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewProperties, maxMultiviewInstanceIndex));
}



static Napi::Value VkRenderPassMultiviewCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, sType));
}


static Napi::Value VkRenderPassMultiviewCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, pNext));
}


static Napi::Value VkRenderPassMultiviewCreateInfo_subpassCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, subpassCount));
}


static Napi::Value VkRenderPassMultiviewCreateInfo_pViewMasks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, pViewMasks));
}


static Napi::Value VkRenderPassMultiviewCreateInfo_dependencyCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, dependencyCount));
}


static Napi::Value VkRenderPassMultiviewCreateInfo_pViewOffsets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, pViewOffsets));
}


static Napi::Value VkRenderPassMultiviewCreateInfo_correlationMaskCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, correlationMaskCount));
}


static Napi::Value VkRenderPassMultiviewCreateInfo_pCorrelationMasks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassMultiviewCreateInfo, pCorrelationMasks));
}


#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, sType));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, pNext));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_minImageCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, minImageCount));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_maxImageCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, maxImageCount));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_currentExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, currentExtent));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_minImageExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, minImageExtent));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_maxImageExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, maxImageExtent));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_maxImageArrayLayers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, maxImageArrayLayers));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_supportedTransforms_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, supportedTransforms));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_currentTransform_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, currentTransform));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_supportedCompositeAlpha_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, supportedCompositeAlpha));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_supportedUsageFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, supportedUsageFlags));
}
#endif

#ifdef VK_EXT_display_surface_counter
static Napi::Value VkSurfaceCapabilities2EXT_supportedSurfaceCounters_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2EXT, supportedSurfaceCounters));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkDisplayPowerInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPowerInfoEXT, sType));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkDisplayPowerInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPowerInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkDisplayPowerInfoEXT_powerState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPowerInfoEXT, powerState));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkDeviceEventInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceEventInfoEXT, sType));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkDeviceEventInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceEventInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkDeviceEventInfoEXT_deviceEvent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceEventInfoEXT, deviceEvent));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkDisplayEventInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayEventInfoEXT, sType));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkDisplayEventInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayEventInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkDisplayEventInfoEXT_displayEvent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayEventInfoEXT, displayEvent));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkSwapchainCounterCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCounterCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkSwapchainCounterCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCounterCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_display_control
static Napi::Value VkSwapchainCounterCreateInfoEXT_surfaceCounters_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainCounterCreateInfoEXT, surfaceCounters));
}
#endif


static Napi::Value VkPhysicalDeviceGroupProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, sType));
}


static Napi::Value VkPhysicalDeviceGroupProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, pNext));
}


static Napi::Value VkPhysicalDeviceGroupProperties_physicalDeviceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, physicalDeviceCount));
}


static Napi::Value VkPhysicalDeviceGroupProperties_physicalDevices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, physicalDevices));
}


static Napi::Value VkPhysicalDeviceGroupProperties_subsetAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGroupProperties, subsetAllocation));
}



static Napi::Value VkMemoryAllocateFlagsInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfo, sType));
}


static Napi::Value VkMemoryAllocateFlagsInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfo, pNext));
}


static Napi::Value VkMemoryAllocateFlagsInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfo, flags));
}


static Napi::Value VkMemoryAllocateFlagsInfo_deviceMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryAllocateFlagsInfo, deviceMask));
}



static Napi::Value VkBindBufferMemoryInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, sType));
}


static Napi::Value VkBindBufferMemoryInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, pNext));
}


static Napi::Value VkBindBufferMemoryInfo_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, buffer));
}


static Napi::Value VkBindBufferMemoryInfo_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, memory));
}


static Napi::Value VkBindBufferMemoryInfo_memoryOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindBufferMemoryInfo, memoryOffset));
}



static Napi::Value VkBindBufferMemoryDeviceGroupInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfo, sType));
}


static Napi::Value VkBindBufferMemoryDeviceGroupInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfo, pNext));
}


static Napi::Value VkBindBufferMemoryDeviceGroupInfo_deviceIndexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfo, deviceIndexCount));
}


static Napi::Value VkBindBufferMemoryDeviceGroupInfo_pDeviceIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindBufferMemoryDeviceGroupInfo, pDeviceIndices));
}



static Napi::Value VkBindImageMemoryInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, sType));
}


static Napi::Value VkBindImageMemoryInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, pNext));
}


static Napi::Value VkBindImageMemoryInfo_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, image));
}


static Napi::Value VkBindImageMemoryInfo_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, memory));
}


static Napi::Value VkBindImageMemoryInfo_memoryOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryInfo, memoryOffset));
}



static Napi::Value VkBindImageMemoryDeviceGroupInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, sType));
}


static Napi::Value VkBindImageMemoryDeviceGroupInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, pNext));
}


static Napi::Value VkBindImageMemoryDeviceGroupInfo_deviceIndexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, deviceIndexCount));
}


static Napi::Value VkBindImageMemoryDeviceGroupInfo_pDeviceIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, pDeviceIndices));
}


static Napi::Value VkBindImageMemoryDeviceGroupInfo_splitInstanceBindRegionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, splitInstanceBindRegionCount));
}


static Napi::Value VkBindImageMemoryDeviceGroupInfo_pSplitInstanceBindRegions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemoryDeviceGroupInfo, pSplitInstanceBindRegions));
}



static Napi::Value VkDeviceGroupRenderPassBeginInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, sType));
}


static Napi::Value VkDeviceGroupRenderPassBeginInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, pNext));
}


static Napi::Value VkDeviceGroupRenderPassBeginInfo_deviceMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, deviceMask));
}


static Napi::Value VkDeviceGroupRenderPassBeginInfo_deviceRenderAreaCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, deviceRenderAreaCount));
}


static Napi::Value VkDeviceGroupRenderPassBeginInfo_pDeviceRenderAreas_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupRenderPassBeginInfo, pDeviceRenderAreas));
}



static Napi::Value VkDeviceGroupCommandBufferBeginInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupCommandBufferBeginInfo, sType));
}


static Napi::Value VkDeviceGroupCommandBufferBeginInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupCommandBufferBeginInfo, pNext));
}


static Napi::Value VkDeviceGroupCommandBufferBeginInfo_deviceMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupCommandBufferBeginInfo, deviceMask));
}



static Napi::Value VkDeviceGroupSubmitInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, sType));
}


static Napi::Value VkDeviceGroupSubmitInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, pNext));
}


static Napi::Value VkDeviceGroupSubmitInfo_waitSemaphoreCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, waitSemaphoreCount));
}


static Napi::Value VkDeviceGroupSubmitInfo_pWaitSemaphoreDeviceIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, pWaitSemaphoreDeviceIndices));
}


static Napi::Value VkDeviceGroupSubmitInfo_commandBufferCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, commandBufferCount));
}


static Napi::Value VkDeviceGroupSubmitInfo_pCommandBufferDeviceMasks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, pCommandBufferDeviceMasks));
}


static Napi::Value VkDeviceGroupSubmitInfo_signalSemaphoreCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, signalSemaphoreCount));
}


static Napi::Value VkDeviceGroupSubmitInfo_pSignalSemaphoreDeviceIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSubmitInfo, pSignalSemaphoreDeviceIndices));
}



static Napi::Value VkDeviceGroupBindSparseInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfo, sType));
}


static Napi::Value VkDeviceGroupBindSparseInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfo, pNext));
}


static Napi::Value VkDeviceGroupBindSparseInfo_resourceDeviceIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfo, resourceDeviceIndex));
}


static Napi::Value VkDeviceGroupBindSparseInfo_memoryDeviceIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupBindSparseInfo, memoryDeviceIndex));
}


#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupPresentCapabilitiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupPresentCapabilitiesKHR, sType));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupPresentCapabilitiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupPresentCapabilitiesKHR, pNext));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupPresentCapabilitiesKHR_presentMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupPresentCapabilitiesKHR, presentMask));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupPresentCapabilitiesKHR_modes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupPresentCapabilitiesKHR, modes));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkImageSwapchainCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSwapchainCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkImageSwapchainCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSwapchainCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkImageSwapchainCreateInfoKHR_swapchain_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSwapchainCreateInfoKHR, swapchain));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkBindImageMemorySwapchainInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemorySwapchainInfoKHR, sType));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkBindImageMemorySwapchainInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemorySwapchainInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkBindImageMemorySwapchainInfoKHR_swapchain_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemorySwapchainInfoKHR, swapchain));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkBindImageMemorySwapchainInfoKHR_imageIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImageMemorySwapchainInfoKHR, imageIndex));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkAcquireNextImageInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, sType));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkAcquireNextImageInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkAcquireNextImageInfoKHR_swapchain_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, swapchain));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkAcquireNextImageInfoKHR_timeout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, timeout));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkAcquireNextImageInfoKHR_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, semaphore));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkAcquireNextImageInfoKHR_fence_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, fence));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkAcquireNextImageInfoKHR_deviceMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireNextImageInfoKHR, deviceMask));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupPresentInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, sType));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupPresentInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupPresentInfoKHR_swapchainCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, swapchainCount));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupPresentInfoKHR_pDeviceMasks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, pDeviceMasks));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupPresentInfoKHR_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupPresentInfoKHR, mode));
}
#endif


static Napi::Value VkDeviceGroupDeviceCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfo, sType));
}


static Napi::Value VkDeviceGroupDeviceCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfo, pNext));
}


static Napi::Value VkDeviceGroupDeviceCreateInfo_physicalDeviceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfo, physicalDeviceCount));
}


static Napi::Value VkDeviceGroupDeviceCreateInfo_pPhysicalDevices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupDeviceCreateInfo, pPhysicalDevices));
}


#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupSwapchainCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSwapchainCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupSwapchainCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSwapchainCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_device_group
static Napi::Value VkDeviceGroupSwapchainCreateInfoKHR_modes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceGroupSwapchainCreateInfoKHR, modes));
}
#endif


static Napi::Value VkDescriptorUpdateTemplateEntry_dstBinding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, dstBinding));
}


static Napi::Value VkDescriptorUpdateTemplateEntry_dstArrayElement_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, dstArrayElement));
}


static Napi::Value VkDescriptorUpdateTemplateEntry_descriptorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, descriptorCount));
}


static Napi::Value VkDescriptorUpdateTemplateEntry_descriptorType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, descriptorType));
}


static Napi::Value VkDescriptorUpdateTemplateEntry_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, offset));
}


static Napi::Value VkDescriptorUpdateTemplateEntry_stride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateEntry, stride));
}



static Napi::Value VkDescriptorUpdateTemplateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, sType));
}


static Napi::Value VkDescriptorUpdateTemplateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, pNext));
}


static Napi::Value VkDescriptorUpdateTemplateCreateInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, flags));
}


static Napi::Value VkDescriptorUpdateTemplateCreateInfo_descriptorUpdateEntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, descriptorUpdateEntryCount));
}


static Napi::Value VkDescriptorUpdateTemplateCreateInfo_pDescriptorUpdateEntries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, pDescriptorUpdateEntries));
}


static Napi::Value VkDescriptorUpdateTemplateCreateInfo_templateType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, templateType));
}


static Napi::Value VkDescriptorUpdateTemplateCreateInfo_descriptorSetLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, descriptorSetLayout));
}


static Napi::Value VkDescriptorUpdateTemplateCreateInfo_pipelineBindPoint_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, pipelineBindPoint));
}


static Napi::Value VkDescriptorUpdateTemplateCreateInfo_pipelineLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, pipelineLayout));
}


static Napi::Value VkDescriptorUpdateTemplateCreateInfo_set_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorUpdateTemplateCreateInfo, set));
}


#ifdef VK_EXT_hdr_metadata
static Napi::Value VkXYColorEXT_x_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXYColorEXT, x));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkXYColorEXT_y_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkXYColorEXT, y));
}
#endif

#ifdef VK_KHR_present_id
static Napi::Value VkPhysicalDevicePresentIdFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentIdFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_present_id
static Napi::Value VkPhysicalDevicePresentIdFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentIdFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_present_id
static Napi::Value VkPhysicalDevicePresentIdFeaturesKHR_presentId_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentIdFeaturesKHR, presentId));
}
#endif

#ifdef VK_KHR_present_id
static Napi::Value VkPresentIdKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentIdKHR, sType));
}
#endif

#ifdef VK_KHR_present_id
static Napi::Value VkPresentIdKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentIdKHR, pNext));
}
#endif

#ifdef VK_KHR_present_id
static Napi::Value VkPresentIdKHR_swapchainCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentIdKHR, swapchainCount));
}
#endif

#ifdef VK_KHR_present_id
static Napi::Value VkPresentIdKHR_pPresentIds_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentIdKHR, pPresentIds));
}
#endif

#ifdef VK_KHR_present_wait
static Napi::Value VkPhysicalDevicePresentWaitFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentWaitFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_present_wait
static Napi::Value VkPhysicalDevicePresentWaitFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentWaitFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_present_wait
static Napi::Value VkPhysicalDevicePresentWaitFeaturesKHR_presentWait_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentWaitFeaturesKHR, presentWait));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, sType));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, pNext));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_displayPrimaryRed_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, displayPrimaryRed));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_displayPrimaryGreen_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, displayPrimaryGreen));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_displayPrimaryBlue_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, displayPrimaryBlue));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_whitePoint_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, whitePoint));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_maxLuminance_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, maxLuminance));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_minLuminance_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, minLuminance));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_maxContentLightLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, maxContentLightLevel));
}
#endif

#ifdef VK_EXT_hdr_metadata
static Napi::Value VkHdrMetadataEXT_maxFrameAverageLightLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHdrMetadataEXT, maxFrameAverageLightLevel));
}
#endif

#ifdef VK_AMD_display_native_hdr
static Napi::Value VkDisplayNativeHdrSurfaceCapabilitiesAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayNativeHdrSurfaceCapabilitiesAMD, sType));
}
#endif

#ifdef VK_AMD_display_native_hdr
static Napi::Value VkDisplayNativeHdrSurfaceCapabilitiesAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayNativeHdrSurfaceCapabilitiesAMD, pNext));
}
#endif

#ifdef VK_AMD_display_native_hdr
static Napi::Value VkDisplayNativeHdrSurfaceCapabilitiesAMD_localDimmingSupport_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayNativeHdrSurfaceCapabilitiesAMD, localDimmingSupport));
}
#endif

#ifdef VK_AMD_display_native_hdr
static Napi::Value VkSwapchainDisplayNativeHdrCreateInfoAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainDisplayNativeHdrCreateInfoAMD, sType));
}
#endif

#ifdef VK_AMD_display_native_hdr
static Napi::Value VkSwapchainDisplayNativeHdrCreateInfoAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainDisplayNativeHdrCreateInfoAMD, pNext));
}
#endif

#ifdef VK_AMD_display_native_hdr
static Napi::Value VkSwapchainDisplayNativeHdrCreateInfoAMD_localDimmingEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainDisplayNativeHdrCreateInfoAMD, localDimmingEnable));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkRefreshCycleDurationGOOGLE_refreshDuration_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRefreshCycleDurationGOOGLE, refreshDuration));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPastPresentationTimingGOOGLE_presentID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, presentID));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPastPresentationTimingGOOGLE_desiredPresentTime_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, desiredPresentTime));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPastPresentationTimingGOOGLE_actualPresentTime_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, actualPresentTime));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPastPresentationTimingGOOGLE_earliestPresentTime_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, earliestPresentTime));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPastPresentationTimingGOOGLE_presentMargin_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPastPresentationTimingGOOGLE, presentMargin));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPresentTimesInfoGOOGLE_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentTimesInfoGOOGLE, sType));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPresentTimesInfoGOOGLE_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentTimesInfoGOOGLE, pNext));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPresentTimesInfoGOOGLE_swapchainCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentTimesInfoGOOGLE, swapchainCount));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPresentTimesInfoGOOGLE_pTimes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentTimesInfoGOOGLE, pTimes));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPresentTimeGOOGLE_presentID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentTimeGOOGLE, presentID));
}
#endif

#ifdef VK_GOOGLE_display_timing
static Napi::Value VkPresentTimeGOOGLE_desiredPresentTime_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentTimeGOOGLE, desiredPresentTime));
}
#endif

#ifdef VK_MVK_ios_surface
static Napi::Value VkIOSSurfaceCreateInfoMVK_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIOSSurfaceCreateInfoMVK, sType));
}
#endif

#ifdef VK_MVK_ios_surface
static Napi::Value VkIOSSurfaceCreateInfoMVK_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIOSSurfaceCreateInfoMVK, pNext));
}
#endif

#ifdef VK_MVK_ios_surface
static Napi::Value VkIOSSurfaceCreateInfoMVK_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIOSSurfaceCreateInfoMVK, flags));
}
#endif

#ifdef VK_MVK_ios_surface
static Napi::Value VkIOSSurfaceCreateInfoMVK_pView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkIOSSurfaceCreateInfoMVK, pView));
}
#endif

#ifdef VK_MVK_macos_surface
static Napi::Value VkMacOSSurfaceCreateInfoMVK_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMacOSSurfaceCreateInfoMVK, sType));
}
#endif

#ifdef VK_MVK_macos_surface
static Napi::Value VkMacOSSurfaceCreateInfoMVK_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMacOSSurfaceCreateInfoMVK, pNext));
}
#endif

#ifdef VK_MVK_macos_surface
static Napi::Value VkMacOSSurfaceCreateInfoMVK_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMacOSSurfaceCreateInfoMVK, flags));
}
#endif

#ifdef VK_MVK_macos_surface
static Napi::Value VkMacOSSurfaceCreateInfoMVK_pView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMacOSSurfaceCreateInfoMVK, pView));
}
#endif

#ifdef VK_EXT_metal_surface
static Napi::Value VkMetalSurfaceCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMetalSurfaceCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_surface
static Napi::Value VkMetalSurfaceCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMetalSurfaceCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_surface
static Napi::Value VkMetalSurfaceCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMetalSurfaceCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_metal_surface
static Napi::Value VkMetalSurfaceCreateInfoEXT_pLayer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMetalSurfaceCreateInfoEXT, pLayer));
}
#endif

#ifdef VK_NV_clip_space_w_scaling
static Napi::Value VkViewportWScalingNV_xcoeff_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewportWScalingNV, xcoeff));
}
#endif

#ifdef VK_NV_clip_space_w_scaling
static Napi::Value VkViewportWScalingNV_ycoeff_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewportWScalingNV, ycoeff));
}
#endif

#ifdef VK_NV_clip_space_w_scaling
static Napi::Value VkPipelineViewportWScalingStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_clip_space_w_scaling
static Napi::Value VkPipelineViewportWScalingStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_clip_space_w_scaling
static Napi::Value VkPipelineViewportWScalingStateCreateInfoNV_viewportWScalingEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, viewportWScalingEnable));
}
#endif

#ifdef VK_NV_clip_space_w_scaling
static Napi::Value VkPipelineViewportWScalingStateCreateInfoNV_viewportCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, viewportCount));
}
#endif

#ifdef VK_NV_clip_space_w_scaling
static Napi::Value VkPipelineViewportWScalingStateCreateInfoNV_pViewportWScalings_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportWScalingStateCreateInfoNV, pViewportWScalings));
}
#endif

#ifdef VK_NV_viewport_swizzle
static Napi::Value VkViewportSwizzleNV_x_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewportSwizzleNV, x));
}
#endif

#ifdef VK_NV_viewport_swizzle
static Napi::Value VkViewportSwizzleNV_y_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewportSwizzleNV, y));
}
#endif

#ifdef VK_NV_viewport_swizzle
static Napi::Value VkViewportSwizzleNV_z_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewportSwizzleNV, z));
}
#endif

#ifdef VK_NV_viewport_swizzle
static Napi::Value VkViewportSwizzleNV_w_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkViewportSwizzleNV, w));
}
#endif

#ifdef VK_NV_viewport_swizzle
static Napi::Value VkPipelineViewportSwizzleStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_viewport_swizzle
static Napi::Value VkPipelineViewportSwizzleStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_viewport_swizzle
static Napi::Value VkPipelineViewportSwizzleStateCreateInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, flags));
}
#endif

#ifdef VK_NV_viewport_swizzle
static Napi::Value VkPipelineViewportSwizzleStateCreateInfoNV_viewportCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, viewportCount));
}
#endif

#ifdef VK_NV_viewport_swizzle
static Napi::Value VkPipelineViewportSwizzleStateCreateInfoNV_pViewportSwizzles_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, pViewportSwizzles));
}
#endif

#ifdef VK_EXT_discard_rectangles
static Napi::Value VkPhysicalDeviceDiscardRectanglePropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDiscardRectanglePropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_discard_rectangles
static Napi::Value VkPhysicalDeviceDiscardRectanglePropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDiscardRectanglePropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_discard_rectangles
static Napi::Value VkPhysicalDeviceDiscardRectanglePropertiesEXT_maxDiscardRectangles_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDiscardRectanglePropertiesEXT, maxDiscardRectangles));
}
#endif

#ifdef VK_EXT_discard_rectangles
static Napi::Value VkPipelineDiscardRectangleStateCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_discard_rectangles
static Napi::Value VkPipelineDiscardRectangleStateCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_discard_rectangles
static Napi::Value VkPipelineDiscardRectangleStateCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_discard_rectangles
static Napi::Value VkPipelineDiscardRectangleStateCreateInfoEXT_discardRectangleMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, discardRectangleMode));
}
#endif

#ifdef VK_EXT_discard_rectangles
static Napi::Value VkPipelineDiscardRectangleStateCreateInfoEXT_discardRectangleCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, discardRectangleCount));
}
#endif

#ifdef VK_EXT_discard_rectangles
static Napi::Value VkPipelineDiscardRectangleStateCreateInfoEXT_pDiscardRectangles_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, pDiscardRectangles));
}
#endif

#ifdef VK_NVX_multiview_per_view_attributes
static Napi::Value VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, sType));
}
#endif

#ifdef VK_NVX_multiview_per_view_attributes
static Napi::Value VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, pNext));
}
#endif

#ifdef VK_NVX_multiview_per_view_attributes
static Napi::Value VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_perViewPositionAllComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, perViewPositionAllComponents));
}
#endif


static Napi::Value VkInputAttachmentAspectReference_subpass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInputAttachmentAspectReference, subpass));
}


static Napi::Value VkInputAttachmentAspectReference_inputAttachmentIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInputAttachmentAspectReference, inputAttachmentIndex));
}


static Napi::Value VkInputAttachmentAspectReference_aspectMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInputAttachmentAspectReference, aspectMask));
}



static Napi::Value VkRenderPassInputAttachmentAspectCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfo, sType));
}


static Napi::Value VkRenderPassInputAttachmentAspectCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfo, pNext));
}


static Napi::Value VkRenderPassInputAttachmentAspectCreateInfo_aspectReferenceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfo, aspectReferenceCount));
}


static Napi::Value VkRenderPassInputAttachmentAspectCreateInfo_pAspectReferences_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassInputAttachmentAspectCreateInfo, pAspectReferences));
}


#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value VkPhysicalDeviceSurfaceInfo2KHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSurfaceInfo2KHR, sType));
}
#endif

#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value VkPhysicalDeviceSurfaceInfo2KHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSurfaceInfo2KHR, pNext));
}
#endif

#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value VkPhysicalDeviceSurfaceInfo2KHR_surface_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSurfaceInfo2KHR, surface));
}
#endif

#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value VkSurfaceCapabilities2KHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2KHR, sType));
}
#endif

#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value VkSurfaceCapabilities2KHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2KHR, pNext));
}
#endif

#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value VkSurfaceCapabilities2KHR_surfaceCapabilities_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilities2KHR, surfaceCapabilities));
}
#endif

#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value VkSurfaceFormat2KHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFormat2KHR, sType));
}
#endif

#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value VkSurfaceFormat2KHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFormat2KHR, pNext));
}
#endif

#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value VkSurfaceFormat2KHR_surfaceFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFormat2KHR, surfaceFormat));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayProperties2KHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayProperties2KHR, sType));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayProperties2KHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayProperties2KHR, pNext));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayProperties2KHR_displayProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayProperties2KHR, displayProperties));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneProperties2KHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneProperties2KHR, sType));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneProperties2KHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneProperties2KHR, pNext));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneProperties2KHR_displayPlaneProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneProperties2KHR, displayPlaneProperties));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayModeProperties2KHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModeProperties2KHR, sType));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayModeProperties2KHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModeProperties2KHR, pNext));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayModeProperties2KHR_displayModeProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayModeProperties2KHR, displayModeProperties));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneInfo2KHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneInfo2KHR, sType));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneInfo2KHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneInfo2KHR, pNext));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneInfo2KHR_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneInfo2KHR, mode));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneInfo2KHR_planeIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneInfo2KHR, planeIndex));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneCapabilities2KHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilities2KHR, sType));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneCapabilities2KHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilities2KHR, pNext));
}
#endif

#ifdef VK_KHR_get_display_properties2
static Napi::Value VkDisplayPlaneCapabilities2KHR_capabilities_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDisplayPlaneCapabilities2KHR, capabilities));
}
#endif

#ifdef VK_KHR_shared_presentable_image
static Napi::Value VkSharedPresentSurfaceCapabilitiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSharedPresentSurfaceCapabilitiesKHR, sType));
}
#endif

#ifdef VK_KHR_shared_presentable_image
static Napi::Value VkSharedPresentSurfaceCapabilitiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSharedPresentSurfaceCapabilitiesKHR, pNext));
}
#endif

#ifdef VK_KHR_shared_presentable_image
static Napi::Value VkSharedPresentSurfaceCapabilitiesKHR_sharedPresentSupportedUsageFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSharedPresentSurfaceCapabilitiesKHR, sharedPresentSupportedUsageFlags));
}
#endif


static Napi::Value VkPhysicalDevice16BitStorageFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, sType));
}


static Napi::Value VkPhysicalDevice16BitStorageFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, pNext));
}


static Napi::Value VkPhysicalDevice16BitStorageFeatures_storageBuffer16BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, storageBuffer16BitAccess));
}


static Napi::Value VkPhysicalDevice16BitStorageFeatures_uniformAndStorageBuffer16BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, uniformAndStorageBuffer16BitAccess));
}


static Napi::Value VkPhysicalDevice16BitStorageFeatures_storagePushConstant16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, storagePushConstant16));
}


static Napi::Value VkPhysicalDevice16BitStorageFeatures_storageInputOutput16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice16BitStorageFeatures, storageInputOutput16));
}



static Napi::Value VkPhysicalDeviceSubgroupProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, sType));
}


static Napi::Value VkPhysicalDeviceSubgroupProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, pNext));
}


static Napi::Value VkPhysicalDeviceSubgroupProperties_subgroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, subgroupSize));
}


static Napi::Value VkPhysicalDeviceSubgroupProperties_supportedStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, supportedStages));
}


static Napi::Value VkPhysicalDeviceSubgroupProperties_supportedOperations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, supportedOperations));
}


static Napi::Value VkPhysicalDeviceSubgroupProperties_quadOperationsInAllStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupProperties, quadOperationsInAllStages));
}


static Napi::Value VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, sType));
}


static Napi::Value VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_shaderSubgroupExtendedTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, shaderSubgroupExtendedTypes));
}



static Napi::Value VkBufferMemoryRequirementsInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryRequirementsInfo2, sType));
}


static Napi::Value VkBufferMemoryRequirementsInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryRequirementsInfo2, pNext));
}


static Napi::Value VkBufferMemoryRequirementsInfo2_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryRequirementsInfo2, buffer));
}



static Napi::Value VkDeviceBufferMemoryRequirements_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceBufferMemoryRequirements, sType));
}


static Napi::Value VkDeviceBufferMemoryRequirements_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceBufferMemoryRequirements, pNext));
}


static Napi::Value VkDeviceBufferMemoryRequirements_pCreateInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceBufferMemoryRequirements, pCreateInfo));
}



static Napi::Value VkImageMemoryRequirementsInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryRequirementsInfo2, sType));
}


static Napi::Value VkImageMemoryRequirementsInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryRequirementsInfo2, pNext));
}


static Napi::Value VkImageMemoryRequirementsInfo2_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryRequirementsInfo2, image));
}



static Napi::Value VkImageSparseMemoryRequirementsInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSparseMemoryRequirementsInfo2, sType));
}


static Napi::Value VkImageSparseMemoryRequirementsInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSparseMemoryRequirementsInfo2, pNext));
}


static Napi::Value VkImageSparseMemoryRequirementsInfo2_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSparseMemoryRequirementsInfo2, image));
}



static Napi::Value VkDeviceImageMemoryRequirements_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceImageMemoryRequirements, sType));
}


static Napi::Value VkDeviceImageMemoryRequirements_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceImageMemoryRequirements, pNext));
}


static Napi::Value VkDeviceImageMemoryRequirements_pCreateInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceImageMemoryRequirements, pCreateInfo));
}


static Napi::Value VkDeviceImageMemoryRequirements_planeAspect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceImageMemoryRequirements, planeAspect));
}



static Napi::Value VkMemoryRequirements2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryRequirements2, sType));
}


static Napi::Value VkMemoryRequirements2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryRequirements2, pNext));
}


static Napi::Value VkMemoryRequirements2_memoryRequirements_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryRequirements2, memoryRequirements));
}



static Napi::Value VkSparseImageMemoryRequirements2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements2, sType));
}


static Napi::Value VkSparseImageMemoryRequirements2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements2, pNext));
}


static Napi::Value VkSparseImageMemoryRequirements2_memoryRequirements_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSparseImageMemoryRequirements2, memoryRequirements));
}



static Napi::Value VkPhysicalDevicePointClippingProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePointClippingProperties, sType));
}


static Napi::Value VkPhysicalDevicePointClippingProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePointClippingProperties, pNext));
}


static Napi::Value VkPhysicalDevicePointClippingProperties_pointClippingBehavior_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePointClippingProperties, pointClippingBehavior));
}



static Napi::Value VkMemoryDedicatedRequirements_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirements, sType));
}


static Napi::Value VkMemoryDedicatedRequirements_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirements, pNext));
}


static Napi::Value VkMemoryDedicatedRequirements_prefersDedicatedAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirements, prefersDedicatedAllocation));
}


static Napi::Value VkMemoryDedicatedRequirements_requiresDedicatedAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryDedicatedRequirements, requiresDedicatedAllocation));
}



static Napi::Value VkMemoryDedicatedAllocateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfo, sType));
}


static Napi::Value VkMemoryDedicatedAllocateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfo, pNext));
}


static Napi::Value VkMemoryDedicatedAllocateInfo_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfo, image));
}


static Napi::Value VkMemoryDedicatedAllocateInfo_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryDedicatedAllocateInfo, buffer));
}



static Napi::Value VkImageViewUsageCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewUsageCreateInfo, sType));
}


static Napi::Value VkImageViewUsageCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewUsageCreateInfo, pNext));
}


static Napi::Value VkImageViewUsageCreateInfo_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewUsageCreateInfo, usage));
}



static Napi::Value VkPipelineTessellationDomainOriginStateCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, sType));
}


static Napi::Value VkPipelineTessellationDomainOriginStateCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, pNext));
}


static Napi::Value VkPipelineTessellationDomainOriginStateCreateInfo_domainOrigin_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, domainOrigin));
}



static Napi::Value VkSamplerYcbcrConversionInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionInfo, sType));
}


static Napi::Value VkSamplerYcbcrConversionInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionInfo, pNext));
}


static Napi::Value VkSamplerYcbcrConversionInfo_conversion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionInfo, conversion));
}



static Napi::Value VkSamplerYcbcrConversionCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, sType));
}


static Napi::Value VkSamplerYcbcrConversionCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, pNext));
}


static Napi::Value VkSamplerYcbcrConversionCreateInfo_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, format));
}


static Napi::Value VkSamplerYcbcrConversionCreateInfo_ycbcrModel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, ycbcrModel));
}


static Napi::Value VkSamplerYcbcrConversionCreateInfo_ycbcrRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, ycbcrRange));
}


static Napi::Value VkSamplerYcbcrConversionCreateInfo_components_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, components));
}


static Napi::Value VkSamplerYcbcrConversionCreateInfo_xChromaOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, xChromaOffset));
}


static Napi::Value VkSamplerYcbcrConversionCreateInfo_yChromaOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, yChromaOffset));
}


static Napi::Value VkSamplerYcbcrConversionCreateInfo_chromaFilter_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, chromaFilter));
}


static Napi::Value VkSamplerYcbcrConversionCreateInfo_forceExplicitReconstruction_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionCreateInfo, forceExplicitReconstruction));
}



static Napi::Value VkBindImagePlaneMemoryInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImagePlaneMemoryInfo, sType));
}


static Napi::Value VkBindImagePlaneMemoryInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImagePlaneMemoryInfo, pNext));
}


static Napi::Value VkBindImagePlaneMemoryInfo_planeAspect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindImagePlaneMemoryInfo, planeAspect));
}



static Napi::Value VkImagePlaneMemoryRequirementsInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImagePlaneMemoryRequirementsInfo, sType));
}


static Napi::Value VkImagePlaneMemoryRequirementsInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImagePlaneMemoryRequirementsInfo, pNext));
}


static Napi::Value VkImagePlaneMemoryRequirementsInfo_planeAspect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImagePlaneMemoryRequirementsInfo, planeAspect));
}



static Napi::Value VkPhysicalDeviceSamplerYcbcrConversionFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, sType));
}


static Napi::Value VkPhysicalDeviceSamplerYcbcrConversionFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceSamplerYcbcrConversionFeatures_samplerYcbcrConversion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, samplerYcbcrConversion));
}



static Napi::Value VkSamplerYcbcrConversionImageFormatProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionImageFormatProperties, sType));
}


static Napi::Value VkSamplerYcbcrConversionImageFormatProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionImageFormatProperties, pNext));
}


static Napi::Value VkSamplerYcbcrConversionImageFormatProperties_combinedImageSamplerDescriptorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerYcbcrConversionImageFormatProperties, combinedImageSamplerDescriptorCount));
}


#ifdef VK_AMD_texture_gather_bias_lod
static Napi::Value VkTextureLODGatherFormatPropertiesAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTextureLODGatherFormatPropertiesAMD, sType));
}
#endif

#ifdef VK_AMD_texture_gather_bias_lod
static Napi::Value VkTextureLODGatherFormatPropertiesAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTextureLODGatherFormatPropertiesAMD, pNext));
}
#endif

#ifdef VK_AMD_texture_gather_bias_lod
static Napi::Value VkTextureLODGatherFormatPropertiesAMD_supportsTextureGatherLODBiasAMD_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTextureLODGatherFormatPropertiesAMD, supportsTextureGatherLODBiasAMD));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkConditionalRenderingBeginInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, sType));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkConditionalRenderingBeginInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkConditionalRenderingBeginInfoEXT_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, buffer));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkConditionalRenderingBeginInfoEXT_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, offset));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkConditionalRenderingBeginInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkConditionalRenderingBeginInfoEXT, flags));
}
#endif


static Napi::Value VkProtectedSubmitInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkProtectedSubmitInfo, sType));
}


static Napi::Value VkProtectedSubmitInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkProtectedSubmitInfo, pNext));
}


static Napi::Value VkProtectedSubmitInfo_protectedSubmit_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkProtectedSubmitInfo, protectedSubmit));
}


static Napi::Value VkPhysicalDeviceProtectedMemoryFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryFeatures, sType));
}


static Napi::Value VkPhysicalDeviceProtectedMemoryFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceProtectedMemoryFeatures_protectedMemory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryFeatures, protectedMemory));
}


static Napi::Value VkPhysicalDeviceProtectedMemoryProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryProperties, sType));
}


static Napi::Value VkPhysicalDeviceProtectedMemoryProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryProperties, pNext));
}


static Napi::Value VkPhysicalDeviceProtectedMemoryProperties_protectedNoFault_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProtectedMemoryProperties, protectedNoFault));
}


static Napi::Value VkDeviceQueueInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, sType));
}


static Napi::Value VkDeviceQueueInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, pNext));
}


static Napi::Value VkDeviceQueueInfo2_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, flags));
}


static Napi::Value VkDeviceQueueInfo2_queueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, queueFamilyIndex));
}


static Napi::Value VkDeviceQueueInfo2_queueIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueInfo2, queueIndex));
}

#ifdef VK_NV_fragment_coverage_to_color
static Napi::Value VkPipelineCoverageToColorStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_fragment_coverage_to_color
static Napi::Value VkPipelineCoverageToColorStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_fragment_coverage_to_color
static Napi::Value VkPipelineCoverageToColorStateCreateInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, flags));
}
#endif

#ifdef VK_NV_fragment_coverage_to_color
static Napi::Value VkPipelineCoverageToColorStateCreateInfoNV_coverageToColorEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, coverageToColorEnable));
}
#endif

#ifdef VK_NV_fragment_coverage_to_color
static Napi::Value VkPipelineCoverageToColorStateCreateInfoNV_coverageToColorLocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageToColorStateCreateInfoNV, coverageToColorLocation));
}
#endif


static Napi::Value VkPhysicalDeviceSamplerFilterMinmaxProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, sType));
}


static Napi::Value VkPhysicalDeviceSamplerFilterMinmaxProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, pNext));
}


static Napi::Value VkPhysicalDeviceSamplerFilterMinmaxProperties_filterMinmaxSingleComponentFormats_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, filterMinmaxSingleComponentFormats));
}


static Napi::Value VkPhysicalDeviceSamplerFilterMinmaxProperties_filterMinmaxImageComponentMapping_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, filterMinmaxImageComponentMapping));
}


#ifdef VK_EXT_sample_locations
static Napi::Value VkSampleLocationEXT_x_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSampleLocationEXT, x));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkSampleLocationEXT_y_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSampleLocationEXT, y));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkSampleLocationsInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, sType));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkSampleLocationsInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkSampleLocationsInfoEXT_sampleLocationsPerPixel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, sampleLocationsPerPixel));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkSampleLocationsInfoEXT_sampleLocationGridSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, sampleLocationGridSize));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkSampleLocationsInfoEXT_sampleLocationsCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, sampleLocationsCount));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkSampleLocationsInfoEXT_pSampleLocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSampleLocationsInfoEXT, pSampleLocations));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkAttachmentSampleLocationsEXT_attachmentIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentSampleLocationsEXT, attachmentIndex));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkAttachmentSampleLocationsEXT_sampleLocationsInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentSampleLocationsEXT, sampleLocationsInfo));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkSubpassSampleLocationsEXT_subpassIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassSampleLocationsEXT, subpassIndex));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkSubpassSampleLocationsEXT_sampleLocationsInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassSampleLocationsEXT, sampleLocationsInfo));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkRenderPassSampleLocationsBeginInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, sType));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkRenderPassSampleLocationsBeginInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkRenderPassSampleLocationsBeginInfoEXT_attachmentInitialSampleLocationsCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, attachmentInitialSampleLocationsCount));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkRenderPassSampleLocationsBeginInfoEXT_pAttachmentInitialSampleLocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pAttachmentInitialSampleLocations));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkRenderPassSampleLocationsBeginInfoEXT_postSubpassSampleLocationsCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, postSubpassSampleLocationsCount));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkRenderPassSampleLocationsBeginInfoEXT_pPostSubpassSampleLocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pPostSubpassSampleLocations));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPipelineSampleLocationsStateCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPipelineSampleLocationsStateCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPipelineSampleLocationsStateCreateInfoEXT_sampleLocationsEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsEnable));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPipelineSampleLocationsStateCreateInfoEXT_sampleLocationsInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsInfo));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPhysicalDeviceSampleLocationsPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPhysicalDeviceSampleLocationsPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPhysicalDeviceSampleLocationsPropertiesEXT_sampleLocationSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSampleCounts));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPhysicalDeviceSampleLocationsPropertiesEXT_maxSampleLocationGridSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, maxSampleLocationGridSize));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPhysicalDeviceSampleLocationsPropertiesEXT_sampleLocationCoordinateRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationCoordinateRange));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPhysicalDeviceSampleLocationsPropertiesEXT_sampleLocationSubPixelBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSubPixelBits));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkPhysicalDeviceSampleLocationsPropertiesEXT_variableSampleLocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, variableSampleLocations));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkMultisamplePropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultisamplePropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkMultisamplePropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultisamplePropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_sample_locations
static Napi::Value VkMultisamplePropertiesEXT_maxSampleLocationGridSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultisamplePropertiesEXT, maxSampleLocationGridSize));
}
#endif


static Napi::Value VkSamplerReductionModeCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerReductionModeCreateInfo, sType));
}


static Napi::Value VkSamplerReductionModeCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerReductionModeCreateInfo, pNext));
}


static Napi::Value VkSamplerReductionModeCreateInfo_reductionMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerReductionModeCreateInfo, reductionMode));
}


#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_advancedBlendCoherentOperations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, advancedBlendCoherentOperations));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkPhysicalDeviceMultiDrawFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiDrawFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkPhysicalDeviceMultiDrawFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiDrawFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_multi_draw
static Napi::Value VkPhysicalDeviceMultiDrawFeaturesEXT_multiDraw_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultiDrawFeaturesEXT, multiDraw));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendMaxColorAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendMaxColorAttachments));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendIndependentBlend_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendIndependentBlend));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendNonPremultipliedSrcColor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendNonPremultipliedSrcColor));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendNonPremultipliedDstColor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendNonPremultipliedDstColor));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendCorrelatedOverlap_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendCorrelatedOverlap));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendAllOperations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendAllOperations));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPipelineColorBlendAdvancedStateCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPipelineColorBlendAdvancedStateCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPipelineColorBlendAdvancedStateCreateInfoEXT_srcPremultiplied_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, srcPremultiplied));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPipelineColorBlendAdvancedStateCreateInfoEXT_dstPremultiplied_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, dstPremultiplied));
}
#endif

#ifdef VK_EXT_blend_operation_advanced
static Napi::Value VkPipelineColorBlendAdvancedStateCreateInfoEXT_blendOverlap_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, blendOverlap));
}
#endif


static Napi::Value VkPhysicalDeviceInlineUniformBlockFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockFeatures, sType));
}


static Napi::Value VkPhysicalDeviceInlineUniformBlockFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceInlineUniformBlockFeatures_inlineUniformBlock_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockFeatures, inlineUniformBlock));
}


static Napi::Value VkPhysicalDeviceInlineUniformBlockFeatures_descriptorBindingInlineUniformBlockUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockFeatures, descriptorBindingInlineUniformBlockUpdateAfterBind));
}



static Napi::Value VkPhysicalDeviceInlineUniformBlockProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockProperties, sType));
}


static Napi::Value VkPhysicalDeviceInlineUniformBlockProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockProperties, pNext));
}


static Napi::Value VkPhysicalDeviceInlineUniformBlockProperties_maxInlineUniformBlockSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxInlineUniformBlockSize));
}


static Napi::Value VkPhysicalDeviceInlineUniformBlockProperties_maxPerStageDescriptorInlineUniformBlocks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxPerStageDescriptorInlineUniformBlocks));
}


static Napi::Value VkPhysicalDeviceInlineUniformBlockProperties_maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks));
}


static Napi::Value VkPhysicalDeviceInlineUniformBlockProperties_maxDescriptorSetInlineUniformBlocks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxDescriptorSetInlineUniformBlocks));
}


static Napi::Value VkPhysicalDeviceInlineUniformBlockProperties_maxDescriptorSetUpdateAfterBindInlineUniformBlocks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxDescriptorSetUpdateAfterBindInlineUniformBlocks));
}



static Napi::Value VkWriteDescriptorSetInlineUniformBlock_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetInlineUniformBlock, sType));
}


static Napi::Value VkWriteDescriptorSetInlineUniformBlock_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetInlineUniformBlock, pNext));
}


static Napi::Value VkWriteDescriptorSetInlineUniformBlock_dataSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetInlineUniformBlock, dataSize));
}


static Napi::Value VkWriteDescriptorSetInlineUniformBlock_pData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetInlineUniformBlock, pData));
}



static Napi::Value VkDescriptorPoolInlineUniformBlockCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolInlineUniformBlockCreateInfo, sType));
}


static Napi::Value VkDescriptorPoolInlineUniformBlockCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolInlineUniformBlockCreateInfo, pNext));
}


static Napi::Value VkDescriptorPoolInlineUniformBlockCreateInfo_maxInlineUniformBlockBindings_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorPoolInlineUniformBlockCreateInfo, maxInlineUniformBlockBindings));
}


#ifdef VK_NV_framebuffer_mixed_samples
static Napi::Value VkPipelineCoverageModulationStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_framebuffer_mixed_samples
static Napi::Value VkPipelineCoverageModulationStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_framebuffer_mixed_samples
static Napi::Value VkPipelineCoverageModulationStateCreateInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, flags));
}
#endif

#ifdef VK_NV_framebuffer_mixed_samples
static Napi::Value VkPipelineCoverageModulationStateCreateInfoNV_coverageModulationMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, coverageModulationMode));
}
#endif

#ifdef VK_NV_framebuffer_mixed_samples
static Napi::Value VkPipelineCoverageModulationStateCreateInfoNV_coverageModulationTableEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, coverageModulationTableEnable));
}
#endif

#ifdef VK_NV_framebuffer_mixed_samples
static Napi::Value VkPipelineCoverageModulationStateCreateInfoNV_coverageModulationTableCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, coverageModulationTableCount));
}
#endif

#ifdef VK_NV_framebuffer_mixed_samples
static Napi::Value VkPipelineCoverageModulationStateCreateInfoNV_pCoverageModulationTable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageModulationStateCreateInfoNV, pCoverageModulationTable));
}
#endif


static Napi::Value VkImageFormatListCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatListCreateInfo, sType));
}


static Napi::Value VkImageFormatListCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatListCreateInfo, pNext));
}


static Napi::Value VkImageFormatListCreateInfo_viewFormatCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatListCreateInfo, viewFormatCount));
}


static Napi::Value VkImageFormatListCreateInfo_pViewFormats_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatListCreateInfo, pViewFormats));
}


#ifdef VK_EXT_validation_cache
static Napi::Value VkValidationCacheCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_validation_cache
static Napi::Value VkValidationCacheCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_validation_cache
static Napi::Value VkValidationCacheCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_validation_cache
static Napi::Value VkValidationCacheCreateInfoEXT_initialDataSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, initialDataSize));
}
#endif

#ifdef VK_EXT_validation_cache
static Napi::Value VkValidationCacheCreateInfoEXT_pInitialData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkValidationCacheCreateInfoEXT, pInitialData));
}
#endif

#ifdef VK_EXT_validation_cache
static Napi::Value VkShaderModuleValidationCacheCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleValidationCacheCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_validation_cache
static Napi::Value VkShaderModuleValidationCacheCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleValidationCacheCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_validation_cache
static Napi::Value VkShaderModuleValidationCacheCreateInfoEXT_validationCache_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleValidationCacheCreateInfoEXT, validationCache));
}
#endif


static Napi::Value VkPhysicalDeviceMaintenance3Properties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3Properties, sType));
}


static Napi::Value VkPhysicalDeviceMaintenance3Properties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3Properties, pNext));
}


static Napi::Value VkPhysicalDeviceMaintenance3Properties_maxPerSetDescriptors_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3Properties, maxPerSetDescriptors));
}


static Napi::Value VkPhysicalDeviceMaintenance3Properties_maxMemoryAllocationSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance3Properties, maxMemoryAllocationSize));
}



static Napi::Value VkPhysicalDeviceMaintenance4Features_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance4Features, sType));
}


static Napi::Value VkPhysicalDeviceMaintenance4Features_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance4Features, pNext));
}


static Napi::Value VkPhysicalDeviceMaintenance4Features_maintenance4_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance4Features, maintenance4));
}



static Napi::Value VkPhysicalDeviceMaintenance4Properties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance4Properties, sType));
}


static Napi::Value VkPhysicalDeviceMaintenance4Properties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance4Properties, pNext));
}


static Napi::Value VkPhysicalDeviceMaintenance4Properties_maxBufferSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMaintenance4Properties, maxBufferSize));
}



static Napi::Value VkDescriptorSetLayoutSupport_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutSupport, sType));
}


static Napi::Value VkDescriptorSetLayoutSupport_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutSupport, pNext));
}


static Napi::Value VkDescriptorSetLayoutSupport_supported_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutSupport, supported));
}



static Napi::Value VkPhysicalDeviceShaderDrawParametersFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDrawParametersFeatures, sType));
}


static Napi::Value VkPhysicalDeviceShaderDrawParametersFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDrawParametersFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceShaderDrawParametersFeatures_shaderDrawParameters_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDrawParametersFeatures, shaderDrawParameters));
}



static Napi::Value VkPhysicalDeviceShaderFloat16Int8Features_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8Features, sType));
}


static Napi::Value VkPhysicalDeviceShaderFloat16Int8Features_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8Features, pNext));
}


static Napi::Value VkPhysicalDeviceShaderFloat16Int8Features_shaderFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8Features, shaderFloat16));
}


static Napi::Value VkPhysicalDeviceShaderFloat16Int8Features_shaderInt8_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderFloat16Int8Features, shaderInt8));
}




static Napi::Value VkPhysicalDeviceFloatControlsProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, sType));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, pNext));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_denormBehaviorIndependence_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, denormBehaviorIndependence));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_roundingModeIndependence_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, roundingModeIndependence));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderSignedZeroInfNanPreserveFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat16));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderSignedZeroInfNanPreserveFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat32));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderSignedZeroInfNanPreserveFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat64));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderDenormPreserveFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat16));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderDenormPreserveFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat32));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderDenormPreserveFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat64));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderDenormFlushToZeroFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat16));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderDenormFlushToZeroFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat32));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderDenormFlushToZeroFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat64));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTEFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat16));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTEFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat32));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTEFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat64));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTZFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat16));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTZFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat32));
}


static Napi::Value VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTZFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat64));
}



static Napi::Value VkPhysicalDeviceHostQueryResetFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceHostQueryResetFeatures, sType));
}


static Napi::Value VkPhysicalDeviceHostQueryResetFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceHostQueryResetFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceHostQueryResetFeatures_hostQueryReset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceHostQueryResetFeatures, hostQueryReset));
}


#ifdef VK_ANDROID_native_buffer
static Napi::Value VkNativeBufferUsage2ANDROID_consumer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkNativeBufferUsage2ANDROID, consumer));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkNativeBufferUsage2ANDROID_producer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkNativeBufferUsage2ANDROID, producer));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkNativeBufferANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkNativeBufferANDROID, sType));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkNativeBufferANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkNativeBufferANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkNativeBufferANDROID_handle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkNativeBufferANDROID, handle));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkNativeBufferANDROID_stride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkNativeBufferANDROID, stride));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkNativeBufferANDROID_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkNativeBufferANDROID, format));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkNativeBufferANDROID_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkNativeBufferANDROID, usage));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkNativeBufferANDROID_usage2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkNativeBufferANDROID, usage2));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkSwapchainImageCreateInfoANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainImageCreateInfoANDROID, sType));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkSwapchainImageCreateInfoANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainImageCreateInfoANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkSwapchainImageCreateInfoANDROID_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainImageCreateInfoANDROID, usage));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkPhysicalDevicePresentationPropertiesANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentationPropertiesANDROID, sType));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkPhysicalDevicePresentationPropertiesANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentationPropertiesANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_native_buffer
static Napi::Value VkPhysicalDevicePresentationPropertiesANDROID_sharedImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentationPropertiesANDROID, sharedImage));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderResourceUsageAMD_numUsedVgprs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, numUsedVgprs));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderResourceUsageAMD_numUsedSgprs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, numUsedSgprs));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderResourceUsageAMD_ldsSizePerLocalWorkGroup_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, ldsSizePerLocalWorkGroup));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderResourceUsageAMD_ldsUsageSizeInBytes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, ldsUsageSizeInBytes));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderResourceUsageAMD_scratchMemUsageInBytes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderResourceUsageAMD, scratchMemUsageInBytes));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderStatisticsInfoAMD_shaderStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, shaderStageMask));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderStatisticsInfoAMD_resourceUsage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, resourceUsage));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderStatisticsInfoAMD_numPhysicalVgprs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, numPhysicalVgprs));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderStatisticsInfoAMD_numPhysicalSgprs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, numPhysicalSgprs));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderStatisticsInfoAMD_numAvailableVgprs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, numAvailableVgprs));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderStatisticsInfoAMD_numAvailableSgprs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, numAvailableSgprs));
}
#endif

#ifdef VK_AMD_shader_info
static Napi::Value VkShaderStatisticsInfoAMD_computeWorkGroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderStatisticsInfoAMD, computeWorkGroupSize));
}
#endif

#ifdef VK_KHR_global_priority
static Napi::Value VkDeviceQueueGlobalPriorityCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueGlobalPriorityCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_global_priority
static Napi::Value VkDeviceQueueGlobalPriorityCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueGlobalPriorityCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_global_priority
static Napi::Value VkDeviceQueueGlobalPriorityCreateInfoKHR_globalPriority_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceQueueGlobalPriorityCreateInfoKHR, globalPriority));
}
#endif


#ifdef VK_KHR_global_priority
static Napi::Value VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_global_priority
static Napi::Value VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_global_priority
static Napi::Value VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_globalPriorityQuery_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, globalPriorityQuery));
}
#endif


#ifdef VK_KHR_global_priority
static Napi::Value VkQueueFamilyGlobalPriorityPropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyGlobalPriorityPropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_global_priority
static Napi::Value VkQueueFamilyGlobalPriorityPropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyGlobalPriorityPropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_global_priority
static Napi::Value VkQueueFamilyGlobalPriorityPropertiesKHR_priorityCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyGlobalPriorityPropertiesKHR, priorityCount));
}
#endif

#ifdef VK_KHR_global_priority
static Napi::Value VkQueueFamilyGlobalPriorityPropertiesKHR_priorities_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyGlobalPriorityPropertiesKHR, priorities));
}
#endif


#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectNameInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, sType));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectNameInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectNameInfoEXT_objectType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, objectType));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectNameInfoEXT_objectHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, objectHandle));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectNameInfoEXT_pObjectName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectNameInfoEXT, pObjectName));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectTagInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, sType));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectTagInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectTagInfoEXT_objectType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, objectType));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectTagInfoEXT_objectHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, objectHandle));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectTagInfoEXT_tagName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, tagName));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectTagInfoEXT_tagSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, tagSize));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsObjectTagInfoEXT_pTag_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsObjectTagInfoEXT, pTag));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsLabelEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsLabelEXT, sType));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsLabelEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsLabelEXT, pNext));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsLabelEXT_pLabelName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsLabelEXT, pLabelName));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsLabelEXT_color_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsLabelEXT, color));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCreateInfoEXT_messageSeverity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, messageSeverity));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCreateInfoEXT_messageType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, messageType));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCreateInfoEXT_pfnUserCallback_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, pfnUserCallback));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCreateInfoEXT_pUserData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCreateInfoEXT, pUserData));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, sType));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pNext));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, flags));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_pMessageIdName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pMessageIdName));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_messageIdNumber_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, messageIdNumber));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_pMessage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pMessage));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_queueLabelCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, queueLabelCount));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_pQueueLabels_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pQueueLabels));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_cmdBufLabelCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, cmdBufLabelCount));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_pCmdBufLabels_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pCmdBufLabels));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_objectCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, objectCount));
}
#endif

#ifdef VK_EXT_debug_utils
static Napi::Value VkDebugUtilsMessengerCallbackDataEXT_pObjects_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDebugUtilsMessengerCallbackDataEXT, pObjects));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_deviceMemoryReport_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, deviceMemoryReport));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceDeviceMemoryReportCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceDeviceMemoryReportCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceDeviceMemoryReportCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceDeviceMemoryReportCreateInfoEXT_pfnUserCallback_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, pfnUserCallback));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceDeviceMemoryReportCreateInfoEXT_pUserData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceDeviceMemoryReportCreateInfoEXT, pUserData));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceMemoryReportCallbackDataEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, sType));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceMemoryReportCallbackDataEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, pNext));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceMemoryReportCallbackDataEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, flags));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceMemoryReportCallbackDataEXT_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, type));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceMemoryReportCallbackDataEXT_memoryObjectId_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, memoryObjectId));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceMemoryReportCallbackDataEXT_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, size));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceMemoryReportCallbackDataEXT_objectType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, objectType));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceMemoryReportCallbackDataEXT_objectHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, objectHandle));
}
#endif

#ifdef VK_EXT_device_memory_report
static Napi::Value VkDeviceMemoryReportCallbackDataEXT_heapIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryReportCallbackDataEXT, heapIndex));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkImportMemoryHostPointerInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryHostPointerInfoEXT, sType));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkImportMemoryHostPointerInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryHostPointerInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkImportMemoryHostPointerInfoEXT_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryHostPointerInfoEXT, handleType));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkImportMemoryHostPointerInfoEXT_pHostPointer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryHostPointerInfoEXT, pHostPointer));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkMemoryHostPointerPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryHostPointerPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkMemoryHostPointerPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryHostPointerPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkMemoryHostPointerPropertiesEXT_memoryTypeBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryHostPointerPropertiesEXT, memoryTypeBits));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkPhysicalDeviceExternalMemoryHostPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkPhysicalDeviceExternalMemoryHostPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_external_memory_host
static Napi::Value VkPhysicalDeviceExternalMemoryHostPropertiesEXT_minImportedHostPointerAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, minImportedHostPointerAlignment));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_primitiveOverestimationSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, primitiveOverestimationSize));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_maxExtraPrimitiveOverestimationSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, maxExtraPrimitiveOverestimationSize));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_extraPrimitiveOverestimationSizeGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, extraPrimitiveOverestimationSizeGranularity));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_primitiveUnderestimation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, primitiveUnderestimation));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_conservativePointAndLineRasterization_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, conservativePointAndLineRasterization));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_degenerateTrianglesRasterized_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, degenerateTrianglesRasterized));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_degenerateLinesRasterized_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, degenerateLinesRasterized));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_fullyCoveredFragmentShaderInputVariable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, fullyCoveredFragmentShaderInputVariable));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPhysicalDeviceConservativeRasterizationPropertiesEXT_conservativeRasterizationPostDepthCoverage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, conservativeRasterizationPostDepthCoverage));
}
#endif

#ifdef VK_EXT_calibrated_timestamps
static Napi::Value VkCalibratedTimestampInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCalibratedTimestampInfoEXT, sType));
}
#endif

#ifdef VK_EXT_calibrated_timestamps
static Napi::Value VkCalibratedTimestampInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCalibratedTimestampInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_calibrated_timestamps
static Napi::Value VkCalibratedTimestampInfoEXT_timeDomain_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCalibratedTimestampInfoEXT, timeDomain));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, sType));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, pNext));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_shaderEngineCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, shaderEngineCount));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_shaderArraysPerEngineCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, shaderArraysPerEngineCount));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_computeUnitsPerShaderArray_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, computeUnitsPerShaderArray));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_simdPerComputeUnit_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, simdPerComputeUnit));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_wavefrontsPerSimd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, wavefrontsPerSimd));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_wavefrontSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, wavefrontSize));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_sgprsPerSimd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, sgprsPerSimd));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_minSgprAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, minSgprAllocation));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_maxSgprAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, maxSgprAllocation));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_sgprAllocationGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, sgprAllocationGranularity));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_vgprsPerSimd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, vgprsPerSimd));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_minVgprAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, minVgprAllocation));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_maxVgprAllocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, maxVgprAllocation));
}
#endif

#ifdef VK_AMD_shader_core_properties
static Napi::Value VkPhysicalDeviceShaderCorePropertiesAMD_vgprAllocationGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, vgprAllocationGranularity));
}
#endif

#ifdef VK_AMD_shader_core_properties2
static Napi::Value VkPhysicalDeviceShaderCoreProperties2AMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreProperties2AMD, sType));
}
#endif

#ifdef VK_AMD_shader_core_properties2
static Napi::Value VkPhysicalDeviceShaderCoreProperties2AMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreProperties2AMD, pNext));
}
#endif

#ifdef VK_AMD_shader_core_properties2
static Napi::Value VkPhysicalDeviceShaderCoreProperties2AMD_shaderCoreFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreProperties2AMD, shaderCoreFeatures));
}
#endif

#ifdef VK_AMD_shader_core_properties2
static Napi::Value VkPhysicalDeviceShaderCoreProperties2AMD_activeComputeUnitCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreProperties2AMD, activeComputeUnitCount));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPipelineRasterizationConservativeStateCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPipelineRasterizationConservativeStateCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPipelineRasterizationConservativeStateCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPipelineRasterizationConservativeStateCreateInfoEXT_conservativeRasterizationMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, conservativeRasterizationMode));
}
#endif

#ifdef VK_EXT_conservative_rasterization
static Napi::Value VkPipelineRasterizationConservativeStateCreateInfoEXT_extraPrimitiveOverestimationSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, extraPrimitiveOverestimationSize));
}
#endif


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, sType));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderInputAttachmentArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderInputAttachmentArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderUniformTexelBufferArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformTexelBufferArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageTexelBufferArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageTexelBufferArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderUniformBufferArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformBufferArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderSampledImageArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderSampledImageArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageBufferArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageBufferArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageImageArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageImageArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderInputAttachmentArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderInputAttachmentArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderUniformTexelBufferArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformTexelBufferArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageTexelBufferArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageTexelBufferArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingUniformBufferUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUniformBufferUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingSampledImageUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingSampledImageUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingStorageImageUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageImageUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingStorageBufferUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageBufferUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingUniformTexelBufferUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUniformTexelBufferUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingStorageTexelBufferUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageTexelBufferUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingUpdateUnusedWhilePending_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUpdateUnusedWhilePending));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingPartiallyBound_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingPartiallyBound));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingVariableDescriptorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingVariableDescriptorCount));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingFeatures_runtimeDescriptorArray_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, runtimeDescriptorArray));
}



static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, sType));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, pNext));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxUpdateAfterBindDescriptorsInAllPools_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxUpdateAfterBindDescriptorsInAllPools));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_shaderUniformBufferArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderUniformBufferArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_shaderSampledImageArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderSampledImageArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_shaderStorageBufferArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderStorageBufferArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_shaderStorageImageArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderStorageImageArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_shaderInputAttachmentArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderInputAttachmentArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_robustBufferAccessUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, robustBufferAccessUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_quadDivergentImplicitLod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, quadDivergentImplicitLod));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindSamplers));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindUniformBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindUniformBuffers));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindStorageBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindStorageBuffers));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindSampledImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindSampledImages));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindStorageImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindStorageImages));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindInputAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindInputAttachments));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageUpdateAfterBindResources_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageUpdateAfterBindResources));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindSamplers));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindUniformBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindUniformBuffers));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindUniformBuffersDynamic_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindStorageBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageBuffers));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindStorageBuffersDynamic_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindSampledImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindSampledImages));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindStorageImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageImages));
}


static Napi::Value VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindInputAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindInputAttachments));
}



static Napi::Value VkDescriptorSetLayoutBindingFlagsCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, sType));
}


static Napi::Value VkDescriptorSetLayoutBindingFlagsCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, pNext));
}


static Napi::Value VkDescriptorSetLayoutBindingFlagsCreateInfo_bindingCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, bindingCount));
}


static Napi::Value VkDescriptorSetLayoutBindingFlagsCreateInfo_pBindingFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, pBindingFlags));
}



static Napi::Value VkDescriptorSetVariableDescriptorCountAllocateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, sType));
}


static Napi::Value VkDescriptorSetVariableDescriptorCountAllocateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, pNext));
}


static Napi::Value VkDescriptorSetVariableDescriptorCountAllocateInfo_descriptorSetCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, descriptorSetCount));
}


static Napi::Value VkDescriptorSetVariableDescriptorCountAllocateInfo_pDescriptorCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, pDescriptorCounts));
}



static Napi::Value VkDescriptorSetVariableDescriptorCountLayoutSupport_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupport, sType));
}


static Napi::Value VkDescriptorSetVariableDescriptorCountLayoutSupport_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupport, pNext));
}


static Napi::Value VkDescriptorSetVariableDescriptorCountLayoutSupport_maxVariableDescriptorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupport, maxVariableDescriptorCount));
}



static Napi::Value VkAttachmentDescription2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, sType));
}


static Napi::Value VkAttachmentDescription2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, pNext));
}


static Napi::Value VkAttachmentDescription2_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, flags));
}


static Napi::Value VkAttachmentDescription2_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, format));
}


static Napi::Value VkAttachmentDescription2_samples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, samples));
}


static Napi::Value VkAttachmentDescription2_loadOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, loadOp));
}


static Napi::Value VkAttachmentDescription2_storeOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, storeOp));
}


static Napi::Value VkAttachmentDescription2_stencilLoadOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, stencilLoadOp));
}


static Napi::Value VkAttachmentDescription2_stencilStoreOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, stencilStoreOp));
}


static Napi::Value VkAttachmentDescription2_initialLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, initialLayout));
}


static Napi::Value VkAttachmentDescription2_finalLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescription2, finalLayout));
}



static Napi::Value VkAttachmentReference2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReference2, sType));
}


static Napi::Value VkAttachmentReference2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReference2, pNext));
}


static Napi::Value VkAttachmentReference2_attachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReference2, attachment));
}


static Napi::Value VkAttachmentReference2_layout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReference2, layout));
}


static Napi::Value VkAttachmentReference2_aspectMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReference2, aspectMask));
}



static Napi::Value VkSubpassDescription2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, sType));
}


static Napi::Value VkSubpassDescription2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, pNext));
}


static Napi::Value VkSubpassDescription2_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, flags));
}


static Napi::Value VkSubpassDescription2_pipelineBindPoint_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, pipelineBindPoint));
}


static Napi::Value VkSubpassDescription2_viewMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, viewMask));
}


static Napi::Value VkSubpassDescription2_inputAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, inputAttachmentCount));
}


static Napi::Value VkSubpassDescription2_pInputAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, pInputAttachments));
}


static Napi::Value VkSubpassDescription2_colorAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, colorAttachmentCount));
}


static Napi::Value VkSubpassDescription2_pColorAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, pColorAttachments));
}


static Napi::Value VkSubpassDescription2_pResolveAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, pResolveAttachments));
}


static Napi::Value VkSubpassDescription2_pDepthStencilAttachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, pDepthStencilAttachment));
}


static Napi::Value VkSubpassDescription2_preserveAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, preserveAttachmentCount));
}


static Napi::Value VkSubpassDescription2_pPreserveAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescription2, pPreserveAttachments));
}



static Napi::Value VkSubpassDependency2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, sType));
}


static Napi::Value VkSubpassDependency2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, pNext));
}


static Napi::Value VkSubpassDependency2_srcSubpass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, srcSubpass));
}


static Napi::Value VkSubpassDependency2_dstSubpass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, dstSubpass));
}


static Napi::Value VkSubpassDependency2_srcStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, srcStageMask));
}


static Napi::Value VkSubpassDependency2_dstStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, dstStageMask));
}


static Napi::Value VkSubpassDependency2_srcAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, srcAccessMask));
}


static Napi::Value VkSubpassDependency2_dstAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, dstAccessMask));
}


static Napi::Value VkSubpassDependency2_dependencyFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, dependencyFlags));
}


static Napi::Value VkSubpassDependency2_viewOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDependency2, viewOffset));
}



static Napi::Value VkRenderPassCreateInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, sType));
}


static Napi::Value VkRenderPassCreateInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pNext));
}


static Napi::Value VkRenderPassCreateInfo2_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, flags));
}


static Napi::Value VkRenderPassCreateInfo2_attachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, attachmentCount));
}


static Napi::Value VkRenderPassCreateInfo2_pAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pAttachments));
}


static Napi::Value VkRenderPassCreateInfo2_subpassCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, subpassCount));
}


static Napi::Value VkRenderPassCreateInfo2_pSubpasses_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pSubpasses));
}


static Napi::Value VkRenderPassCreateInfo2_dependencyCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, dependencyCount));
}


static Napi::Value VkRenderPassCreateInfo2_pDependencies_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pDependencies));
}


static Napi::Value VkRenderPassCreateInfo2_correlatedViewMaskCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, correlatedViewMaskCount));
}


static Napi::Value VkRenderPassCreateInfo2_pCorrelatedViewMasks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreateInfo2, pCorrelatedViewMasks));
}



static Napi::Value VkSubpassBeginInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassBeginInfo, sType));
}


static Napi::Value VkSubpassBeginInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassBeginInfo, pNext));
}


static Napi::Value VkSubpassBeginInfo_contents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassBeginInfo, contents));
}



static Napi::Value VkSubpassEndInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassEndInfo, sType));
}


static Napi::Value VkSubpassEndInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassEndInfo, pNext));
}



static Napi::Value VkPhysicalDeviceTimelineSemaphoreFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreFeatures, sType));
}


static Napi::Value VkPhysicalDeviceTimelineSemaphoreFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceTimelineSemaphoreFeatures_timelineSemaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreFeatures, timelineSemaphore));
}



static Napi::Value VkPhysicalDeviceTimelineSemaphoreProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreProperties, sType));
}


static Napi::Value VkPhysicalDeviceTimelineSemaphoreProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreProperties, pNext));
}


static Napi::Value VkPhysicalDeviceTimelineSemaphoreProperties_maxTimelineSemaphoreValueDifference_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTimelineSemaphoreProperties, maxTimelineSemaphoreValueDifference));
}



static Napi::Value VkSemaphoreTypeCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfo, sType));
}


static Napi::Value VkSemaphoreTypeCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfo, pNext));
}


static Napi::Value VkSemaphoreTypeCreateInfo_semaphoreType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfo, semaphoreType));
}


static Napi::Value VkSemaphoreTypeCreateInfo_initialValue_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreTypeCreateInfo, initialValue));
}



static Napi::Value VkTimelineSemaphoreSubmitInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, sType));
}


static Napi::Value VkTimelineSemaphoreSubmitInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, pNext));
}


static Napi::Value VkTimelineSemaphoreSubmitInfo_waitSemaphoreValueCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, waitSemaphoreValueCount));
}


static Napi::Value VkTimelineSemaphoreSubmitInfo_pWaitSemaphoreValues_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, pWaitSemaphoreValues));
}


static Napi::Value VkTimelineSemaphoreSubmitInfo_signalSemaphoreValueCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, signalSemaphoreValueCount));
}


static Napi::Value VkTimelineSemaphoreSubmitInfo_pSignalSemaphoreValues_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTimelineSemaphoreSubmitInfo, pSignalSemaphoreValues));
}



static Napi::Value VkSemaphoreWaitInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, sType));
}


static Napi::Value VkSemaphoreWaitInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, pNext));
}


static Napi::Value VkSemaphoreWaitInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, flags));
}


static Napi::Value VkSemaphoreWaitInfo_semaphoreCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, semaphoreCount));
}


static Napi::Value VkSemaphoreWaitInfo_pSemaphores_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, pSemaphores));
}


static Napi::Value VkSemaphoreWaitInfo_pValues_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreWaitInfo, pValues));
}



static Napi::Value VkSemaphoreSignalInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSignalInfo, sType));
}


static Napi::Value VkSemaphoreSignalInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSignalInfo, pNext));
}


static Napi::Value VkSemaphoreSignalInfo_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSignalInfo, semaphore));
}


static Napi::Value VkSemaphoreSignalInfo_value_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSignalInfo, value));
}


#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkVertexInputBindingDivisorDescriptionEXT_binding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDivisorDescriptionEXT, binding));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkVertexInputBindingDivisorDescriptionEXT_divisor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDivisorDescriptionEXT, divisor));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPipelineVertexInputDivisorStateCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPipelineVertexInputDivisorStateCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPipelineVertexInputDivisorStateCreateInfoEXT_vertexBindingDivisorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, vertexBindingDivisorCount));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPipelineVertexInputDivisorStateCreateInfoEXT_pVertexBindingDivisors_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, pVertexBindingDivisors));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_maxVertexAttribDivisor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, maxVertexAttribDivisor));
}
#endif

#ifdef VK_EXT_pci_bus_info
static Napi::Value VkPhysicalDevicePCIBusInfoPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_pci_bus_info
static Napi::Value VkPhysicalDevicePCIBusInfoPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_pci_bus_info
static Napi::Value VkPhysicalDevicePCIBusInfoPropertiesEXT_pciDomain_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDomain));
}
#endif

#ifdef VK_EXT_pci_bus_info
static Napi::Value VkPhysicalDevicePCIBusInfoPropertiesEXT_pciBus_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciBus));
}
#endif

#ifdef VK_EXT_pci_bus_info
static Napi::Value VkPhysicalDevicePCIBusInfoPropertiesEXT_pciDevice_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDevice));
}
#endif

#ifdef VK_EXT_pci_bus_info
static Napi::Value VkPhysicalDevicePCIBusInfoPropertiesEXT_pciFunction_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciFunction));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkImportAndroidHardwareBufferInfoANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportAndroidHardwareBufferInfoANDROID, sType));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkImportAndroidHardwareBufferInfoANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportAndroidHardwareBufferInfoANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkImportAndroidHardwareBufferInfoANDROID_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportAndroidHardwareBufferInfoANDROID, buffer));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferUsageANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferUsageANDROID, sType));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferUsageANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferUsageANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferUsageANDROID_androidHardwareBufferUsage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferUsageANDROID, androidHardwareBufferUsage));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferPropertiesANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferPropertiesANDROID, sType));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferPropertiesANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferPropertiesANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferPropertiesANDROID_allocationSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferPropertiesANDROID, allocationSize));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferPropertiesANDROID_memoryTypeBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferPropertiesANDROID, memoryTypeBits));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkMemoryGetAndroidHardwareBufferInfoANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetAndroidHardwareBufferInfoANDROID, sType));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkMemoryGetAndroidHardwareBufferInfoANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetAndroidHardwareBufferInfoANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkMemoryGetAndroidHardwareBufferInfoANDROID_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetAndroidHardwareBufferInfoANDROID, memory));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, sType));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, format));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_externalFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, externalFormat));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_formatFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, formatFeatures));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_samplerYcbcrConversionComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, samplerYcbcrConversionComponents));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedYcbcrModel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, suggestedYcbcrModel));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedYcbcrRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, suggestedYcbcrRange));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedXChromaOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, suggestedXChromaOffset));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedYChromaOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, suggestedYChromaOffset));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkCommandBufferInheritanceConditionalRenderingInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceConditionalRenderingInfoEXT, sType));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkCommandBufferInheritanceConditionalRenderingInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceConditionalRenderingInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkCommandBufferInheritanceConditionalRenderingInfoEXT_conditionalRenderingEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceConditionalRenderingInfoEXT, conditionalRenderingEnable));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkExternalFormatANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalFormatANDROID, sType));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkExternalFormatANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalFormatANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkExternalFormatANDROID_externalFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExternalFormatANDROID, externalFormat));
}
#endif


static Napi::Value VkPhysicalDevice8BitStorageFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, sType));
}


static Napi::Value VkPhysicalDevice8BitStorageFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, pNext));
}


static Napi::Value VkPhysicalDevice8BitStorageFeatures_storageBuffer8BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, storageBuffer8BitAccess));
}


static Napi::Value VkPhysicalDevice8BitStorageFeatures_uniformAndStorageBuffer8BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, uniformAndStorageBuffer8BitAccess));
}


static Napi::Value VkPhysicalDevice8BitStorageFeatures_storagePushConstant8_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice8BitStorageFeatures, storagePushConstant8));
}


#ifdef VK_EXT_conditional_rendering
static Napi::Value VkPhysicalDeviceConditionalRenderingFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkPhysicalDeviceConditionalRenderingFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkPhysicalDeviceConditionalRenderingFeaturesEXT_conditionalRendering_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, conditionalRendering));
}
#endif

#ifdef VK_EXT_conditional_rendering
static Napi::Value VkPhysicalDeviceConditionalRenderingFeaturesEXT_inheritedConditionalRendering_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, inheritedConditionalRendering));
}
#endif


static Napi::Value VkPhysicalDeviceVulkanMemoryModelFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, sType));
}


static Napi::Value VkPhysicalDeviceVulkanMemoryModelFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceVulkanMemoryModelFeatures_vulkanMemoryModel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModel));
}


static Napi::Value VkPhysicalDeviceVulkanMemoryModelFeatures_vulkanMemoryModelDeviceScope_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModelDeviceScope));
}


static Napi::Value VkPhysicalDeviceVulkanMemoryModelFeatures_vulkanMemoryModelAvailabilityVisibilityChains_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModelAvailabilityVisibilityChains));
}



static Napi::Value VkPhysicalDeviceShaderAtomicInt64Features_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64Features, sType));
}


static Napi::Value VkPhysicalDeviceShaderAtomicInt64Features_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64Features, pNext));
}


static Napi::Value VkPhysicalDeviceShaderAtomicInt64Features_shaderBufferInt64Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64Features, shaderBufferInt64Atomics));
}


static Napi::Value VkPhysicalDeviceShaderAtomicInt64Features_shaderSharedInt64Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicInt64Features, shaderSharedInt64Atomics));
}


#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat32Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat32Atomics));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat32AtomicAdd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat32AtomicAdd));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat64Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat64Atomics));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat64AtomicAdd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat64AtomicAdd));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat32Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat32Atomics));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat32AtomicAdd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat32AtomicAdd));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat64Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat64Atomics));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat64AtomicAdd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat64AtomicAdd));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderImageFloat32Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderImageFloat32Atomics));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderImageFloat32AtomicAdd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderImageFloat32AtomicAdd));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_sparseImageFloat32Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sparseImageFloat32Atomics));
}
#endif

#ifdef VK_EXT_shader_atomic_float
static Napi::Value VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_sparseImageFloat32AtomicAdd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sparseImageFloat32AtomicAdd));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat16Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat16Atomics));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat16AtomicAdd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat16AtomicAdd));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat16AtomicMinMax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat16AtomicMinMax));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat32AtomicMinMax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat32AtomicMinMax));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat64AtomicMinMax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat64AtomicMinMax));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat16Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat16Atomics));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat16AtomicAdd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat16AtomicAdd));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat16AtomicMinMax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat16AtomicMinMax));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat32AtomicMinMax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat32AtomicMinMax));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat64AtomicMinMax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat64AtomicMinMax));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderImageFloat32AtomicMinMax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderImageFloat32AtomicMinMax));
}
#endif

#ifdef VK_EXT_shader_atomic_float2
static Napi::Value VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_sparseImageFloat32AtomicMinMax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, sparseImageFloat32AtomicMinMax));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_vertexAttributeInstanceRateDivisor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateDivisor));
}
#endif

#ifdef VK_EXT_vertex_attribute_divisor
static Napi::Value VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_vertexAttributeInstanceRateZeroDivisor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateZeroDivisor));
}
#endif

#ifdef VK_NV_device_diagnostic_checkpoints
static Napi::Value VkQueueFamilyCheckpointPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyCheckpointPropertiesNV, sType));
}
#endif

#ifdef VK_NV_device_diagnostic_checkpoints
static Napi::Value VkQueueFamilyCheckpointPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyCheckpointPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_device_diagnostic_checkpoints
static Napi::Value VkQueueFamilyCheckpointPropertiesNV_checkpointExecutionStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyCheckpointPropertiesNV, checkpointExecutionStageMask));
}
#endif

#ifdef VK_NV_device_diagnostic_checkpoints
static Napi::Value VkCheckpointDataNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCheckpointDataNV, sType));
}
#endif

#ifdef VK_NV_device_diagnostic_checkpoints
static Napi::Value VkCheckpointDataNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCheckpointDataNV, pNext));
}
#endif

#ifdef VK_NV_device_diagnostic_checkpoints
static Napi::Value VkCheckpointDataNV_stage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCheckpointDataNV, stage));
}
#endif

#ifdef VK_NV_device_diagnostic_checkpoints
static Napi::Value VkCheckpointDataNV_pCheckpointMarker_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCheckpointDataNV, pCheckpointMarker));
}
#endif


static Napi::Value VkPhysicalDeviceDepthStencilResolveProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, sType));
}


static Napi::Value VkPhysicalDeviceDepthStencilResolveProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, pNext));
}


static Napi::Value VkPhysicalDeviceDepthStencilResolveProperties_supportedDepthResolveModes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, supportedDepthResolveModes));
}


static Napi::Value VkPhysicalDeviceDepthStencilResolveProperties_supportedStencilResolveModes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, supportedStencilResolveModes));
}


static Napi::Value VkPhysicalDeviceDepthStencilResolveProperties_independentResolveNone_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, independentResolveNone));
}


static Napi::Value VkPhysicalDeviceDepthStencilResolveProperties_independentResolve_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthStencilResolveProperties, independentResolve));
}



static Napi::Value VkSubpassDescriptionDepthStencilResolve_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, sType));
}


static Napi::Value VkSubpassDescriptionDepthStencilResolve_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, pNext));
}


static Napi::Value VkSubpassDescriptionDepthStencilResolve_depthResolveMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, depthResolveMode));
}


static Napi::Value VkSubpassDescriptionDepthStencilResolve_stencilResolveMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, stencilResolveMode));
}


static Napi::Value VkSubpassDescriptionDepthStencilResolve_pDepthStencilResolveAttachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassDescriptionDepthStencilResolve, pDepthStencilResolveAttachment));
}


#ifdef VK_EXT_astc_decode_mode
static Napi::Value VkImageViewASTCDecodeModeEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewASTCDecodeModeEXT, sType));
}
#endif

#ifdef VK_EXT_astc_decode_mode
static Napi::Value VkImageViewASTCDecodeModeEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewASTCDecodeModeEXT, pNext));
}
#endif

#ifdef VK_EXT_astc_decode_mode
static Napi::Value VkImageViewASTCDecodeModeEXT_decodeMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewASTCDecodeModeEXT, decodeMode));
}
#endif

#ifdef VK_EXT_astc_decode_mode
static Napi::Value VkPhysicalDeviceASTCDecodeFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceASTCDecodeFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_astc_decode_mode
static Napi::Value VkPhysicalDeviceASTCDecodeFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceASTCDecodeFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_astc_decode_mode
static Napi::Value VkPhysicalDeviceASTCDecodeFeaturesEXT_decodeModeSharedExponent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceASTCDecodeFeaturesEXT, decodeModeSharedExponent));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackFeaturesEXT_transformFeedback_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, transformFeedback));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackFeaturesEXT_geometryStreams_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, geometryStreams));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackStreams_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreams));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBuffers));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBufferSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferSize));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackStreamDataSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreamDataSize));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBufferDataSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataSize));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBufferDataStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataStride));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackQueries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackQueries));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackStreamsLinesTriangles_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackStreamsLinesTriangles));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackRasterizationStreamSelect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackRasterizationStreamSelect));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackDraw_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackDraw));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPipelineRasterizationStateStreamCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPipelineRasterizationStateStreamCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPipelineRasterizationStateStreamCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_transform_feedback
static Napi::Value VkPipelineRasterizationStateStreamCreateInfoEXT_rasterizationStream_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, rasterizationStream));
}
#endif

#ifdef VK_NV_representative_fragment_test
static Napi::Value VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, sType));
}
#endif

#ifdef VK_NV_representative_fragment_test
static Napi::Value VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_representative_fragment_test
static Napi::Value VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_representativeFragmentTest_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, representativeFragmentTest));
}
#endif

#ifdef VK_NV_representative_fragment_test
static Napi::Value VkPipelineRepresentativeFragmentTestStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_representative_fragment_test
static Napi::Value VkPipelineRepresentativeFragmentTestStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_representative_fragment_test
static Napi::Value VkPipelineRepresentativeFragmentTestStateCreateInfoNV_representativeFragmentTestEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, representativeFragmentTestEnable));
}
#endif

#ifdef VK_NV_scissor_exclusive
static Napi::Value VkPhysicalDeviceExclusiveScissorFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExclusiveScissorFeaturesNV, sType));
}
#endif

#ifdef VK_NV_scissor_exclusive
static Napi::Value VkPhysicalDeviceExclusiveScissorFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExclusiveScissorFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_scissor_exclusive
static Napi::Value VkPhysicalDeviceExclusiveScissorFeaturesNV_exclusiveScissor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExclusiveScissorFeaturesNV, exclusiveScissor));
}
#endif

#ifdef VK_NV_scissor_exclusive
static Napi::Value VkPipelineViewportExclusiveScissorStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_scissor_exclusive
static Napi::Value VkPipelineViewportExclusiveScissorStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_scissor_exclusive
static Napi::Value VkPipelineViewportExclusiveScissorStateCreateInfoNV_exclusiveScissorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, exclusiveScissorCount));
}
#endif

#ifdef VK_NV_scissor_exclusive
static Napi::Value VkPipelineViewportExclusiveScissorStateCreateInfoNV_pExclusiveScissors_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, pExclusiveScissors));
}
#endif

#ifdef VK_NV_corner_sampled_image
static Napi::Value VkPhysicalDeviceCornerSampledImageFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCornerSampledImageFeaturesNV, sType));
}
#endif

#ifdef VK_NV_corner_sampled_image
static Napi::Value VkPhysicalDeviceCornerSampledImageFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCornerSampledImageFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_corner_sampled_image
static Napi::Value VkPhysicalDeviceCornerSampledImageFeaturesNV_cornerSampledImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCornerSampledImageFeaturesNV, cornerSampledImage));
}
#endif

#ifdef VK_NV_compute_shader_derivatives
static Napi::Value VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, sType));
}
#endif

#ifdef VK_NV_compute_shader_derivatives
static Napi::Value VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_compute_shader_derivatives
static Napi::Value VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_computeDerivativeGroupQuads_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, computeDerivativeGroupQuads));
}
#endif

#ifdef VK_NV_compute_shader_derivatives
static Napi::Value VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_computeDerivativeGroupLinear_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, computeDerivativeGroupLinear));
}
#endif


#ifdef VK_NV_shader_image_footprint
static Napi::Value VkPhysicalDeviceShaderImageFootprintFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageFootprintFeaturesNV, sType));
}
#endif

#ifdef VK_NV_shader_image_footprint
static Napi::Value VkPhysicalDeviceShaderImageFootprintFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageFootprintFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_shader_image_footprint
static Napi::Value VkPhysicalDeviceShaderImageFootprintFeaturesNV_imageFootprint_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageFootprintFeaturesNV, imageFootprint));
}
#endif

#ifdef VK_NV_dedicated_allocation_image_aliasing
static Napi::Value VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, sType));
}
#endif

#ifdef VK_NV_dedicated_allocation_image_aliasing
static Napi::Value VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_dedicated_allocation_image_aliasing
static Napi::Value VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_dedicatedAllocationImageAliasing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, dedicatedAllocationImageAliasing));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkPhysicalDeviceCopyMemoryIndirectFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV, sType));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkPhysicalDeviceCopyMemoryIndirectFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkPhysicalDeviceCopyMemoryIndirectFeaturesNV_indirectCopy_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV, indirectCopy));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkPhysicalDeviceCopyMemoryIndirectPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV, sType));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkPhysicalDeviceCopyMemoryIndirectPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_copy_memory_indirect
static Napi::Value VkPhysicalDeviceCopyMemoryIndirectPropertiesNV_supportedQueues_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV, supportedQueues));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkPhysicalDeviceMemoryDecompressionFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryDecompressionFeaturesNV, sType));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkPhysicalDeviceMemoryDecompressionFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryDecompressionFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkPhysicalDeviceMemoryDecompressionFeaturesNV_memoryDecompression_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryDecompressionFeaturesNV, memoryDecompression));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkPhysicalDeviceMemoryDecompressionPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryDecompressionPropertiesNV, sType));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkPhysicalDeviceMemoryDecompressionPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryDecompressionPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkPhysicalDeviceMemoryDecompressionPropertiesNV_decompressionMethods_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryDecompressionPropertiesNV, decompressionMethods));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkPhysicalDeviceMemoryDecompressionPropertiesNV_maxDecompressionIndirectCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryDecompressionPropertiesNV, maxDecompressionIndirectCount));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkShadingRatePaletteNV_shadingRatePaletteEntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShadingRatePaletteNV, shadingRatePaletteEntryCount));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkShadingRatePaletteNV_pShadingRatePaletteEntries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShadingRatePaletteNV, pShadingRatePaletteEntries));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportShadingRateImageStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportShadingRateImageStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportShadingRateImageStateCreateInfoNV_shadingRateImageEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, shadingRateImageEnable));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportShadingRateImageStateCreateInfoNV_viewportCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, viewportCount));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportShadingRateImageStateCreateInfoNV_pShadingRatePalettes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, pShadingRatePalettes));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPhysicalDeviceShadingRateImageFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, sType));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPhysicalDeviceShadingRateImageFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPhysicalDeviceShadingRateImageFeaturesNV_shadingRateImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, shadingRateImage));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPhysicalDeviceShadingRateImageFeaturesNV_shadingRateCoarseSampleOrder_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, shadingRateCoarseSampleOrder));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPhysicalDeviceShadingRateImagePropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, sType));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPhysicalDeviceShadingRateImagePropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, pNext));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPhysicalDeviceShadingRateImagePropertiesNV_shadingRateTexelSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRateTexelSize));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPhysicalDeviceShadingRateImagePropertiesNV_shadingRatePaletteSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRatePaletteSize));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPhysicalDeviceShadingRateImagePropertiesNV_shadingRateMaxCoarseSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRateMaxCoarseSamples));
}
#endif

#ifdef VK_HUAWEI_invocation_mask
static Napi::Value VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI, sType));
}
#endif

#ifdef VK_HUAWEI_invocation_mask
static Napi::Value VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI, pNext));
}
#endif

#ifdef VK_HUAWEI_invocation_mask
static Napi::Value VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_invocationMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI, invocationMask));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkCoarseSampleLocationNV_pixelX_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCoarseSampleLocationNV, pixelX));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkCoarseSampleLocationNV_pixelY_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCoarseSampleLocationNV, pixelY));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkCoarseSampleLocationNV_sample_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCoarseSampleLocationNV, sample));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkCoarseSampleOrderCustomNV_shadingRate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCoarseSampleOrderCustomNV, shadingRate));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkCoarseSampleOrderCustomNV_sampleCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCoarseSampleOrderCustomNV, sampleCount));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkCoarseSampleOrderCustomNV_sampleLocationCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCoarseSampleOrderCustomNV, sampleLocationCount));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkCoarseSampleOrderCustomNV_pSampleLocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCoarseSampleOrderCustomNV, pSampleLocations));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_sampleOrderType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, sampleOrderType));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_customSampleOrderCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, customSampleOrderCount));
}
#endif

#ifdef VK_NV_shading_rate_image
static Napi::Value VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_pCustomSampleOrders_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, pCustomSampleOrders));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, sType));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesNV_taskShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, taskShader));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesNV_meshShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, meshShader));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, sType));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxDrawMeshTasksCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxDrawMeshTasksCount));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskWorkGroupInvocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskWorkGroupInvocations));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskWorkGroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskWorkGroupSize));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskTotalMemorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskTotalMemorySize));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskOutputCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskOutputCount));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshWorkGroupInvocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshWorkGroupInvocations));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshWorkGroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshWorkGroupSize));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshTotalMemorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshTotalMemorySize));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshOutputVertices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshOutputVertices));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshOutputPrimitives_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshOutputPrimitives));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshMultiviewViewCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshMultiviewViewCount));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_meshOutputPerVertexGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, meshOutputPerVertexGranularity));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesNV_meshOutputPerPrimitiveGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, meshOutputPerPrimitiveGranularity));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkDrawMeshTasksIndirectCommandNV_taskCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawMeshTasksIndirectCommandNV, taskCount));
}
#endif

#ifdef VK_NV_mesh_shader
static Napi::Value VkDrawMeshTasksIndirectCommandNV_firstTask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawMeshTasksIndirectCommandNV, firstTask));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesEXT_taskShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, taskShader));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesEXT_meshShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, meshShader));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesEXT_multiviewMeshShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, multiviewMeshShader));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesEXT_primitiveFragmentShadingRateMeshShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, primitiveFragmentShadingRateMeshShader));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderFeaturesEXT_meshShaderQueries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, meshShaderQueries));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupTotalCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupTotalCount));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupCount));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupInvocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupInvocations));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupSize));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskPayloadSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskPayloadSize));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskSharedMemorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskSharedMemorySize));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskPayloadAndSharedMemorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskPayloadAndSharedMemorySize));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupTotalCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupTotalCount));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupCount));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupInvocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupInvocations));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupSize));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshSharedMemorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshSharedMemorySize));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshPayloadAndSharedMemorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshPayloadAndSharedMemorySize));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputMemorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputMemorySize));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshPayloadAndOutputMemorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshPayloadAndOutputMemorySize));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputComponents));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputVertices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputVertices));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputPrimitives_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputPrimitives));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputLayers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputLayers));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshMultiviewViewCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshMultiviewViewCount));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_meshOutputPerVertexGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, meshOutputPerVertexGranularity));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_meshOutputPerPrimitiveGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, meshOutputPerPrimitiveGranularity));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxPreferredTaskWorkGroupInvocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxPreferredTaskWorkGroupInvocations));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_maxPreferredMeshWorkGroupInvocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxPreferredMeshWorkGroupInvocations));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_prefersLocalInvocationVertexOutput_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersLocalInvocationVertexOutput));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_prefersLocalInvocationPrimitiveOutput_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersLocalInvocationPrimitiveOutput));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_prefersCompactVertexOutput_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersCompactVertexOutput));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkPhysicalDeviceMeshShaderPropertiesEXT_prefersCompactPrimitiveOutput_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersCompactPrimitiveOutput));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkDrawMeshTasksIndirectCommandEXT_groupCountX_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawMeshTasksIndirectCommandEXT, groupCountX));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkDrawMeshTasksIndirectCommandEXT_groupCountY_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawMeshTasksIndirectCommandEXT, groupCountY));
}
#endif

#ifdef VK_EXT_mesh_shader
static Napi::Value VkDrawMeshTasksIndirectCommandEXT_groupCountZ_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrawMeshTasksIndirectCommandEXT, groupCountZ));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingShaderGroupCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingShaderGroupCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingShaderGroupCreateInfoNV_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, type));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingShaderGroupCreateInfoNV_generalShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, generalShader));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingShaderGroupCreateInfoNV_closestHitShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, closestHitShader));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingShaderGroupCreateInfoNV_anyHitShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, anyHitShader));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingShaderGroupCreateInfoNV_intersectionShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoNV, intersectionShader));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingShaderGroupCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingShaderGroupCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingShaderGroupCreateInfoKHR_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, type));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingShaderGroupCreateInfoKHR_generalShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, generalShader));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingShaderGroupCreateInfoKHR_closestHitShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, closestHitShader));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingShaderGroupCreateInfoKHR_anyHitShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, anyHitShader));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingShaderGroupCreateInfoKHR_intersectionShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, intersectionShader));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingShaderGroupCreateInfoKHR_pShaderGroupCaptureReplayHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingShaderGroupCreateInfoKHR, pShaderGroupCaptureReplayHandle));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, flags));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_stageCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, stageCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_pStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, pStages));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_groupCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, groupCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_pGroups_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, pGroups));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_maxRecursionDepth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, maxRecursionDepth));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_layout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, layout));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_basePipelineHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, basePipelineHandle));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkRayTracingPipelineCreateInfoNV_basePipelineIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoNV, basePipelineIndex));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_stageCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, stageCount));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_pStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pStages));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_groupCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, groupCount));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_pGroups_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pGroups));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_maxPipelineRayRecursionDepth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, maxPipelineRayRecursionDepth));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_pLibraryInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pLibraryInfo));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_pLibraryInterface_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pLibraryInterface));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_pDynamicState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, pDynamicState));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_layout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, layout));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_basePipelineHandle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, basePipelineHandle));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineCreateInfoKHR_basePipelineIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineCreateInfoKHR, basePipelineIndex));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_vertexData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexData));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_vertexOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexOffset));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_vertexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_vertexStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexStride));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_vertexFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, vertexFormat));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_indexData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, indexData));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_indexOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, indexOffset));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_indexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, indexCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_indexType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, indexType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_transformData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, transformData));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryTrianglesNV_transformOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryTrianglesNV, transformOffset));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryAABBNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryAABBNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryAABBNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryAABBNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryAABBNV_aabbData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryAABBNV, aabbData));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryAABBNV_numAABBs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryAABBNV, numAABBs));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryAABBNV_stride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryAABBNV, stride));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryAABBNV_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryAABBNV, offset));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryDataNV_triangles_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryDataNV, triangles));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryDataNV_aabbs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryDataNV, aabbs));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryNV_geometryType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryNV, geometryType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryNV_geometry_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryNV, geometry));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkGeometryNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGeometryNV, flags));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureInfoNV_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, type));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, flags));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureInfoNV_instanceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, instanceCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureInfoNV_geometryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, geometryCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureInfoNV_pGeometries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureInfoNV, pGeometries));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureCreateInfoNV_compactedSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoNV, compactedSize));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureCreateInfoNV_info_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoNV, info));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkBindAccelerationStructureMemoryInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkBindAccelerationStructureMemoryInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkBindAccelerationStructureMemoryInfoNV_accelerationStructure_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, accelerationStructure));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkBindAccelerationStructureMemoryInfoNV_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, memory));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkBindAccelerationStructureMemoryInfoNV_memoryOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, memoryOffset));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkBindAccelerationStructureMemoryInfoNV_deviceIndexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, deviceIndexCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkBindAccelerationStructureMemoryInfoNV_pDeviceIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindAccelerationStructureMemoryInfoNV, pDeviceIndices));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkWriteDescriptorSetAccelerationStructureKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkWriteDescriptorSetAccelerationStructureKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkWriteDescriptorSetAccelerationStructureKHR_accelerationStructureCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureKHR, accelerationStructureCount));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkWriteDescriptorSetAccelerationStructureKHR_pAccelerationStructures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureKHR, pAccelerationStructures));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkWriteDescriptorSetAccelerationStructureNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkWriteDescriptorSetAccelerationStructureNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkWriteDescriptorSetAccelerationStructureNV_accelerationStructureCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureNV, accelerationStructureCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkWriteDescriptorSetAccelerationStructureNV_pAccelerationStructures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkWriteDescriptorSetAccelerationStructureNV, pAccelerationStructures));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureMemoryRequirementsInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureMemoryRequirementsInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureMemoryRequirementsInfoNV_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, type));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkAccelerationStructureMemoryRequirementsInfoNV_accelerationStructure_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, accelerationStructure));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructureFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructureFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructure_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, accelerationStructure));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructureCaptureReplay_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, accelerationStructureCaptureReplay));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructureIndirectBuild_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, accelerationStructureIndirectBuild));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructureHostCommands_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, accelerationStructureHostCommands));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructureFeaturesKHR_descriptorBindingAccelerationStructureUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructureFeaturesKHR, descriptorBindingAccelerationStructureUpdateAfterBind));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelineFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelineFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipeline_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipeline));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipelineShaderGroupHandleCaptureReplay_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineShaderGroupHandleCaptureReplay));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipelineShaderGroupHandleCaptureReplayMixed_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineShaderGroupHandleCaptureReplayMixed));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipelineTraceRaysIndirect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineTraceRaysIndirect));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTraversalPrimitiveCulling_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTraversalPrimitiveCulling));
}
#endif

#ifdef VK_KHR_ray_query
static Napi::Value VkPhysicalDeviceRayQueryFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayQueryFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_ray_query
static Napi::Value VkPhysicalDeviceRayQueryFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayQueryFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_ray_query
static Napi::Value VkPhysicalDeviceRayQueryFeaturesKHR_rayQuery_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayQueryFeaturesKHR, rayQuery));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxGeometryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxGeometryCount));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxInstanceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxInstanceCount));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxPrimitiveCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxPrimitiveCount));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxPerStageDescriptorAccelerationStructures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxPerStageDescriptorAccelerationStructures));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxPerStageDescriptorUpdateAfterBindAccelerationStructures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxPerStageDescriptorUpdateAfterBindAccelerationStructures));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxDescriptorSetAccelerationStructures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxDescriptorSetAccelerationStructures));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxDescriptorSetUpdateAfterBindAccelerationStructures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, maxDescriptorSetUpdateAfterBindAccelerationStructures));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkPhysicalDeviceAccelerationStructurePropertiesKHR_minAccelerationStructureScratchOffsetAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAccelerationStructurePropertiesKHR, minAccelerationStructureScratchOffsetAlignment));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupHandleSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleSize));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxRayRecursionDepth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayRecursionDepth));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxShaderGroupStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxShaderGroupStride));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupBaseAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupBaseAlignment));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupHandleCaptureReplaySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleCaptureReplaySize));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxRayDispatchInvocationCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayDispatchInvocationCount));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupHandleAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleAlignment));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxRayHitAttributeSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayHitAttributeSize));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_shaderGroupHandleSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, shaderGroupHandleSize));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_maxRecursionDepth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxRecursionDepth));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_maxShaderGroupStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxShaderGroupStride));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_shaderGroupBaseAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, shaderGroupBaseAlignment));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_maxGeometryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxGeometryCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_maxInstanceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxInstanceCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_maxTriangleCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxTriangleCount));
}
#endif

#ifdef VK_NV_ray_tracing
static Napi::Value VkPhysicalDeviceRayTracingPropertiesNV_maxDescriptorSetAccelerationStructures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxDescriptorSetAccelerationStructures));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkStridedDeviceAddressRegionKHR_deviceAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStridedDeviceAddressRegionKHR, deviceAddress));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkStridedDeviceAddressRegionKHR_stride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStridedDeviceAddressRegionKHR, stride));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkStridedDeviceAddressRegionKHR_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkStridedDeviceAddressRegionKHR, size));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkTraceRaysIndirectCommandKHR_width_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommandKHR, width));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkTraceRaysIndirectCommandKHR_height_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommandKHR, height));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkTraceRaysIndirectCommandKHR_depth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommandKHR, depth));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_raygenShaderRecordAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, raygenShaderRecordAddress));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_raygenShaderRecordSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, raygenShaderRecordSize));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_missShaderBindingTableAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, missShaderBindingTableAddress));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_missShaderBindingTableSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, missShaderBindingTableSize));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_missShaderBindingTableStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, missShaderBindingTableStride));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_hitShaderBindingTableAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, hitShaderBindingTableAddress));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_hitShaderBindingTableSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, hitShaderBindingTableSize));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_hitShaderBindingTableStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, hitShaderBindingTableStride));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_callableShaderBindingTableAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, callableShaderBindingTableAddress));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_callableShaderBindingTableSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, callableShaderBindingTableSize));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_callableShaderBindingTableStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, callableShaderBindingTableStride));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_width_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, width));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_height_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, height));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkTraceRaysIndirectCommand2KHR_depth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTraceRaysIndirectCommand2KHR, depth));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_rayTracingMaintenance1_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, rayTracingMaintenance1));
}
#endif

#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_rayTracingPipelineTraceRaysIndirect2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, rayTracingPipelineTraceRaysIndirect2));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesListEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesListEXT, sType));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesListEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesListEXT, pNext));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesListEXT_drmFormatModifierCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesListEXT, drmFormatModifierCount));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesListEXT_pDrmFormatModifierProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesListEXT, pDrmFormatModifierProperties));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesEXT_drmFormatModifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifier));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesEXT_drmFormatModifierPlaneCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifierPlaneCount));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesEXT_drmFormatModifierTilingFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifierTilingFeatures));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkPhysicalDeviceImageDrmFormatModifierInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sType));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkPhysicalDeviceImageDrmFormatModifierInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkPhysicalDeviceImageDrmFormatModifierInfoEXT_drmFormatModifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, drmFormatModifier));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkPhysicalDeviceImageDrmFormatModifierInfoEXT_sharingMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sharingMode));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkPhysicalDeviceImageDrmFormatModifierInfoEXT_queueFamilyIndexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, queueFamilyIndexCount));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkPhysicalDeviceImageDrmFormatModifierInfoEXT_pQueueFamilyIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pQueueFamilyIndices));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierListCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierListCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierListCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierListCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierListCreateInfoEXT_drmFormatModifierCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierListCreateInfoEXT, drmFormatModifierCount));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierListCreateInfoEXT_pDrmFormatModifiers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierListCreateInfoEXT, pDrmFormatModifiers));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierExplicitCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierExplicitCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierExplicitCreateInfoEXT_drmFormatModifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifier));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierExplicitCreateInfoEXT_drmFormatModifierPlaneCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifierPlaneCount));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierExplicitCreateInfoEXT_pPlaneLayouts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, pPlaneLayouts));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkImageDrmFormatModifierPropertiesEXT_drmFormatModifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageDrmFormatModifierPropertiesEXT, drmFormatModifier));
}
#endif


static Napi::Value VkImageStencilUsageCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageStencilUsageCreateInfo, sType));
}


static Napi::Value VkImageStencilUsageCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageStencilUsageCreateInfo, pNext));
}


static Napi::Value VkImageStencilUsageCreateInfo_stencilUsage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageStencilUsageCreateInfo, stencilUsage));
}


#ifdef VK_AMD_memory_overallocation_behavior
static Napi::Value VkDeviceMemoryOverallocationCreateInfoAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryOverallocationCreateInfoAMD, sType));
}
#endif

#ifdef VK_AMD_memory_overallocation_behavior
static Napi::Value VkDeviceMemoryOverallocationCreateInfoAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryOverallocationCreateInfoAMD, pNext));
}
#endif

#ifdef VK_AMD_memory_overallocation_behavior
static Napi::Value VkDeviceMemoryOverallocationCreateInfoAMD_overallocationBehavior_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryOverallocationCreateInfoAMD, overallocationBehavior));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapFeaturesEXT_fragmentDensityMap_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMap));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapFeaturesEXT_fragmentDensityMapDynamic_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapDynamic));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapFeaturesEXT_fragmentDensityMapNonSubsampledImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapNonSubsampledImages));
}
#endif

#ifdef VK_EXT_fragment_density_map2
static Napi::Value VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_fragment_density_map2
static Napi::Value VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_fragment_density_map2
static Napi::Value VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_fragmentDensityMapDeferred_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, fragmentDensityMapDeferred));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM, sType));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM, pNext));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_fragmentDensityMapOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM, fragmentDensityMapOffset));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapPropertiesEXT_minFragmentDensityTexelSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, minFragmentDensityTexelSize));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapPropertiesEXT_maxFragmentDensityTexelSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, maxFragmentDensityTexelSize));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkPhysicalDeviceFragmentDensityMapPropertiesEXT_fragmentDensityInvocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, fragmentDensityInvocations));
}
#endif

#ifdef VK_EXT_fragment_density_map2
static Napi::Value VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_fragment_density_map2
static Napi::Value VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_fragment_density_map2
static Napi::Value VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_subsampledLoads_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, subsampledLoads));
}
#endif

#ifdef VK_EXT_fragment_density_map2
static Napi::Value VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_subsampledCoarseReconstructionEarlyAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, subsampledCoarseReconstructionEarlyAccess));
}
#endif

#ifdef VK_EXT_fragment_density_map2
static Napi::Value VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_maxSubsampledArrayLayers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, maxSubsampledArrayLayers));
}
#endif

#ifdef VK_EXT_fragment_density_map2
static Napi::Value VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_maxDescriptorSetSubsampledSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, maxDescriptorSetSubsampledSamplers));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM, sType));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM, pNext));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_fragmentDensityOffsetGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM, fragmentDensityOffsetGranularity));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkRenderPassFragmentDensityMapCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkRenderPassFragmentDensityMapCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_fragment_density_map
static Napi::Value VkRenderPassFragmentDensityMapCreateInfoEXT_fragmentDensityMapAttachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, fragmentDensityMapAttachment));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkSubpassFragmentDensityMapOffsetEndInfoQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassFragmentDensityMapOffsetEndInfoQCOM, sType));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkSubpassFragmentDensityMapOffsetEndInfoQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassFragmentDensityMapOffsetEndInfoQCOM, pNext));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkSubpassFragmentDensityMapOffsetEndInfoQCOM_fragmentDensityOffsetCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassFragmentDensityMapOffsetEndInfoQCOM, fragmentDensityOffsetCount));
}
#endif

#ifdef VK_QCOM_fragment_density_map_offset
static Napi::Value VkSubpassFragmentDensityMapOffsetEndInfoQCOM_pFragmentDensityOffsets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassFragmentDensityMapOffsetEndInfoQCOM, pFragmentDensityOffsets));
}
#endif


static Napi::Value VkPhysicalDeviceScalarBlockLayoutFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceScalarBlockLayoutFeatures, sType));
}


static Napi::Value VkPhysicalDeviceScalarBlockLayoutFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceScalarBlockLayoutFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceScalarBlockLayoutFeatures_scalarBlockLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceScalarBlockLayoutFeatures, scalarBlockLayout));
}


#ifdef VK_KHR_surface_protected_capabilities
static Napi::Value VkSurfaceProtectedCapabilitiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceProtectedCapabilitiesKHR, sType));
}
#endif

#ifdef VK_KHR_surface_protected_capabilities
static Napi::Value VkSurfaceProtectedCapabilitiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceProtectedCapabilitiesKHR, pNext));
}
#endif

#ifdef VK_KHR_surface_protected_capabilities
static Napi::Value VkSurfaceProtectedCapabilitiesKHR_supportsProtected_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceProtectedCapabilitiesKHR, supportsProtected));
}
#endif


static Napi::Value VkPhysicalDeviceUniformBufferStandardLayoutFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, sType));
}


static Napi::Value VkPhysicalDeviceUniformBufferStandardLayoutFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceUniformBufferStandardLayoutFeatures_uniformBufferStandardLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, uniformBufferStandardLayout));
}


#ifdef VK_EXT_depth_clip_enable
static Napi::Value VkPhysicalDeviceDepthClipEnableFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClipEnableFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_depth_clip_enable
static Napi::Value VkPhysicalDeviceDepthClipEnableFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClipEnableFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_depth_clip_enable
static Napi::Value VkPhysicalDeviceDepthClipEnableFeaturesEXT_depthClipEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClipEnableFeaturesEXT, depthClipEnable));
}
#endif

#ifdef VK_EXT_depth_clip_enable
static Napi::Value VkPipelineRasterizationDepthClipStateCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_depth_clip_enable
static Napi::Value VkPipelineRasterizationDepthClipStateCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_depth_clip_enable
static Napi::Value VkPipelineRasterizationDepthClipStateCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, flags));
}
#endif

#ifdef VK_EXT_depth_clip_enable
static Napi::Value VkPipelineRasterizationDepthClipStateCreateInfoEXT_depthClipEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, depthClipEnable));
}
#endif

#ifdef VK_EXT_memory_budget
static Napi::Value VkPhysicalDeviceMemoryBudgetPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_memory_budget
static Napi::Value VkPhysicalDeviceMemoryBudgetPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_memory_budget
static Napi::Value VkPhysicalDeviceMemoryBudgetPropertiesEXT_heapBudget_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapBudget));
}
#endif

#ifdef VK_EXT_memory_budget
static Napi::Value VkPhysicalDeviceMemoryBudgetPropertiesEXT_heapUsage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapUsage));
}
#endif

#ifdef VK_EXT_memory_priority
static Napi::Value VkPhysicalDeviceMemoryPriorityFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_memory_priority
static Napi::Value VkPhysicalDeviceMemoryPriorityFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_memory_priority
static Napi::Value VkPhysicalDeviceMemoryPriorityFeaturesEXT_memoryPriority_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, memoryPriority));
}
#endif

#ifdef VK_EXT_memory_priority
static Napi::Value VkMemoryPriorityAllocateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryPriorityAllocateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_memory_priority
static Napi::Value VkMemoryPriorityAllocateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryPriorityAllocateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_memory_priority
static Napi::Value VkMemoryPriorityAllocateInfoEXT_priority_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryPriorityAllocateInfoEXT, priority));
}
#endif

#ifdef VK_EXT_pageable_device_local_memory
static Napi::Value VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_pageable_device_local_memory
static Napi::Value VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_pageable_device_local_memory
static Napi::Value VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_pageableDeviceLocalMemory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT, pageableDeviceLocalMemory));
}
#endif


static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, sType));
}


static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeatures_bufferDeviceAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddress));
}


static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeatures_bufferDeviceAddressCaptureReplay_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddressCaptureReplay));
}


static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeatures_bufferDeviceAddressMultiDevice_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddressMultiDevice));
}


#ifdef VK_EXT_buffer_device_address
static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_buffer_device_address
static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_buffer_device_address
static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_bufferDeviceAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, bufferDeviceAddress));
}
#endif

#ifdef VK_EXT_buffer_device_address
static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_bufferDeviceAddressCaptureReplay_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, bufferDeviceAddressCaptureReplay));
}
#endif

#ifdef VK_EXT_buffer_device_address
static Napi::Value VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_bufferDeviceAddressMultiDevice_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, bufferDeviceAddressMultiDevice));
}
#endif



static Napi::Value VkBufferDeviceAddressInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfo, sType));
}


static Napi::Value VkBufferDeviceAddressInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfo, pNext));
}


static Napi::Value VkBufferDeviceAddressInfo_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferDeviceAddressInfo, buffer));
}




static Napi::Value VkBufferOpaqueCaptureAddressCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferOpaqueCaptureAddressCreateInfo, sType));
}


static Napi::Value VkBufferOpaqueCaptureAddressCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferOpaqueCaptureAddressCreateInfo, pNext));
}


static Napi::Value VkBufferOpaqueCaptureAddressCreateInfo_opaqueCaptureAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferOpaqueCaptureAddressCreateInfo, opaqueCaptureAddress));
}


#ifdef VK_EXT_buffer_device_address
static Napi::Value VkBufferDeviceAddressCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferDeviceAddressCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_buffer_device_address
static Napi::Value VkBufferDeviceAddressCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferDeviceAddressCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_buffer_device_address
static Napi::Value VkBufferDeviceAddressCreateInfoEXT_deviceAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferDeviceAddressCreateInfoEXT, deviceAddress));
}
#endif

#ifdef VK_EXT_filter_cubic
static Napi::Value VkPhysicalDeviceImageViewImageFormatInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, sType));
}
#endif

#ifdef VK_EXT_filter_cubic
static Napi::Value VkPhysicalDeviceImageViewImageFormatInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_filter_cubic
static Napi::Value VkPhysicalDeviceImageViewImageFormatInfoEXT_imageViewType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, imageViewType));
}
#endif

#ifdef VK_EXT_filter_cubic
static Napi::Value VkFilterCubicImageViewImageFormatPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_filter_cubic
static Napi::Value VkFilterCubicImageViewImageFormatPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_filter_cubic
static Napi::Value VkFilterCubicImageViewImageFormatPropertiesEXT_filterCubic_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubic));
}
#endif

#ifdef VK_EXT_filter_cubic
static Napi::Value VkFilterCubicImageViewImageFormatPropertiesEXT_filterCubicMinmax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubicMinmax));
}
#endif


static Napi::Value VkPhysicalDeviceImagelessFramebufferFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImagelessFramebufferFeatures, sType));
}


static Napi::Value VkPhysicalDeviceImagelessFramebufferFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImagelessFramebufferFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceImagelessFramebufferFeatures_imagelessFramebuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImagelessFramebufferFeatures, imagelessFramebuffer));
}



static Napi::Value VkFramebufferAttachmentsCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfo, sType));
}


static Napi::Value VkFramebufferAttachmentsCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfo, pNext));
}


static Napi::Value VkFramebufferAttachmentsCreateInfo_attachmentImageInfoCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfo, attachmentImageInfoCount));
}


static Napi::Value VkFramebufferAttachmentsCreateInfo_pAttachmentImageInfos_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentsCreateInfo, pAttachmentImageInfos));
}



static Napi::Value VkFramebufferAttachmentImageInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, sType));
}


static Napi::Value VkFramebufferAttachmentImageInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, pNext));
}


static Napi::Value VkFramebufferAttachmentImageInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, flags));
}


static Napi::Value VkFramebufferAttachmentImageInfo_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, usage));
}


static Napi::Value VkFramebufferAttachmentImageInfo_width_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, width));
}


static Napi::Value VkFramebufferAttachmentImageInfo_height_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, height));
}


static Napi::Value VkFramebufferAttachmentImageInfo_layerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, layerCount));
}


static Napi::Value VkFramebufferAttachmentImageInfo_viewFormatCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, viewFormatCount));
}


static Napi::Value VkFramebufferAttachmentImageInfo_pViewFormats_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferAttachmentImageInfo, pViewFormats));
}



static Napi::Value VkRenderPassAttachmentBeginInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfo, sType));
}


static Napi::Value VkRenderPassAttachmentBeginInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfo, pNext));
}


static Napi::Value VkRenderPassAttachmentBeginInfo_attachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfo, attachmentCount));
}


static Napi::Value VkRenderPassAttachmentBeginInfo_pAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassAttachmentBeginInfo, pAttachments));
}



static Napi::Value VkPhysicalDeviceTextureCompressionASTCHDRFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, sType));
}


static Napi::Value VkPhysicalDeviceTextureCompressionASTCHDRFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceTextureCompressionASTCHDRFeatures_textureCompressionASTC_HDR_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, textureCompressionASTC_HDR));
}


#ifdef VK_NV_cooperative_matrix
static Napi::Value VkPhysicalDeviceCooperativeMatrixFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, sType));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkPhysicalDeviceCooperativeMatrixFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkPhysicalDeviceCooperativeMatrixFeaturesNV_cooperativeMatrix_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, cooperativeMatrix));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkPhysicalDeviceCooperativeMatrixFeaturesNV_cooperativeMatrixRobustBufferAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, cooperativeMatrixRobustBufferAccess));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkPhysicalDeviceCooperativeMatrixPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixPropertiesNV, sType));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkPhysicalDeviceCooperativeMatrixPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkPhysicalDeviceCooperativeMatrixPropertiesNV_cooperativeMatrixSupportedStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCooperativeMatrixPropertiesNV, cooperativeMatrixSupportedStages));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, sType));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_MSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, MSize));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_NSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, NSize));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_KSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, KSize));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_AType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, AType));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_BType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, BType));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_CType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, CType));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_DType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, DType));
}
#endif

#ifdef VK_NV_cooperative_matrix
static Napi::Value VkCooperativeMatrixPropertiesNV_scope_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCooperativeMatrixPropertiesNV, scope));
}
#endif

#ifdef VK_EXT_ycbcr_image_arrays
static Napi::Value VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_ycbcr_image_arrays
static Napi::Value VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_ycbcr_image_arrays
static Napi::Value VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_ycbcrImageArrays_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, ycbcrImageArrays));
}
#endif

#ifdef VK_NVX_image_view_handle
static Napi::Value VkImageViewHandleInfoNVX_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, sType));
}
#endif

#ifdef VK_NVX_image_view_handle
static Napi::Value VkImageViewHandleInfoNVX_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, pNext));
}
#endif

#ifdef VK_NVX_image_view_handle
static Napi::Value VkImageViewHandleInfoNVX_imageView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, imageView));
}
#endif

#ifdef VK_NVX_image_view_handle
static Napi::Value VkImageViewHandleInfoNVX_descriptorType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, descriptorType));
}
#endif

#ifdef VK_NVX_image_view_handle
static Napi::Value VkImageViewHandleInfoNVX_sampler_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewHandleInfoNVX, sampler));
}
#endif

#ifdef VK_NVX_image_view_handle
static Napi::Value VkImageViewAddressPropertiesNVX_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewAddressPropertiesNVX, sType));
}
#endif

#ifdef VK_NVX_image_view_handle
static Napi::Value VkImageViewAddressPropertiesNVX_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewAddressPropertiesNVX, pNext));
}
#endif

#ifdef VK_NVX_image_view_handle
static Napi::Value VkImageViewAddressPropertiesNVX_deviceAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewAddressPropertiesNVX, deviceAddress));
}
#endif

#ifdef VK_NVX_image_view_handle
static Napi::Value VkImageViewAddressPropertiesNVX_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewAddressPropertiesNVX, size));
}
#endif

#ifdef VK_GGP_frame_token
static Napi::Value VkPresentFrameTokenGGP_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentFrameTokenGGP, sType));
}
#endif

#ifdef VK_GGP_frame_token
static Napi::Value VkPresentFrameTokenGGP_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentFrameTokenGGP, pNext));
}
#endif

#ifdef VK_GGP_frame_token
static Napi::Value VkPresentFrameTokenGGP_frameToken_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPresentFrameTokenGGP, frameToken));
}
#endif


static Napi::Value VkPipelineCreationFeedback_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCreationFeedback, flags));
}


static Napi::Value VkPipelineCreationFeedback_duration_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCreationFeedback, duration));
}



static Napi::Value VkPipelineCreationFeedbackCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfo, sType));
}


static Napi::Value VkPipelineCreationFeedbackCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfo, pNext));
}


static Napi::Value VkPipelineCreationFeedbackCreateInfo_pPipelineCreationFeedback_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfo, pPipelineCreationFeedback));
}


static Napi::Value VkPipelineCreationFeedbackCreateInfo_pipelineStageCreationFeedbackCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfo, pipelineStageCreationFeedbackCount));
}


static Napi::Value VkPipelineCreationFeedbackCreateInfo_pPipelineStageCreationFeedbacks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCreationFeedbackCreateInfo, pPipelineStageCreationFeedbacks));
}


#ifdef VK_EXT_full_screen_exclusive
static Napi::Value VkSurfaceFullScreenExclusiveInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveInfoEXT, sType));
}
#endif

#ifdef VK_EXT_full_screen_exclusive
static Napi::Value VkSurfaceFullScreenExclusiveInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_full_screen_exclusive
static Napi::Value VkSurfaceFullScreenExclusiveInfoEXT_fullScreenExclusive_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveInfoEXT, fullScreenExclusive));
}
#endif

#ifdef VK_EXT_full_screen_exclusive
static Napi::Value VkSurfaceFullScreenExclusiveWin32InfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveWin32InfoEXT, sType));
}
#endif

#ifdef VK_EXT_full_screen_exclusive
static Napi::Value VkSurfaceFullScreenExclusiveWin32InfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveWin32InfoEXT, pNext));
}
#endif

#ifdef VK_EXT_full_screen_exclusive
static Napi::Value VkSurfaceFullScreenExclusiveWin32InfoEXT_hmonitor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceFullScreenExclusiveWin32InfoEXT, hmonitor));
}
#endif

#ifdef VK_EXT_full_screen_exclusive
static Napi::Value VkSurfaceCapabilitiesFullScreenExclusiveEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesFullScreenExclusiveEXT, sType));
}
#endif

#ifdef VK_EXT_full_screen_exclusive
static Napi::Value VkSurfaceCapabilitiesFullScreenExclusiveEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesFullScreenExclusiveEXT, pNext));
}
#endif

#ifdef VK_EXT_full_screen_exclusive
static Napi::Value VkSurfaceCapabilitiesFullScreenExclusiveEXT_fullScreenExclusiveSupported_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesFullScreenExclusiveEXT, fullScreenExclusiveSupported));
}
#endif

#ifdef VK_NV_present_barrier
static Napi::Value VkPhysicalDevicePresentBarrierFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentBarrierFeaturesNV, sType));
}
#endif

#ifdef VK_NV_present_barrier
static Napi::Value VkPhysicalDevicePresentBarrierFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentBarrierFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_present_barrier
static Napi::Value VkPhysicalDevicePresentBarrierFeaturesNV_presentBarrier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePresentBarrierFeaturesNV, presentBarrier));
}
#endif

#ifdef VK_NV_present_barrier
static Napi::Value VkSurfaceCapabilitiesPresentBarrierNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesPresentBarrierNV, sType));
}
#endif

#ifdef VK_NV_present_barrier
static Napi::Value VkSurfaceCapabilitiesPresentBarrierNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesPresentBarrierNV, pNext));
}
#endif

#ifdef VK_NV_present_barrier
static Napi::Value VkSurfaceCapabilitiesPresentBarrierNV_presentBarrierSupported_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSurfaceCapabilitiesPresentBarrierNV, presentBarrierSupported));
}
#endif

#ifdef VK_NV_present_barrier
static Napi::Value VkSwapchainPresentBarrierCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainPresentBarrierCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_present_barrier
static Napi::Value VkSwapchainPresentBarrierCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainPresentBarrierCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_present_barrier
static Napi::Value VkSwapchainPresentBarrierCreateInfoNV_presentBarrierEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSwapchainPresentBarrierCreateInfoNV, presentBarrierEnable));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPhysicalDevicePerformanceQueryFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPhysicalDevicePerformanceQueryFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPhysicalDevicePerformanceQueryFeaturesKHR_performanceCounterQueryPools_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryFeaturesKHR, performanceCounterQueryPools));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPhysicalDevicePerformanceQueryFeaturesKHR_performanceCounterMultipleQueryPools_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryFeaturesKHR, performanceCounterMultipleQueryPools));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPhysicalDevicePerformanceQueryPropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryPropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPhysicalDevicePerformanceQueryPropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryPropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPhysicalDevicePerformanceQueryPropertiesKHR_allowCommandBufferQueryCopies_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePerformanceQueryPropertiesKHR, allowCommandBufferQueryCopies));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, sType));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, pNext));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterKHR_unit_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, unit));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterKHR_scope_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, scope));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterKHR_storage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, storage));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterKHR_uuid_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterKHR, uuid));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterDescriptionKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, sType));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterDescriptionKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, pNext));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterDescriptionKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, flags));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterDescriptionKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, name));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterDescriptionKHR_category_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, category));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceCounterDescriptionKHR_description_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceCounterDescriptionKHR, description));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkQueryPoolPerformanceCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkQueryPoolPerformanceCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkQueryPoolPerformanceCreateInfoKHR_queueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, queueFamilyIndex));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkQueryPoolPerformanceCreateInfoKHR_counterIndexCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, counterIndexCount));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkQueryPoolPerformanceCreateInfoKHR_pCounterIndices_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolPerformanceCreateInfoKHR, pCounterIndices));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkAcquireProfilingLockInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireProfilingLockInfoKHR, sType));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkAcquireProfilingLockInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireProfilingLockInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkAcquireProfilingLockInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireProfilingLockInfoKHR, flags));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkAcquireProfilingLockInfoKHR_timeout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAcquireProfilingLockInfoKHR, timeout));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceQuerySubmitInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceQuerySubmitInfoKHR, sType));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceQuerySubmitInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceQuerySubmitInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_performance_query
static Napi::Value VkPerformanceQuerySubmitInfoKHR_counterPassIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceQuerySubmitInfoKHR, counterPassIndex));
}
#endif

#ifdef VK_EXT_headless_surface
static Napi::Value VkHeadlessSurfaceCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHeadlessSurfaceCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_headless_surface
static Napi::Value VkHeadlessSurfaceCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHeadlessSurfaceCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_headless_surface
static Napi::Value VkHeadlessSurfaceCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkHeadlessSurfaceCreateInfoEXT, flags));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkPhysicalDeviceCoverageReductionModeFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCoverageReductionModeFeaturesNV, sType));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkPhysicalDeviceCoverageReductionModeFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCoverageReductionModeFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkPhysicalDeviceCoverageReductionModeFeaturesNV_coverageReductionMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCoverageReductionModeFeaturesNV, coverageReductionMode));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkPipelineCoverageReductionStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageReductionStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkPipelineCoverageReductionStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageReductionStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkPipelineCoverageReductionStateCreateInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageReductionStateCreateInfoNV, flags));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkPipelineCoverageReductionStateCreateInfoNV_coverageReductionMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCoverageReductionStateCreateInfoNV, coverageReductionMode));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkFramebufferMixedSamplesCombinationNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, sType));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkFramebufferMixedSamplesCombinationNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, pNext));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkFramebufferMixedSamplesCombinationNV_coverageReductionMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, coverageReductionMode));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkFramebufferMixedSamplesCombinationNV_rasterizationSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, rasterizationSamples));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkFramebufferMixedSamplesCombinationNV_depthStencilSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, depthStencilSamples));
}
#endif

#ifdef VK_NV_coverage_reduction_mode
static Napi::Value VkFramebufferMixedSamplesCombinationNV_colorSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFramebufferMixedSamplesCombinationNV, colorSamples));
}
#endif

#ifdef VK_INTEL_shader_integer_functions2
static Napi::Value VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, sType));
}
#endif

#ifdef VK_INTEL_shader_integer_functions2
static Napi::Value VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, pNext));
}
#endif

#ifdef VK_INTEL_shader_integer_functions2
static Napi::Value VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_shaderIntegerFunctions2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, shaderIntegerFunctions2));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceValueINTEL_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceValueINTEL, type));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceValueINTEL_data_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceValueINTEL, data));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkInitializePerformanceApiInfoINTEL_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInitializePerformanceApiInfoINTEL, sType));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkInitializePerformanceApiInfoINTEL_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInitializePerformanceApiInfoINTEL, pNext));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkInitializePerformanceApiInfoINTEL_pUserData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkInitializePerformanceApiInfoINTEL, pUserData));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkQueryPoolPerformanceQueryCreateInfoINTEL_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolPerformanceQueryCreateInfoINTEL, sType));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkQueryPoolPerformanceQueryCreateInfoINTEL_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolPerformanceQueryCreateInfoINTEL, pNext));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkQueryPoolPerformanceQueryCreateInfoINTEL_performanceCountersSampling_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueryPoolPerformanceQueryCreateInfoINTEL, performanceCountersSampling));
}
#endif


#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceMarkerInfoINTEL_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceMarkerInfoINTEL, sType));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceMarkerInfoINTEL_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceMarkerInfoINTEL, pNext));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceMarkerInfoINTEL_marker_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceMarkerInfoINTEL, marker));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceStreamMarkerInfoINTEL_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceStreamMarkerInfoINTEL, sType));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceStreamMarkerInfoINTEL_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceStreamMarkerInfoINTEL, pNext));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceStreamMarkerInfoINTEL_marker_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceStreamMarkerInfoINTEL, marker));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceOverrideInfoINTEL_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, sType));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceOverrideInfoINTEL_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, pNext));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceOverrideInfoINTEL_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, type));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceOverrideInfoINTEL_enable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, enable));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceOverrideInfoINTEL_parameter_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceOverrideInfoINTEL, parameter));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceConfigurationAcquireInfoINTEL_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceConfigurationAcquireInfoINTEL, sType));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceConfigurationAcquireInfoINTEL_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceConfigurationAcquireInfoINTEL, pNext));
}
#endif

#ifdef VK_INTEL_performance_query
static Napi::Value VkPerformanceConfigurationAcquireInfoINTEL_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPerformanceConfigurationAcquireInfoINTEL, type));
}
#endif

#ifdef VK_KHR_shader_clock
static Napi::Value VkPhysicalDeviceShaderClockFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_shader_clock
static Napi::Value VkPhysicalDeviceShaderClockFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_shader_clock
static Napi::Value VkPhysicalDeviceShaderClockFeaturesKHR_shaderSubgroupClock_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, shaderSubgroupClock));
}
#endif

#ifdef VK_KHR_shader_clock
static Napi::Value VkPhysicalDeviceShaderClockFeaturesKHR_shaderDeviceClock_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, shaderDeviceClock));
}
#endif

#ifdef VK_EXT_index_type_uint8
static Napi::Value VkPhysicalDeviceIndexTypeUint8FeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_index_type_uint8
static Napi::Value VkPhysicalDeviceIndexTypeUint8FeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_index_type_uint8
static Napi::Value VkPhysicalDeviceIndexTypeUint8FeaturesEXT_indexTypeUint8_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, indexTypeUint8));
}
#endif

#ifdef VK_NV_shader_sm_builtins
static Napi::Value VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, sType));
}
#endif

#ifdef VK_NV_shader_sm_builtins
static Napi::Value VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_shader_sm_builtins
static Napi::Value VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_shaderSMCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, shaderSMCount));
}
#endif

#ifdef VK_NV_shader_sm_builtins
static Napi::Value VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_shaderWarpsPerSM_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, shaderWarpsPerSM));
}
#endif

#ifdef VK_NV_shader_sm_builtins
static Napi::Value VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, sType));
}
#endif

#ifdef VK_NV_shader_sm_builtins
static Napi::Value VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_shader_sm_builtins
static Napi::Value VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_shaderSMBuiltins_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, shaderSMBuiltins));
}
#endif

#ifdef VK_EXT_fragment_shader_interlock
static Napi::Value VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_fragment_shader_interlock
static Napi::Value VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_fragment_shader_interlock
static Napi::Value VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_fragmentShaderSampleInterlock_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderSampleInterlock));
}
#endif

#ifdef VK_EXT_fragment_shader_interlock
static Napi::Value VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_fragmentShaderPixelInterlock_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderPixelInterlock));
}
#endif

#ifdef VK_EXT_fragment_shader_interlock
static Napi::Value VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_fragmentShaderShadingRateInterlock_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderShadingRateInterlock));
}
#endif


static Napi::Value VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, sType));
}


static Napi::Value VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_separateDepthStencilLayouts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, separateDepthStencilLayouts));
}



static Napi::Value VkAttachmentReferenceStencilLayout_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReferenceStencilLayout, sType));
}


static Napi::Value VkAttachmentReferenceStencilLayout_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReferenceStencilLayout, pNext));
}


static Napi::Value VkAttachmentReferenceStencilLayout_stencilLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentReferenceStencilLayout, stencilLayout));
}

#ifdef VK_EXT_primitive_topology_list_restart
static Napi::Value VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_primitive_topology_list_restart
static Napi::Value VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_primitive_topology_list_restart
static Napi::Value VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_primitiveTopologyListRestart_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, primitiveTopologyListRestart));
}
#endif

#ifdef VK_EXT_primitive_topology_list_restart
static Napi::Value VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_primitiveTopologyPatchListRestart_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, primitiveTopologyPatchListRestart));
}
#endif



static Napi::Value VkAttachmentDescriptionStencilLayout_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayout, sType));
}


static Napi::Value VkAttachmentDescriptionStencilLayout_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayout, pNext));
}


static Napi::Value VkAttachmentDescriptionStencilLayout_stencilInitialLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayout, stencilInitialLayout));
}


static Napi::Value VkAttachmentDescriptionStencilLayout_stencilFinalLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentDescriptionStencilLayout, stencilFinalLayout));
}


#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_pipelineExecutableInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR, pipelineExecutableInfo));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineInfoKHR, sType));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineInfoKHR_pipeline_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineInfoKHR, pipeline));
}
#endif


#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutablePropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutablePropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutablePropertiesKHR_stages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, stages));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutablePropertiesKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, name));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutablePropertiesKHR_description_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, description));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutablePropertiesKHR_subgroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutablePropertiesKHR, subgroupSize));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInfoKHR, sType));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInfoKHR_pipeline_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInfoKHR, pipeline));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInfoKHR_executableIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInfoKHR, executableIndex));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableStatisticKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, sType));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableStatisticKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, pNext));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableStatisticKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, name));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableStatisticKHR_description_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, description));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableStatisticKHR_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, format));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableStatisticKHR_value_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableStatisticKHR, value));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInternalRepresentationKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, sType));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInternalRepresentationKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, pNext));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInternalRepresentationKHR_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, name));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInternalRepresentationKHR_description_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, description));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInternalRepresentationKHR_isText_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, isText));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInternalRepresentationKHR_dataSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, dataSize));
}
#endif

#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value VkPipelineExecutableInternalRepresentationKHR_pData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineExecutableInternalRepresentationKHR, pData));
}
#endif


static Napi::Value VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, sType));
}


static Napi::Value VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_shaderDemoteToHelperInvocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, shaderDemoteToHelperInvocation));
}


#ifdef VK_EXT_texel_buffer_alignment
static Napi::Value VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_texel_buffer_alignment
static Napi::Value VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_texel_buffer_alignment
static Napi::Value VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_texelBufferAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, texelBufferAlignment));
}
#endif


static Napi::Value VkPhysicalDeviceTexelBufferAlignmentProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, sType));
}


static Napi::Value VkPhysicalDeviceTexelBufferAlignmentProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, pNext));
}


static Napi::Value VkPhysicalDeviceTexelBufferAlignmentProperties_storageTexelBufferOffsetAlignmentBytes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, storageTexelBufferOffsetAlignmentBytes));
}


static Napi::Value VkPhysicalDeviceTexelBufferAlignmentProperties_storageTexelBufferOffsetSingleTexelAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, storageTexelBufferOffsetSingleTexelAlignment));
}


static Napi::Value VkPhysicalDeviceTexelBufferAlignmentProperties_uniformTexelBufferOffsetAlignmentBytes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, uniformTexelBufferOffsetAlignmentBytes));
}


static Napi::Value VkPhysicalDeviceTexelBufferAlignmentProperties_uniformTexelBufferOffsetSingleTexelAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, uniformTexelBufferOffsetSingleTexelAlignment));
}



static Napi::Value VkPhysicalDeviceSubgroupSizeControlFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlFeatures, sType));
}


static Napi::Value VkPhysicalDeviceSubgroupSizeControlFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceSubgroupSizeControlFeatures_subgroupSizeControl_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlFeatures, subgroupSizeControl));
}


static Napi::Value VkPhysicalDeviceSubgroupSizeControlFeatures_computeFullSubgroups_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlFeatures, computeFullSubgroups));
}



static Napi::Value VkPhysicalDeviceSubgroupSizeControlProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, sType));
}


static Napi::Value VkPhysicalDeviceSubgroupSizeControlProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, pNext));
}


static Napi::Value VkPhysicalDeviceSubgroupSizeControlProperties_minSubgroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, minSubgroupSize));
}


static Napi::Value VkPhysicalDeviceSubgroupSizeControlProperties_maxSubgroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, maxSubgroupSize));
}


static Napi::Value VkPhysicalDeviceSubgroupSizeControlProperties_maxComputeWorkgroupSubgroups_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, maxComputeWorkgroupSubgroups));
}


static Napi::Value VkPhysicalDeviceSubgroupSizeControlProperties_requiredSubgroupSizeStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, requiredSubgroupSizeStages));
}



static Napi::Value VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo, sType));
}


static Napi::Value VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo, pNext));
}


static Napi::Value VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_requiredSubgroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo, requiredSubgroupSize));
}


#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkSubpassShadingPipelineCreateInfoHUAWEI_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassShadingPipelineCreateInfoHUAWEI, sType));
}
#endif

#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkSubpassShadingPipelineCreateInfoHUAWEI_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassShadingPipelineCreateInfoHUAWEI, pNext));
}
#endif

#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkSubpassShadingPipelineCreateInfoHUAWEI_renderPass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassShadingPipelineCreateInfoHUAWEI, renderPass));
}
#endif

#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkSubpassShadingPipelineCreateInfoHUAWEI_subpass_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassShadingPipelineCreateInfoHUAWEI, subpass));
}
#endif

#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI, sType));
}
#endif

#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI, pNext));
}
#endif

#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_maxSubpassShadingWorkgroupSizeAspectRatio_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI, maxSubpassShadingWorkgroupSizeAspectRatio));
}
#endif


static Napi::Value VkMemoryOpaqueCaptureAddressAllocateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryOpaqueCaptureAddressAllocateInfo, sType));
}


static Napi::Value VkMemoryOpaqueCaptureAddressAllocateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryOpaqueCaptureAddressAllocateInfo, pNext));
}


static Napi::Value VkMemoryOpaqueCaptureAddressAllocateInfo_opaqueCaptureAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryOpaqueCaptureAddressAllocateInfo, opaqueCaptureAddress));
}



static Napi::Value VkDeviceMemoryOpaqueCaptureAddressInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryOpaqueCaptureAddressInfo, sType));
}


static Napi::Value VkDeviceMemoryOpaqueCaptureAddressInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryOpaqueCaptureAddressInfo, pNext));
}


static Napi::Value VkDeviceMemoryOpaqueCaptureAddressInfo_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceMemoryOpaqueCaptureAddressInfo, memory));
}


#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationFeaturesEXT_rectangularLines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, rectangularLines));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationFeaturesEXT_bresenhamLines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, bresenhamLines));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationFeaturesEXT_smoothLines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, smoothLines));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationFeaturesEXT_stippledRectangularLines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledRectangularLines));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationFeaturesEXT_stippledBresenhamLines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledBresenhamLines));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationFeaturesEXT_stippledSmoothLines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledSmoothLines));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPhysicalDeviceLineRasterizationPropertiesEXT_lineSubPixelPrecisionBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLineRasterizationPropertiesEXT, lineSubPixelPrecisionBits));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPipelineRasterizationLineStateCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPipelineRasterizationLineStateCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPipelineRasterizationLineStateCreateInfoEXT_lineRasterizationMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, lineRasterizationMode));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPipelineRasterizationLineStateCreateInfoEXT_stippledLineEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, stippledLineEnable));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPipelineRasterizationLineStateCreateInfoEXT_lineStippleFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, lineStippleFactor));
}
#endif

#ifdef VK_EXT_line_rasterization
static Napi::Value VkPipelineRasterizationLineStateCreateInfoEXT_lineStipplePattern_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, lineStipplePattern));
}
#endif


static Napi::Value VkPhysicalDevicePipelineCreationCacheControlFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineCreationCacheControlFeatures, sType));
}


static Napi::Value VkPhysicalDevicePipelineCreationCacheControlFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineCreationCacheControlFeatures, pNext));
}


static Napi::Value VkPhysicalDevicePipelineCreationCacheControlFeatures_pipelineCreationCacheControl_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineCreationCacheControlFeatures, pipelineCreationCacheControl));
}



static Napi::Value VkPhysicalDeviceVulkan11Features_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, sType));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, pNext));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_storageBuffer16BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, storageBuffer16BitAccess));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_uniformAndStorageBuffer16BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, uniformAndStorageBuffer16BitAccess));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_storagePushConstant16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, storagePushConstant16));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_storageInputOutput16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, storageInputOutput16));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_multiview_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, multiview));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_multiviewGeometryShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, multiviewGeometryShader));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_multiviewTessellationShader_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, multiviewTessellationShader));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_variablePointersStorageBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, variablePointersStorageBuffer));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_variablePointers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, variablePointers));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_protectedMemory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, protectedMemory));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_samplerYcbcrConversion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, samplerYcbcrConversion));
}


static Napi::Value VkPhysicalDeviceVulkan11Features_shaderDrawParameters_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Features, shaderDrawParameters));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, sType));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, pNext));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_deviceUUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, deviceUUID));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_driverUUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, driverUUID));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_deviceLUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, deviceLUID));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_deviceNodeMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, deviceNodeMask));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_deviceLUIDValid_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, deviceLUIDValid));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_subgroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, subgroupSize));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_subgroupSupportedStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, subgroupSupportedStages));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_subgroupSupportedOperations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, subgroupSupportedOperations));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_subgroupQuadOperationsInAllStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, subgroupQuadOperationsInAllStages));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_pointClippingBehavior_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, pointClippingBehavior));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_maxMultiviewViewCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, maxMultiviewViewCount));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_maxMultiviewInstanceIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, maxMultiviewInstanceIndex));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_protectedNoFault_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, protectedNoFault));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_maxPerSetDescriptors_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, maxPerSetDescriptors));
}


static Napi::Value VkPhysicalDeviceVulkan11Properties_maxMemoryAllocationSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan11Properties, maxMemoryAllocationSize));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, sType));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, pNext));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_samplerMirrorClampToEdge_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, samplerMirrorClampToEdge));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_drawIndirectCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, drawIndirectCount));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_storageBuffer8BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, storageBuffer8BitAccess));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_uniformAndStorageBuffer8BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, uniformAndStorageBuffer8BitAccess));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_storagePushConstant8_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, storagePushConstant8));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderBufferInt64Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderBufferInt64Atomics));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderSharedInt64Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderSharedInt64Atomics));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderFloat16));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderInt8_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderInt8));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderInputAttachmentArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderInputAttachmentArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderUniformTexelBufferArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderUniformTexelBufferArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderStorageTexelBufferArrayDynamicIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageTexelBufferArrayDynamicIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderUniformBufferArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderUniformBufferArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderSampledImageArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderSampledImageArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderStorageBufferArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageBufferArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderStorageImageArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageImageArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderInputAttachmentArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderInputAttachmentArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderUniformTexelBufferArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderUniformTexelBufferArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderStorageTexelBufferArrayNonUniformIndexing_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageTexelBufferArrayNonUniformIndexing));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorBindingUniformBufferUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingUniformBufferUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorBindingSampledImageUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingSampledImageUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorBindingStorageImageUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageImageUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorBindingStorageBufferUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageBufferUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorBindingUniformTexelBufferUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingUniformTexelBufferUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorBindingStorageTexelBufferUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageTexelBufferUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorBindingUpdateUnusedWhilePending_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingUpdateUnusedWhilePending));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorBindingPartiallyBound_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingPartiallyBound));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_descriptorBindingVariableDescriptorCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingVariableDescriptorCount));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_runtimeDescriptorArray_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, runtimeDescriptorArray));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_samplerFilterMinmax_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, samplerFilterMinmax));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_scalarBlockLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, scalarBlockLayout));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_imagelessFramebuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, imagelessFramebuffer));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_uniformBufferStandardLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, uniformBufferStandardLayout));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderSubgroupExtendedTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderSubgroupExtendedTypes));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_separateDepthStencilLayouts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, separateDepthStencilLayouts));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_hostQueryReset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, hostQueryReset));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_timelineSemaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, timelineSemaphore));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_bufferDeviceAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, bufferDeviceAddress));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_bufferDeviceAddressCaptureReplay_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, bufferDeviceAddressCaptureReplay));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_bufferDeviceAddressMultiDevice_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, bufferDeviceAddressMultiDevice));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_vulkanMemoryModel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, vulkanMemoryModel));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_vulkanMemoryModelDeviceScope_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, vulkanMemoryModelDeviceScope));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_vulkanMemoryModelAvailabilityVisibilityChains_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, vulkanMemoryModelAvailabilityVisibilityChains));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderOutputViewportIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderOutputViewportIndex));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_shaderOutputLayer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, shaderOutputLayer));
}


static Napi::Value VkPhysicalDeviceVulkan12Features_subgroupBroadcastDynamicId_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Features, subgroupBroadcastDynamicId));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, sType));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, pNext));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_driverID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, driverID));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_driverName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, driverName));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_driverInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, driverInfo));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_conformanceVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, conformanceVersion));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_denormBehaviorIndependence_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, denormBehaviorIndependence));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_roundingModeIndependence_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, roundingModeIndependence));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderSignedZeroInfNanPreserveFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat16));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderSignedZeroInfNanPreserveFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat32));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderSignedZeroInfNanPreserveFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat64));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderDenormPreserveFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat16));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderDenormPreserveFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat32));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderDenormPreserveFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat64));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderDenormFlushToZeroFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat16));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderDenormFlushToZeroFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat32));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderDenormFlushToZeroFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat64));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTEFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat16));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTEFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat32));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTEFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat64));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTZFloat16_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat16));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTZFloat32_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat32));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTZFloat64_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat64));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxUpdateAfterBindDescriptorsInAllPools_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxUpdateAfterBindDescriptorsInAllPools));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderUniformBufferArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderUniformBufferArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderSampledImageArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderSampledImageArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderStorageBufferArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderStorageBufferArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderStorageImageArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderStorageImageArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_shaderInputAttachmentArrayNonUniformIndexingNative_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, shaderInputAttachmentArrayNonUniformIndexingNative));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_robustBufferAccessUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, robustBufferAccessUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_quadDivergentImplicitLod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, quadDivergentImplicitLod));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindSamplers));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindUniformBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindUniformBuffers));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindStorageBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindStorageBuffers));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindSampledImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindSampledImages));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindStorageImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindStorageImages));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindInputAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindInputAttachments));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxPerStageUpdateAfterBindResources_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageUpdateAfterBindResources));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindSamplers));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindUniformBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindUniformBuffers));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindUniformBuffersDynamic_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindStorageBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageBuffers));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindStorageBuffersDynamic_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindSampledImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindSampledImages));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindStorageImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageImages));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindInputAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindInputAttachments));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_supportedDepthResolveModes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, supportedDepthResolveModes));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_supportedStencilResolveModes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, supportedStencilResolveModes));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_independentResolveNone_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, independentResolveNone));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_independentResolve_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, independentResolve));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_filterMinmaxSingleComponentFormats_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, filterMinmaxSingleComponentFormats));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_filterMinmaxImageComponentMapping_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, filterMinmaxImageComponentMapping));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_maxTimelineSemaphoreValueDifference_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, maxTimelineSemaphoreValueDifference));
}


static Napi::Value VkPhysicalDeviceVulkan12Properties_framebufferIntegerColorSampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan12Properties, framebufferIntegerColorSampleCounts));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, sType));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, pNext));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_robustImageAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, robustImageAccess));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_inlineUniformBlock_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, inlineUniformBlock));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_descriptorBindingInlineUniformBlockUpdateAfterBind_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, descriptorBindingInlineUniformBlockUpdateAfterBind));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_pipelineCreationCacheControl_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, pipelineCreationCacheControl));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_privateData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, privateData));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_shaderDemoteToHelperInvocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, shaderDemoteToHelperInvocation));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_shaderTerminateInvocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, shaderTerminateInvocation));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_subgroupSizeControl_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, subgroupSizeControl));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_computeFullSubgroups_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, computeFullSubgroups));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_synchronization2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, synchronization2));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_textureCompressionASTC_HDR_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, textureCompressionASTC_HDR));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_shaderZeroInitializeWorkgroupMemory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, shaderZeroInitializeWorkgroupMemory));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_dynamicRendering_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, dynamicRendering));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_shaderIntegerDotProduct_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, shaderIntegerDotProduct));
}


static Napi::Value VkPhysicalDeviceVulkan13Features_maintenance4_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Features, maintenance4));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, sType));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, pNext));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_minSubgroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, minSubgroupSize));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_maxSubgroupSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, maxSubgroupSize));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_maxComputeWorkgroupSubgroups_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, maxComputeWorkgroupSubgroups));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_requiredSubgroupSizeStages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, requiredSubgroupSizeStages));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_maxInlineUniformBlockSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, maxInlineUniformBlockSize));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_maxPerStageDescriptorInlineUniformBlocks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, maxPerStageDescriptorInlineUniformBlocks));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_maxDescriptorSetInlineUniformBlocks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, maxDescriptorSetInlineUniformBlocks));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_maxDescriptorSetUpdateAfterBindInlineUniformBlocks_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, maxDescriptorSetUpdateAfterBindInlineUniformBlocks));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_maxInlineUniformTotalSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, maxInlineUniformTotalSize));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct8BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct8BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct8BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct8BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct8BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct8BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct4x8BitPackedUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct4x8BitPackedUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct4x8BitPackedSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct4x8BitPackedSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct4x8BitPackedMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct4x8BitPackedMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct16BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct16BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct16BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct16BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct16BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct16BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct32BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct32BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct32BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct32BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct32BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct32BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct64BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct64BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct64BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct64BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProduct64BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct64BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating8BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating8BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating8BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating16BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating16BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating16BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating32BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating32BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating32BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating64BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating64BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating64BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_storageTexelBufferOffsetAlignmentBytes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, storageTexelBufferOffsetAlignmentBytes));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_storageTexelBufferOffsetSingleTexelAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, storageTexelBufferOffsetSingleTexelAlignment));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_uniformTexelBufferOffsetAlignmentBytes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, uniformTexelBufferOffsetAlignmentBytes));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_uniformTexelBufferOffsetSingleTexelAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, uniformTexelBufferOffsetSingleTexelAlignment));
}


static Napi::Value VkPhysicalDeviceVulkan13Properties_maxBufferSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVulkan13Properties, maxBufferSize));
}

#ifdef VK_AMD_pipeline_compiler_control
static Napi::Value VkPipelineCompilerControlCreateInfoAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCompilerControlCreateInfoAMD, sType));
}
#endif

#ifdef VK_AMD_pipeline_compiler_control
static Napi::Value VkPipelineCompilerControlCreateInfoAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCompilerControlCreateInfoAMD, pNext));
}
#endif

#ifdef VK_AMD_pipeline_compiler_control
static Napi::Value VkPipelineCompilerControlCreateInfoAMD_compilerControlFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineCompilerControlCreateInfoAMD, compilerControlFlags));
}
#endif

#ifdef VK_AMD_device_coherent_memory
static Napi::Value VkPhysicalDeviceCoherentMemoryFeaturesAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCoherentMemoryFeaturesAMD, sType));
}
#endif

#ifdef VK_AMD_device_coherent_memory
static Napi::Value VkPhysicalDeviceCoherentMemoryFeaturesAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCoherentMemoryFeaturesAMD, pNext));
}
#endif

#ifdef VK_AMD_device_coherent_memory
static Napi::Value VkPhysicalDeviceCoherentMemoryFeaturesAMD_deviceCoherentMemory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCoherentMemoryFeaturesAMD, deviceCoherentMemory));
}
#endif


static Napi::Value VkPhysicalDeviceToolProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceToolProperties, sType));
}


static Napi::Value VkPhysicalDeviceToolProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceToolProperties, pNext));
}


static Napi::Value VkPhysicalDeviceToolProperties_name_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceToolProperties, name));
}


static Napi::Value VkPhysicalDeviceToolProperties_version_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceToolProperties, version));
}


static Napi::Value VkPhysicalDeviceToolProperties_purposes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceToolProperties, purposes));
}


static Napi::Value VkPhysicalDeviceToolProperties_description_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceToolProperties, description));
}


static Napi::Value VkPhysicalDeviceToolProperties_layer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceToolProperties, layer));
}


#ifdef VK_EXT_custom_border_color
static Napi::Value VkSamplerCustomBorderColorCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCustomBorderColorCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkSamplerCustomBorderColorCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCustomBorderColorCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkSamplerCustomBorderColorCreateInfoEXT_customBorderColor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCustomBorderColorCreateInfoEXT, customBorderColor));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkSamplerCustomBorderColorCreateInfoEXT_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerCustomBorderColorCreateInfoEXT, format));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkPhysicalDeviceCustomBorderColorPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkPhysicalDeviceCustomBorderColorPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkPhysicalDeviceCustomBorderColorPropertiesEXT_maxCustomBorderColorSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorPropertiesEXT, maxCustomBorderColorSamplers));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkPhysicalDeviceCustomBorderColorFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkPhysicalDeviceCustomBorderColorFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkPhysicalDeviceCustomBorderColorFeaturesEXT_customBorderColors_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorFeaturesEXT, customBorderColors));
}
#endif

#ifdef VK_EXT_custom_border_color
static Napi::Value VkPhysicalDeviceCustomBorderColorFeaturesEXT_customBorderColorWithoutFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceCustomBorderColorFeaturesEXT, customBorderColorWithoutFormat));
}
#endif

#ifdef VK_EXT_border_color_swizzle
static Napi::Value VkSamplerBorderColorComponentMappingCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerBorderColorComponentMappingCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_border_color_swizzle
static Napi::Value VkSamplerBorderColorComponentMappingCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerBorderColorComponentMappingCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_border_color_swizzle
static Napi::Value VkSamplerBorderColorComponentMappingCreateInfoEXT_components_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerBorderColorComponentMappingCreateInfoEXT, components));
}
#endif

#ifdef VK_EXT_border_color_swizzle
static Napi::Value VkSamplerBorderColorComponentMappingCreateInfoEXT_srgb_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSamplerBorderColorComponentMappingCreateInfoEXT, srgb));
}
#endif

#ifdef VK_EXT_border_color_swizzle
static Napi::Value VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_border_color_swizzle
static Napi::Value VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_border_color_swizzle
static Napi::Value VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_borderColorSwizzle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT, borderColorSwizzle));
}
#endif

#ifdef VK_EXT_border_color_swizzle
static Napi::Value VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_borderColorSwizzleFromImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT, borderColorSwizzleFromImage));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryTrianglesDataKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryTrianglesDataKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryTrianglesDataKHR_vertexFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, vertexFormat));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryTrianglesDataKHR_vertexData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, vertexData));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryTrianglesDataKHR_vertexStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, vertexStride));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryTrianglesDataKHR_maxVertex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, maxVertex));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryTrianglesDataKHR_indexType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, indexType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryTrianglesDataKHR_indexData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, indexData));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryTrianglesDataKHR_transformData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryTrianglesDataKHR, transformData));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryAabbsDataKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryAabbsDataKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryAabbsDataKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryAabbsDataKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryAabbsDataKHR_data_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryAabbsDataKHR, data));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryAabbsDataKHR_stride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryAabbsDataKHR, stride));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryInstancesDataKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryInstancesDataKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryInstancesDataKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryInstancesDataKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryInstancesDataKHR_arrayOfPointers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryInstancesDataKHR, arrayOfPointers));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryInstancesDataKHR_data_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryInstancesDataKHR, data));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryKHR_geometryType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, geometryType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryKHR_geometry_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, geometry));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureGeometryKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryKHR, flags));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, type));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, flags));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, mode));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_srcAccelerationStructure_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, srcAccelerationStructure));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_dstAccelerationStructure_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, dstAccelerationStructure));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_geometryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, geometryCount));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_pGeometries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, pGeometries));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_ppGeometries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, ppGeometries));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildGeometryInfoKHR_scratchData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildGeometryInfoKHR, scratchData));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildRangeInfoKHR_primitiveCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildRangeInfoKHR, primitiveCount));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildRangeInfoKHR_primitiveOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildRangeInfoKHR, primitiveOffset));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildRangeInfoKHR_firstVertex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildRangeInfoKHR, firstVertex));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildRangeInfoKHR_transformOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildRangeInfoKHR, transformOffset));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureCreateInfoKHR_createFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, createFlags));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureCreateInfoKHR_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, buffer));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureCreateInfoKHR_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, offset));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureCreateInfoKHR_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, size));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureCreateInfoKHR_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, type));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureCreateInfoKHR_deviceAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureCreateInfoKHR, deviceAddress));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAabbPositionsKHR_minX_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAabbPositionsKHR, minX));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAabbPositionsKHR_minY_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAabbPositionsKHR, minY));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAabbPositionsKHR_minZ_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAabbPositionsKHR, minZ));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAabbPositionsKHR_maxX_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAabbPositionsKHR, maxX));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAabbPositionsKHR_maxY_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAabbPositionsKHR, maxY));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAabbPositionsKHR_maxZ_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAabbPositionsKHR, maxZ));
}
#endif


#ifdef VK_KHR_acceleration_structure
static Napi::Value VkTransformMatrixKHR_matrix_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTransformMatrixKHR, matrix));
}
#endif


#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureInstanceKHR_transform_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureInstanceKHR, transform));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureInstanceKHR_accelerationStructureReference_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureInstanceKHR, accelerationStructureReference));
}
#endif


#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureDeviceAddressInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureDeviceAddressInfoKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureDeviceAddressInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureDeviceAddressInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureDeviceAddressInfoKHR_accelerationStructure_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureDeviceAddressInfoKHR, accelerationStructure));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureVersionInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureVersionInfoKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureVersionInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureVersionInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureVersionInfoKHR_pVersionData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureVersionInfoKHR, pVersionData));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureInfoKHR_src_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, src));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureInfoKHR_dst_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, dst));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureInfoKHR_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureInfoKHR, mode));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureToMemoryInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureToMemoryInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureToMemoryInfoKHR_src_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, src));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureToMemoryInfoKHR_dst_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, dst));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyAccelerationStructureToMemoryInfoKHR_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyAccelerationStructureToMemoryInfoKHR, mode));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyMemoryToAccelerationStructureInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyMemoryToAccelerationStructureInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyMemoryToAccelerationStructureInfoKHR_src_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, src));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyMemoryToAccelerationStructureInfoKHR_dst_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, dst));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkCopyMemoryToAccelerationStructureInfoKHR_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToAccelerationStructureInfoKHR, mode));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineInterfaceCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineInterfaceCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineInterfaceCreateInfoKHR_maxPipelineRayPayloadSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, maxPipelineRayPayloadSize));
}
#endif

#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value VkRayTracingPipelineInterfaceCreateInfoKHR_maxPipelineRayHitAttributeSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, maxPipelineRayHitAttributeSize));
}
#endif

#ifdef VK_KHR_pipeline_library
static Napi::Value VkPipelineLibraryCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLibraryCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_pipeline_library
static Napi::Value VkPipelineLibraryCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLibraryCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_pipeline_library
static Napi::Value VkPipelineLibraryCreateInfoKHR_libraryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLibraryCreateInfoKHR, libraryCount));
}
#endif

#ifdef VK_KHR_pipeline_library
static Napi::Value VkPipelineLibraryCreateInfoKHR_pLibraries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineLibraryCreateInfoKHR, pLibraries));
}
#endif

#ifdef VK_EXT_extended_dynamic_state
static Napi::Value VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_extended_dynamic_state
static Napi::Value VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_extended_dynamic_state
static Napi::Value VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_extendedDynamicState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, extendedDynamicState));
}
#endif

#ifdef VK_EXT_extended_dynamic_state2
static Napi::Value VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_extended_dynamic_state2
static Napi::Value VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_extended_dynamic_state2
static Napi::Value VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_extendedDynamicState2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT, extendedDynamicState2));
}
#endif

#ifdef VK_EXT_extended_dynamic_state2
static Napi::Value VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_extendedDynamicState2LogicOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT, extendedDynamicState2LogicOp));
}
#endif

#ifdef VK_EXT_extended_dynamic_state2
static Napi::Value VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_extendedDynamicState2PatchControlPoints_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT, extendedDynamicState2PatchControlPoints));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3TessellationDomainOrigin_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3TessellationDomainOrigin));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3DepthClampEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3DepthClampEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3PolygonMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3PolygonMode));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3RasterizationSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3RasterizationSamples));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3SampleMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3SampleMask));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3AlphaToCoverageEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3AlphaToCoverageEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3AlphaToOneEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3AlphaToOneEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3LogicOpEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3LogicOpEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorBlendEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ColorBlendEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorBlendEquation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ColorBlendEquation));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorWriteMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ColorWriteMask));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3RasterizationStream_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3RasterizationStream));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ConservativeRasterizationMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ConservativeRasterizationMode));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ExtraPrimitiveOverestimationSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ExtraPrimitiveOverestimationSize));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3DepthClipEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3DepthClipEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3SampleLocationsEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3SampleLocationsEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorBlendAdvanced_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ColorBlendAdvanced));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ProvokingVertexMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ProvokingVertexMode));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3LineRasterizationMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3LineRasterizationMode));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3LineStippleEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3LineStippleEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3DepthClipNegativeOneToOne_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3DepthClipNegativeOneToOne));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ViewportWScalingEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ViewportWScalingEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ViewportSwizzle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ViewportSwizzle));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageToColorEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3CoverageToColorEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageToColorLocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3CoverageToColorLocation));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageModulationMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3CoverageModulationMode));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageModulationTableEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3CoverageModulationTableEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageModulationTable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3CoverageModulationTable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageReductionMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3CoverageReductionMode));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3RepresentativeFragmentTestEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3RepresentativeFragmentTestEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ShadingRateImageEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, extendedDynamicState3ShadingRateImageEnable));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3PropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3PropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkPhysicalDeviceExtendedDynamicState3PropertiesEXT_dynamicPrimitiveTopologyUnrestricted_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT, dynamicPrimitiveTopologyUnrestricted));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendEquationEXT_srcColorBlendFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendEquationEXT, srcColorBlendFactor));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendEquationEXT_dstColorBlendFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendEquationEXT, dstColorBlendFactor));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendEquationEXT_colorBlendOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendEquationEXT, colorBlendOp));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendEquationEXT_srcAlphaBlendFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendEquationEXT, srcAlphaBlendFactor));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendEquationEXT_dstAlphaBlendFactor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendEquationEXT, dstAlphaBlendFactor));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendEquationEXT_alphaBlendOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendEquationEXT, alphaBlendOp));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendAdvancedEXT_advancedBlendOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendAdvancedEXT, advancedBlendOp));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendAdvancedEXT_srcPremultiplied_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendAdvancedEXT, srcPremultiplied));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendAdvancedEXT_dstPremultiplied_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendAdvancedEXT, dstPremultiplied));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendAdvancedEXT_blendOverlap_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendAdvancedEXT, blendOverlap));
}
#endif

#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value VkColorBlendAdvancedEXT_clampResults_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkColorBlendAdvancedEXT, clampResults));
}
#endif

#ifdef VK_QCOM_render_pass_transform
static Napi::Value VkRenderPassTransformBeginInfoQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassTransformBeginInfoQCOM, sType));
}
#endif

#ifdef VK_QCOM_render_pass_transform
static Napi::Value VkRenderPassTransformBeginInfoQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassTransformBeginInfoQCOM, pNext));
}
#endif

#ifdef VK_QCOM_render_pass_transform
static Napi::Value VkRenderPassTransformBeginInfoQCOM_transform_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassTransformBeginInfoQCOM, transform));
}
#endif

#ifdef VK_QCOM_rotated_copy_commands
static Napi::Value VkCopyCommandTransformInfoQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyCommandTransformInfoQCOM, sType));
}
#endif

#ifdef VK_QCOM_rotated_copy_commands
static Napi::Value VkCopyCommandTransformInfoQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyCommandTransformInfoQCOM, pNext));
}
#endif

#ifdef VK_QCOM_rotated_copy_commands
static Napi::Value VkCopyCommandTransformInfoQCOM_transform_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyCommandTransformInfoQCOM, transform));
}
#endif

#ifdef VK_QCOM_render_pass_transform
static Napi::Value VkCommandBufferInheritanceRenderPassTransformInfoQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, sType));
}
#endif

#ifdef VK_QCOM_render_pass_transform
static Napi::Value VkCommandBufferInheritanceRenderPassTransformInfoQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, pNext));
}
#endif

#ifdef VK_QCOM_render_pass_transform
static Napi::Value VkCommandBufferInheritanceRenderPassTransformInfoQCOM_transform_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, transform));
}
#endif

#ifdef VK_QCOM_render_pass_transform
static Napi::Value VkCommandBufferInheritanceRenderPassTransformInfoQCOM_renderArea_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, renderArea));
}
#endif

#ifdef VK_NV_device_diagnostics_config
static Napi::Value VkPhysicalDeviceDiagnosticsConfigFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, sType));
}
#endif

#ifdef VK_NV_device_diagnostics_config
static Napi::Value VkPhysicalDeviceDiagnosticsConfigFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_device_diagnostics_config
static Napi::Value VkPhysicalDeviceDiagnosticsConfigFeaturesNV_diagnosticsConfig_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, diagnosticsConfig));
}
#endif

#ifdef VK_NV_device_diagnostics_config
static Napi::Value VkDeviceDiagnosticsConfigCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceDiagnosticsConfigCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_device_diagnostics_config
static Napi::Value VkDeviceDiagnosticsConfigCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceDiagnosticsConfigCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_device_diagnostics_config
static Napi::Value VkDeviceDiagnosticsConfigCreateInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceDiagnosticsConfigCreateInfoNV, flags));
}
#endif


static Napi::Value VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, sType));
}


static Napi::Value VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_shaderZeroInitializeWorkgroupMemory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, shaderZeroInitializeWorkgroupMemory));
}


#ifdef VK_KHR_shader_subgroup_uniform_control_flow
static Napi::Value VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_shader_subgroup_uniform_control_flow
static Napi::Value VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_shader_subgroup_uniform_control_flow
static Napi::Value VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_shaderSubgroupUniformControlFlow_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, shaderSubgroupUniformControlFlow));
}
#endif

#ifdef VK_EXT_robustness2
static Napi::Value VkPhysicalDeviceRobustness2FeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_robustness2
static Napi::Value VkPhysicalDeviceRobustness2FeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_robustness2
static Napi::Value VkPhysicalDeviceRobustness2FeaturesEXT_robustBufferAccess2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, robustBufferAccess2));
}
#endif

#ifdef VK_EXT_robustness2
static Napi::Value VkPhysicalDeviceRobustness2FeaturesEXT_robustImageAccess2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, robustImageAccess2));
}
#endif

#ifdef VK_EXT_robustness2
static Napi::Value VkPhysicalDeviceRobustness2FeaturesEXT_nullDescriptor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, nullDescriptor));
}
#endif

#ifdef VK_EXT_robustness2
static Napi::Value VkPhysicalDeviceRobustness2PropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_robustness2
static Napi::Value VkPhysicalDeviceRobustness2PropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_robustness2
static Napi::Value VkPhysicalDeviceRobustness2PropertiesEXT_robustStorageBufferAccessSizeAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, robustStorageBufferAccessSizeAlignment));
}
#endif

#ifdef VK_EXT_robustness2
static Napi::Value VkPhysicalDeviceRobustness2PropertiesEXT_robustUniformBufferAccessSizeAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, robustUniformBufferAccessSizeAlignment));
}
#endif


static Napi::Value VkPhysicalDeviceImageRobustnessFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageRobustnessFeatures, sType));
}


static Napi::Value VkPhysicalDeviceImageRobustnessFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageRobustnessFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceImageRobustnessFeatures_robustImageAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageRobustnessFeatures, robustImageAccess));
}


#ifdef VK_KHR_workgroup_memory_explicit_layout
static Napi::Value VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_workgroup_memory_explicit_layout
static Napi::Value VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_workgroup_memory_explicit_layout
static Napi::Value VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayout));
}
#endif

#ifdef VK_KHR_workgroup_memory_explicit_layout
static Napi::Value VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayoutScalarBlockLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayoutScalarBlockLayout));
}
#endif

#ifdef VK_KHR_workgroup_memory_explicit_layout
static Napi::Value VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayout8BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayout8BitAccess));
}
#endif

#ifdef VK_KHR_workgroup_memory_explicit_layout
static Napi::Value VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayout16BitAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayout16BitAccess));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_constantAlphaColorBlendFactors_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, constantAlphaColorBlendFactors));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_events_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, events));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_imageViewFormatReinterpretation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, imageViewFormatReinterpretation));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_imageViewFormatSwizzle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, imageViewFormatSwizzle));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_imageView2DOn3DImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, imageView2DOn3DImage));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_multisampleArrayImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, multisampleArrayImage));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_mutableComparisonSamplers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, mutableComparisonSamplers));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_pointPolygons_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, pointPolygons));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_samplerMipLodBias_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, samplerMipLodBias));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_separateStencilMaskRef_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, separateStencilMaskRef));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_shaderSampleRateInterpolationFunctions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, shaderSampleRateInterpolationFunctions));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_tessellationIsolines_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, tessellationIsolines));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_tessellationPointMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, tessellationPointMode));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_triangleFans_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, triangleFans));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetFeaturesKHR_vertexAttributeAccessBeyondStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetFeaturesKHR, vertexAttributeAccessBeyondStride));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetPropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetPropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetPropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetPropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_portability_subset
static Napi::Value VkPhysicalDevicePortabilitySubsetPropertiesKHR_minVertexInputBindingStrideAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePortabilitySubsetPropertiesKHR, minVertexInputBindingStrideAlignment));
}
#endif

#ifdef VK_EXT_4444_formats
static Napi::Value VkPhysicalDevice4444FormatsFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice4444FormatsFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_4444_formats
static Napi::Value VkPhysicalDevice4444FormatsFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice4444FormatsFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_4444_formats
static Napi::Value VkPhysicalDevice4444FormatsFeaturesEXT_formatA4R4G4B4_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice4444FormatsFeaturesEXT, formatA4R4G4B4));
}
#endif

#ifdef VK_EXT_4444_formats
static Napi::Value VkPhysicalDevice4444FormatsFeaturesEXT_formatA4B4G4R4_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevice4444FormatsFeaturesEXT, formatA4B4G4R4));
}
#endif

#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI, sType));
}
#endif

#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI, pNext));
}
#endif

#ifdef VK_HUAWEI_subpass_shading
static Napi::Value VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_subpassShading_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI, subpassShading));
}
#endif


static Napi::Value VkBufferCopy2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCopy2, sType));
}


static Napi::Value VkBufferCopy2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCopy2, pNext));
}


static Napi::Value VkBufferCopy2_srcOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCopy2, srcOffset));
}


static Napi::Value VkBufferCopy2_dstOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCopy2, dstOffset));
}


static Napi::Value VkBufferCopy2_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCopy2, size));
}



static Napi::Value VkImageCopy2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy2, sType));
}


static Napi::Value VkImageCopy2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy2, pNext));
}


static Napi::Value VkImageCopy2_srcSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy2, srcSubresource));
}


static Napi::Value VkImageCopy2_srcOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy2, srcOffset));
}


static Napi::Value VkImageCopy2_dstSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy2, dstSubresource));
}


static Napi::Value VkImageCopy2_dstOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy2, dstOffset));
}


static Napi::Value VkImageCopy2_extent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCopy2, extent));
}



static Napi::Value VkImageBlit2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit2, sType));
}


static Napi::Value VkImageBlit2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit2, pNext));
}


static Napi::Value VkImageBlit2_srcSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit2, srcSubresource));
}


static Napi::Value VkImageBlit2_srcOffsets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit2, srcOffsets));
}


static Napi::Value VkImageBlit2_dstSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit2, dstSubresource));
}


static Napi::Value VkImageBlit2_dstOffsets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageBlit2, dstOffsets));
}



static Napi::Value VkBufferImageCopy2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy2, sType));
}


static Napi::Value VkBufferImageCopy2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy2, pNext));
}


static Napi::Value VkBufferImageCopy2_bufferOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy2, bufferOffset));
}


static Napi::Value VkBufferImageCopy2_bufferRowLength_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy2, bufferRowLength));
}


static Napi::Value VkBufferImageCopy2_bufferImageHeight_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy2, bufferImageHeight));
}


static Napi::Value VkBufferImageCopy2_imageSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy2, imageSubresource));
}


static Napi::Value VkBufferImageCopy2_imageOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy2, imageOffset));
}


static Napi::Value VkBufferImageCopy2_imageExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferImageCopy2, imageExtent));
}



static Napi::Value VkImageResolve2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve2, sType));
}


static Napi::Value VkImageResolve2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve2, pNext));
}


static Napi::Value VkImageResolve2_srcSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve2, srcSubresource));
}


static Napi::Value VkImageResolve2_srcOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve2, srcOffset));
}


static Napi::Value VkImageResolve2_dstSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve2, dstSubresource));
}


static Napi::Value VkImageResolve2_dstOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve2, dstOffset));
}


static Napi::Value VkImageResolve2_extent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageResolve2, extent));
}



static Napi::Value VkCopyBufferInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferInfo2, sType));
}


static Napi::Value VkCopyBufferInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferInfo2, pNext));
}


static Napi::Value VkCopyBufferInfo2_srcBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferInfo2, srcBuffer));
}


static Napi::Value VkCopyBufferInfo2_dstBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferInfo2, dstBuffer));
}


static Napi::Value VkCopyBufferInfo2_regionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferInfo2, regionCount));
}


static Napi::Value VkCopyBufferInfo2_pRegions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferInfo2, pRegions));
}



static Napi::Value VkCopyImageInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageInfo2, sType));
}


static Napi::Value VkCopyImageInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageInfo2, pNext));
}


static Napi::Value VkCopyImageInfo2_srcImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageInfo2, srcImage));
}


static Napi::Value VkCopyImageInfo2_srcImageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageInfo2, srcImageLayout));
}


static Napi::Value VkCopyImageInfo2_dstImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageInfo2, dstImage));
}


static Napi::Value VkCopyImageInfo2_dstImageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageInfo2, dstImageLayout));
}


static Napi::Value VkCopyImageInfo2_regionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageInfo2, regionCount));
}


static Napi::Value VkCopyImageInfo2_pRegions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageInfo2, pRegions));
}



static Napi::Value VkBlitImageInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBlitImageInfo2, sType));
}


static Napi::Value VkBlitImageInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBlitImageInfo2, pNext));
}


static Napi::Value VkBlitImageInfo2_srcImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBlitImageInfo2, srcImage));
}


static Napi::Value VkBlitImageInfo2_srcImageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBlitImageInfo2, srcImageLayout));
}


static Napi::Value VkBlitImageInfo2_dstImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBlitImageInfo2, dstImage));
}


static Napi::Value VkBlitImageInfo2_dstImageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBlitImageInfo2, dstImageLayout));
}


static Napi::Value VkBlitImageInfo2_regionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBlitImageInfo2, regionCount));
}


static Napi::Value VkBlitImageInfo2_pRegions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBlitImageInfo2, pRegions));
}


static Napi::Value VkBlitImageInfo2_filter_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBlitImageInfo2, filter));
}



static Napi::Value VkCopyBufferToImageInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2, sType));
}


static Napi::Value VkCopyBufferToImageInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2, pNext));
}


static Napi::Value VkCopyBufferToImageInfo2_srcBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2, srcBuffer));
}


static Napi::Value VkCopyBufferToImageInfo2_dstImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2, dstImage));
}


static Napi::Value VkCopyBufferToImageInfo2_dstImageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2, dstImageLayout));
}


static Napi::Value VkCopyBufferToImageInfo2_regionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2, regionCount));
}


static Napi::Value VkCopyBufferToImageInfo2_pRegions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyBufferToImageInfo2, pRegions));
}



static Napi::Value VkCopyImageToBufferInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2, sType));
}


static Napi::Value VkCopyImageToBufferInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2, pNext));
}


static Napi::Value VkCopyImageToBufferInfo2_srcImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2, srcImage));
}


static Napi::Value VkCopyImageToBufferInfo2_srcImageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2, srcImageLayout));
}


static Napi::Value VkCopyImageToBufferInfo2_dstBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2, dstBuffer));
}


static Napi::Value VkCopyImageToBufferInfo2_regionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2, regionCount));
}


static Napi::Value VkCopyImageToBufferInfo2_pRegions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyImageToBufferInfo2, pRegions));
}



static Napi::Value VkResolveImageInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkResolveImageInfo2, sType));
}


static Napi::Value VkResolveImageInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkResolveImageInfo2, pNext));
}


static Napi::Value VkResolveImageInfo2_srcImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkResolveImageInfo2, srcImage));
}


static Napi::Value VkResolveImageInfo2_srcImageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkResolveImageInfo2, srcImageLayout));
}


static Napi::Value VkResolveImageInfo2_dstImage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkResolveImageInfo2, dstImage));
}


static Napi::Value VkResolveImageInfo2_dstImageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkResolveImageInfo2, dstImageLayout));
}


static Napi::Value VkResolveImageInfo2_regionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkResolveImageInfo2, regionCount));
}


static Napi::Value VkResolveImageInfo2_pRegions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkResolveImageInfo2, pRegions));
}


#ifdef VK_EXT_shader_image_atomic_int64
static Napi::Value VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_shader_image_atomic_int64
static Napi::Value VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_shader_image_atomic_int64
static Napi::Value VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_shaderImageInt64Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, shaderImageInt64Atomics));
}
#endif

#ifdef VK_EXT_shader_image_atomic_int64
static Napi::Value VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_sparseImageInt64Atomics_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, sparseImageInt64Atomics));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkFragmentShadingRateAttachmentInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFragmentShadingRateAttachmentInfoKHR, sType));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkFragmentShadingRateAttachmentInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFragmentShadingRateAttachmentInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkFragmentShadingRateAttachmentInfoKHR_pFragmentShadingRateAttachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFragmentShadingRateAttachmentInfoKHR, pFragmentShadingRateAttachment));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkFragmentShadingRateAttachmentInfoKHR_shadingRateAttachmentTexelSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFragmentShadingRateAttachmentInfoKHR, shadingRateAttachmentTexelSize));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPipelineFragmentShadingRateStateCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPipelineFragmentShadingRateStateCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPipelineFragmentShadingRateStateCreateInfoKHR_fragmentSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, fragmentSize));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPipelineFragmentShadingRateStateCreateInfoKHR_combinerOps_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, combinerOps));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRateFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRateFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRateFeaturesKHR_pipelineFragmentShadingRate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pipelineFragmentShadingRate));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRateFeaturesKHR_primitiveFragmentShadingRate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, primitiveFragmentShadingRate));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRateFeaturesKHR_attachmentFragmentShadingRate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, attachmentFragmentShadingRate));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_minFragmentShadingRateAttachmentTexelSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, minFragmentShadingRateAttachmentTexelSize));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateAttachmentTexelSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateAttachmentTexelSize));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateAttachmentTexelSizeAspectRatio_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateAttachmentTexelSizeAspectRatio));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_primitiveFragmentShadingRateWithMultipleViewports_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, primitiveFragmentShadingRateWithMultipleViewports));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_layeredShadingRateAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, layeredShadingRateAttachments));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateNonTrivialCombinerOps_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateNonTrivialCombinerOps));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentSize));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentSizeAspectRatio_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentSizeAspectRatio));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateCoverageSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateCoverageSamples));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateRasterizationSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateRasterizationSamples));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithShaderDepthStencilWrites_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithShaderDepthStencilWrites));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithSampleMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithSampleMask));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithShaderSampleMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithShaderSampleMask));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithConservativeRasterization_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithConservativeRasterization));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithFragmentShaderInterlock_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithFragmentShaderInterlock));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithCustomSampleLocations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithCustomSampleLocations));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateStrictMultiplyCombiner_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateStrictMultiplyCombiner));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRateKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateKHR, sType));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRateKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateKHR, pNext));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRateKHR_sampleCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateKHR, sampleCounts));
}
#endif

#ifdef VK_KHR_fragment_shading_rate
static Napi::Value VkPhysicalDeviceFragmentShadingRateKHR_fragmentSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateKHR, fragmentSize));
}
#endif


static Napi::Value VkPhysicalDeviceShaderTerminateInvocationFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderTerminateInvocationFeatures, sType));
}


static Napi::Value VkPhysicalDeviceShaderTerminateInvocationFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderTerminateInvocationFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceShaderTerminateInvocationFeatures_shaderTerminateInvocation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderTerminateInvocationFeatures, shaderTerminateInvocation));
}


#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, sType));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_fragmentShadingRateEnums_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, fragmentShadingRateEnums));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_supersampleFragmentShadingRates_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, supersampleFragmentShadingRates));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_noInvocationFragmentShadingRates_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, noInvocationFragmentShadingRates));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV, sType));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_maxFragmentShadingRateInvocationCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV, maxFragmentShadingRateInvocationCount));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPipelineFragmentShadingRateEnumStateCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPipelineFragmentShadingRateEnumStateCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPipelineFragmentShadingRateEnumStateCreateInfoNV_shadingRateType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, shadingRateType));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPipelineFragmentShadingRateEnumStateCreateInfoNV_shadingRate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, shadingRate));
}
#endif

#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value VkPipelineFragmentShadingRateEnumStateCreateInfoNV_combinerOps_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, combinerOps));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildSizesInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, sType));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildSizesInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildSizesInfoKHR_accelerationStructureSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, accelerationStructureSize));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildSizesInfoKHR_updateScratchSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, updateScratchSize));
}
#endif

#ifdef VK_KHR_acceleration_structure
static Napi::Value VkAccelerationStructureBuildSizesInfoKHR_buildScratchSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureBuildSizesInfoKHR, buildScratchSize));
}
#endif

#ifdef VK_EXT_image_2d_view_of_3d
static Napi::Value VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_image_2d_view_of_3d
static Napi::Value VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_image_2d_view_of_3d
static Napi::Value VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_image2DViewOf3D_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, image2DViewOf3D));
}
#endif

#ifdef VK_EXT_image_2d_view_of_3d
static Napi::Value VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_sampler2DViewOf3D_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, sampler2DViewOf3D));
}
#endif

#ifdef VK_EXT_mutable_descriptor_type
static Napi::Value VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_mutable_descriptor_type
static Napi::Value VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_mutable_descriptor_type
static Napi::Value VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT_mutableDescriptorType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, mutableDescriptorType));
}
#endif


#ifdef VK_EXT_mutable_descriptor_type
static Napi::Value VkMutableDescriptorTypeListEXT_descriptorTypeCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMutableDescriptorTypeListEXT, descriptorTypeCount));
}
#endif

#ifdef VK_EXT_mutable_descriptor_type
static Napi::Value VkMutableDescriptorTypeListEXT_pDescriptorTypes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMutableDescriptorTypeListEXT, pDescriptorTypes));
}
#endif


#ifdef VK_EXT_mutable_descriptor_type
static Napi::Value VkMutableDescriptorTypeCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMutableDescriptorTypeCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_mutable_descriptor_type
static Napi::Value VkMutableDescriptorTypeCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMutableDescriptorTypeCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_mutable_descriptor_type
static Napi::Value VkMutableDescriptorTypeCreateInfoEXT_mutableDescriptorTypeListCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMutableDescriptorTypeCreateInfoEXT, mutableDescriptorTypeListCount));
}
#endif

#ifdef VK_EXT_mutable_descriptor_type
static Napi::Value VkMutableDescriptorTypeCreateInfoEXT_pMutableDescriptorTypeLists_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMutableDescriptorTypeCreateInfoEXT, pMutableDescriptorTypeLists));
}
#endif


#ifdef VK_EXT_depth_clip_control
static Napi::Value VkPhysicalDeviceDepthClipControlFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClipControlFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_depth_clip_control
static Napi::Value VkPhysicalDeviceDepthClipControlFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClipControlFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_depth_clip_control
static Napi::Value VkPhysicalDeviceDepthClipControlFeaturesEXT_depthClipControl_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClipControlFeaturesEXT, depthClipControl));
}
#endif

#ifdef VK_EXT_depth_clip_control
static Napi::Value VkPipelineViewportDepthClipControlCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportDepthClipControlCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_depth_clip_control
static Napi::Value VkPipelineViewportDepthClipControlCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportDepthClipControlCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_depth_clip_control
static Napi::Value VkPipelineViewportDepthClipControlCreateInfoEXT_negativeOneToOne_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineViewportDepthClipControlCreateInfoEXT, negativeOneToOne));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_vertexInputDynamicState_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT, vertexInputDynamicState));
}
#endif

#ifdef VK_NV_external_memory_rdma
static Napi::Value VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV, sType));
}
#endif

#ifdef VK_NV_external_memory_rdma
static Napi::Value VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_external_memory_rdma
static Napi::Value VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_externalMemoryRDMA_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV, externalMemoryRDMA));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputBindingDescription2EXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDescription2EXT, sType));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputBindingDescription2EXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDescription2EXT, pNext));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputBindingDescription2EXT_binding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDescription2EXT, binding));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputBindingDescription2EXT_stride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDescription2EXT, stride));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputBindingDescription2EXT_inputRate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDescription2EXT, inputRate));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputBindingDescription2EXT_divisor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputBindingDescription2EXT, divisor));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputAttributeDescription2EXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription2EXT, sType));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputAttributeDescription2EXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription2EXT, pNext));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputAttributeDescription2EXT_location_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription2EXT, location));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputAttributeDescription2EXT_binding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription2EXT, binding));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputAttributeDescription2EXT_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription2EXT, format));
}
#endif

#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value VkVertexInputAttributeDescription2EXT_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVertexInputAttributeDescription2EXT, offset));
}
#endif

#ifdef VK_EXT_color_write_enable
static Napi::Value VkPhysicalDeviceColorWriteEnableFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceColorWriteEnableFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_color_write_enable
static Napi::Value VkPhysicalDeviceColorWriteEnableFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceColorWriteEnableFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_color_write_enable
static Napi::Value VkPhysicalDeviceColorWriteEnableFeaturesEXT_colorWriteEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceColorWriteEnableFeaturesEXT, colorWriteEnable));
}
#endif

#ifdef VK_EXT_color_write_enable
static Napi::Value VkPipelineColorWriteCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorWriteCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_color_write_enable
static Napi::Value VkPipelineColorWriteCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorWriteCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_color_write_enable
static Napi::Value VkPipelineColorWriteCreateInfoEXT_attachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorWriteCreateInfoEXT, attachmentCount));
}
#endif

#ifdef VK_EXT_color_write_enable
static Napi::Value VkPipelineColorWriteCreateInfoEXT_pColorWriteEnables_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineColorWriteCreateInfoEXT, pColorWriteEnables));
}
#endif


static Napi::Value VkMemoryBarrier2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier2, sType));
}


static Napi::Value VkMemoryBarrier2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier2, pNext));
}


static Napi::Value VkMemoryBarrier2_srcStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier2, srcStageMask));
}


static Napi::Value VkMemoryBarrier2_srcAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier2, srcAccessMask));
}


static Napi::Value VkMemoryBarrier2_dstStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier2, dstStageMask));
}


static Napi::Value VkMemoryBarrier2_dstAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryBarrier2, dstAccessMask));
}



static Napi::Value VkImageMemoryBarrier2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, sType));
}


static Napi::Value VkImageMemoryBarrier2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, pNext));
}


static Napi::Value VkImageMemoryBarrier2_srcStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, srcStageMask));
}


static Napi::Value VkImageMemoryBarrier2_srcAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, srcAccessMask));
}


static Napi::Value VkImageMemoryBarrier2_dstStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, dstStageMask));
}


static Napi::Value VkImageMemoryBarrier2_dstAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, dstAccessMask));
}


static Napi::Value VkImageMemoryBarrier2_oldLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, oldLayout));
}


static Napi::Value VkImageMemoryBarrier2_newLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, newLayout));
}


static Napi::Value VkImageMemoryBarrier2_srcQueueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, srcQueueFamilyIndex));
}


static Napi::Value VkImageMemoryBarrier2_dstQueueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, dstQueueFamilyIndex));
}


static Napi::Value VkImageMemoryBarrier2_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, image));
}


static Napi::Value VkImageMemoryBarrier2_subresourceRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageMemoryBarrier2, subresourceRange));
}



static Napi::Value VkBufferMemoryBarrier2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, sType));
}


static Napi::Value VkBufferMemoryBarrier2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, pNext));
}


static Napi::Value VkBufferMemoryBarrier2_srcStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, srcStageMask));
}


static Napi::Value VkBufferMemoryBarrier2_srcAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, srcAccessMask));
}


static Napi::Value VkBufferMemoryBarrier2_dstStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, dstStageMask));
}


static Napi::Value VkBufferMemoryBarrier2_dstAccessMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, dstAccessMask));
}


static Napi::Value VkBufferMemoryBarrier2_srcQueueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, srcQueueFamilyIndex));
}


static Napi::Value VkBufferMemoryBarrier2_dstQueueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, dstQueueFamilyIndex));
}


static Napi::Value VkBufferMemoryBarrier2_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, buffer));
}


static Napi::Value VkBufferMemoryBarrier2_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, offset));
}


static Napi::Value VkBufferMemoryBarrier2_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferMemoryBarrier2, size));
}



static Napi::Value VkDependencyInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDependencyInfo, sType));
}


static Napi::Value VkDependencyInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDependencyInfo, pNext));
}


static Napi::Value VkDependencyInfo_dependencyFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDependencyInfo, dependencyFlags));
}


static Napi::Value VkDependencyInfo_memoryBarrierCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDependencyInfo, memoryBarrierCount));
}


static Napi::Value VkDependencyInfo_pMemoryBarriers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDependencyInfo, pMemoryBarriers));
}


static Napi::Value VkDependencyInfo_bufferMemoryBarrierCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDependencyInfo, bufferMemoryBarrierCount));
}


static Napi::Value VkDependencyInfo_pBufferMemoryBarriers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDependencyInfo, pBufferMemoryBarriers));
}


static Napi::Value VkDependencyInfo_imageMemoryBarrierCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDependencyInfo, imageMemoryBarrierCount));
}


static Napi::Value VkDependencyInfo_pImageMemoryBarriers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDependencyInfo, pImageMemoryBarriers));
}



static Napi::Value VkSemaphoreSubmitInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSubmitInfo, sType));
}


static Napi::Value VkSemaphoreSubmitInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSubmitInfo, pNext));
}


static Napi::Value VkSemaphoreSubmitInfo_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSubmitInfo, semaphore));
}


static Napi::Value VkSemaphoreSubmitInfo_value_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSubmitInfo, value));
}


static Napi::Value VkSemaphoreSubmitInfo_stageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSubmitInfo, stageMask));
}


static Napi::Value VkSemaphoreSubmitInfo_deviceIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSemaphoreSubmitInfo, deviceIndex));
}



static Napi::Value VkCommandBufferSubmitInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferSubmitInfo, sType));
}


static Napi::Value VkCommandBufferSubmitInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferSubmitInfo, pNext));
}


static Napi::Value VkCommandBufferSubmitInfo_commandBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferSubmitInfo, commandBuffer));
}


static Napi::Value VkCommandBufferSubmitInfo_deviceMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferSubmitInfo, deviceMask));
}



static Napi::Value VkSubmitInfo2_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo2, sType));
}


static Napi::Value VkSubmitInfo2_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo2, pNext));
}


static Napi::Value VkSubmitInfo2_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo2, flags));
}


static Napi::Value VkSubmitInfo2_waitSemaphoreInfoCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo2, waitSemaphoreInfoCount));
}


static Napi::Value VkSubmitInfo2_pWaitSemaphoreInfos_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo2, pWaitSemaphoreInfos));
}


static Napi::Value VkSubmitInfo2_commandBufferInfoCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo2, commandBufferInfoCount));
}


static Napi::Value VkSubmitInfo2_pCommandBufferInfos_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo2, pCommandBufferInfos));
}


static Napi::Value VkSubmitInfo2_signalSemaphoreInfoCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo2, signalSemaphoreInfoCount));
}


static Napi::Value VkSubmitInfo2_pSignalSemaphoreInfos_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubmitInfo2, pSignalSemaphoreInfos));
}


#ifdef VK_KHR_synchronization2
static Napi::Value VkQueueFamilyCheckpointProperties2NV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyCheckpointProperties2NV, sType));
}
#endif

#ifdef VK_KHR_synchronization2
static Napi::Value VkQueueFamilyCheckpointProperties2NV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyCheckpointProperties2NV, pNext));
}
#endif

#ifdef VK_KHR_synchronization2
static Napi::Value VkQueueFamilyCheckpointProperties2NV_checkpointExecutionStageMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyCheckpointProperties2NV, checkpointExecutionStageMask));
}
#endif

#ifdef VK_KHR_synchronization2
static Napi::Value VkCheckpointData2NV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCheckpointData2NV, sType));
}
#endif

#ifdef VK_KHR_synchronization2
static Napi::Value VkCheckpointData2NV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCheckpointData2NV, pNext));
}
#endif

#ifdef VK_KHR_synchronization2
static Napi::Value VkCheckpointData2NV_stage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCheckpointData2NV, stage));
}
#endif

#ifdef VK_KHR_synchronization2
static Napi::Value VkCheckpointData2NV_pCheckpointMarker_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCheckpointData2NV, pCheckpointMarker));
}
#endif


static Napi::Value VkPhysicalDeviceSynchronization2Features_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSynchronization2Features, sType));
}


static Napi::Value VkPhysicalDeviceSynchronization2Features_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSynchronization2Features, pNext));
}


static Napi::Value VkPhysicalDeviceSynchronization2Features_synchronization2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSynchronization2Features, synchronization2));
}


#ifdef VK_EXT_primitives_generated_query
static Napi::Value VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_primitives_generated_query
static Napi::Value VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_primitives_generated_query
static Napi::Value VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_primitivesGeneratedQuery_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, primitivesGeneratedQuery));
}
#endif

#ifdef VK_EXT_primitives_generated_query
static Napi::Value VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_primitivesGeneratedQueryWithRasterizerDiscard_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, primitivesGeneratedQueryWithRasterizerDiscard));
}
#endif

#ifdef VK_EXT_primitives_generated_query
static Napi::Value VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_primitivesGeneratedQueryWithNonZeroStreams_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, primitivesGeneratedQueryWithNonZeroStreams));
}
#endif

#ifdef VK_EXT_legacy_dithering
static Napi::Value VkPhysicalDeviceLegacyDitheringFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLegacyDitheringFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_legacy_dithering
static Napi::Value VkPhysicalDeviceLegacyDitheringFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLegacyDitheringFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_legacy_dithering
static Napi::Value VkPhysicalDeviceLegacyDitheringFeaturesEXT_legacyDithering_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLegacyDitheringFeaturesEXT, legacyDithering));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_multisampledRenderToSingleSampled_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, multisampledRenderToSingleSampled));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkSubpassResolvePerformanceQueryEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassResolvePerformanceQueryEXT, sType));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkSubpassResolvePerformanceQueryEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassResolvePerformanceQueryEXT, pNext));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkSubpassResolvePerformanceQueryEXT_optimal_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubpassResolvePerformanceQueryEXT, optimal));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkMultisampledRenderToSingleSampledInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultisampledRenderToSingleSampledInfoEXT, sType));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkMultisampledRenderToSingleSampledInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultisampledRenderToSingleSampledInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkMultisampledRenderToSingleSampledInfoEXT_multisampledRenderToSingleSampledEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultisampledRenderToSingleSampledInfoEXT, multisampledRenderToSingleSampledEnable));
}
#endif

#ifdef VK_EXT_multisampled_render_to_single_sampled
static Napi::Value VkMultisampledRenderToSingleSampledInfoEXT_rasterizationSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultisampledRenderToSingleSampledInfoEXT, rasterizationSamples));
}
#endif

#ifdef VK_EXT_pipeline_protected_access
static Napi::Value VkPhysicalDevicePipelineProtectedAccessFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_pipeline_protected_access
static Napi::Value VkPhysicalDevicePipelineProtectedAccessFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_pipeline_protected_access
static Napi::Value VkPhysicalDevicePipelineProtectedAccessFeaturesEXT_pipelineProtectedAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT, pipelineProtectedAccess));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkQueueFamilyVideoPropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyVideoPropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkQueueFamilyVideoPropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyVideoPropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkQueueFamilyVideoPropertiesKHR_videoCodecOperations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyVideoPropertiesKHR, videoCodecOperations));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkQueueFamilyQueryResultStatusPropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyQueryResultStatusPropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkQueueFamilyQueryResultStatusPropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyQueryResultStatusPropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkQueueFamilyQueryResultStatusPropertiesKHR_queryResultStatusSupport_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkQueueFamilyQueryResultStatusPropertiesKHR, queryResultStatusSupport));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileListInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileListInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileListInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileListInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileListInfoKHR_profileCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileListInfoKHR, profileCount));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileListInfoKHR_pProfiles_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileListInfoKHR, pProfiles));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkPhysicalDeviceVideoFormatInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVideoFormatInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkPhysicalDeviceVideoFormatInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVideoFormatInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkPhysicalDeviceVideoFormatInfoKHR_imageUsage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceVideoFormatInfoKHR, imageUsage));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoFormatPropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoFormatPropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoFormatPropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoFormatPropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoFormatPropertiesKHR_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoFormatPropertiesKHR, format));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoFormatPropertiesKHR_componentMapping_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoFormatPropertiesKHR, componentMapping));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoFormatPropertiesKHR_imageCreateFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoFormatPropertiesKHR, imageCreateFlags));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoFormatPropertiesKHR_imageType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoFormatPropertiesKHR, imageType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoFormatPropertiesKHR_imageTiling_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoFormatPropertiesKHR, imageTiling));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoFormatPropertiesKHR_imageUsageFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoFormatPropertiesKHR, imageUsageFlags));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileInfoKHR_videoCodecOperation_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileInfoKHR, videoCodecOperation));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileInfoKHR_chromaSubsampling_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileInfoKHR, chromaSubsampling));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileInfoKHR_lumaBitDepth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileInfoKHR, lumaBitDepth));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoProfileInfoKHR_chromaBitDepth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoProfileInfoKHR, chromaBitDepth));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, flags));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_minBitstreamBufferOffsetAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, minBitstreamBufferOffsetAlignment));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_minBitstreamBufferSizeAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, minBitstreamBufferSizeAlignment));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_pictureAccessGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, pictureAccessGranularity));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_minCodedExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, minCodedExtent));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_maxCodedExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, maxCodedExtent));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_maxDpbSlots_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, maxDpbSlots));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_maxActiveReferencePictures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, maxActiveReferencePictures));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCapabilitiesKHR_stdHeaderVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCapabilitiesKHR, stdHeaderVersion));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionMemoryRequirementsKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionMemoryRequirementsKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionMemoryRequirementsKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionMemoryRequirementsKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionMemoryRequirementsKHR_memoryBindIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionMemoryRequirementsKHR, memoryBindIndex));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionMemoryRequirementsKHR_memoryRequirements_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionMemoryRequirementsKHR, memoryRequirements));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkBindVideoSessionMemoryInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindVideoSessionMemoryInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkBindVideoSessionMemoryInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindVideoSessionMemoryInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkBindVideoSessionMemoryInfoKHR_memoryBindIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindVideoSessionMemoryInfoKHR, memoryBindIndex));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkBindVideoSessionMemoryInfoKHR_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindVideoSessionMemoryInfoKHR, memory));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkBindVideoSessionMemoryInfoKHR_memoryOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindVideoSessionMemoryInfoKHR, memoryOffset));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkBindVideoSessionMemoryInfoKHR_memorySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBindVideoSessionMemoryInfoKHR, memorySize));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoPictureResourceInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoPictureResourceInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoPictureResourceInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoPictureResourceInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoPictureResourceInfoKHR_codedOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoPictureResourceInfoKHR, codedOffset));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoPictureResourceInfoKHR_codedExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoPictureResourceInfoKHR, codedExtent));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoPictureResourceInfoKHR_baseArrayLayer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoPictureResourceInfoKHR, baseArrayLayer));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoPictureResourceInfoKHR_imageViewBinding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoPictureResourceInfoKHR, imageViewBinding));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoReferenceSlotInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoReferenceSlotInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoReferenceSlotInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoReferenceSlotInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoReferenceSlotInfoKHR_slotIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoReferenceSlotInfoKHR, slotIndex));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoReferenceSlotInfoKHR_pPictureResource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoReferenceSlotInfoKHR, pPictureResource));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeCapabilitiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeCapabilitiesKHR, sType));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeCapabilitiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeCapabilitiesKHR, pNext));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeCapabilitiesKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeCapabilitiesKHR, flags));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeUsageInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeUsageInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeUsageInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeUsageInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeUsageInfoKHR_videoUsageHints_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeUsageInfoKHR, videoUsageHints));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, flags));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_srcBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, srcBuffer));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_srcBufferOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, srcBufferOffset));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_srcBufferRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, srcBufferRange));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_dstPictureResource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, dstPictureResource));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_pSetupReferenceSlot_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, pSetupReferenceSlot));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_referenceSlotCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, referenceSlotCount));
}
#endif

#ifdef VK_KHR_video_decode_queue
static Napi::Value VkVideoDecodeInfoKHR_pReferenceSlots_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeInfoKHR, pReferenceSlots));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264ProfileInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264ProfileInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264ProfileInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264ProfileInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264ProfileInfoEXT_stdProfileIdc_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264ProfileInfoEXT, stdProfileIdc));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264ProfileInfoEXT_pictureLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264ProfileInfoEXT, pictureLayout));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264CapabilitiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264CapabilitiesEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264CapabilitiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264CapabilitiesEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264CapabilitiesEXT_maxLevelIdc_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264CapabilitiesEXT, maxLevelIdc));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264CapabilitiesEXT_fieldOffsetGranularity_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264CapabilitiesEXT, fieldOffsetGranularity));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersAddInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersAddInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersAddInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersAddInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersAddInfoEXT_stdSPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersAddInfoEXT, stdSPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersAddInfoEXT_pStdSPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersAddInfoEXT, pStdSPSs));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersAddInfoEXT_stdPPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersAddInfoEXT, stdPPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersAddInfoEXT_pStdPPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersAddInfoEXT, pStdPPSs));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersCreateInfoEXT, maxStdSPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersCreateInfoEXT, maxStdPPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264SessionParametersCreateInfoEXT, pParametersAddInfo));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264PictureInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264PictureInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264PictureInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264PictureInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264PictureInfoEXT_pStdPictureInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264PictureInfoEXT, pStdPictureInfo));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264PictureInfoEXT_sliceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264PictureInfoEXT, sliceCount));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264PictureInfoEXT_pSliceOffsets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264PictureInfoEXT, pSliceOffsets));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264DpbSlotInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264DpbSlotInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264DpbSlotInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264DpbSlotInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h264
static Napi::Value VkVideoDecodeH264DpbSlotInfoEXT_pStdReferenceInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH264DpbSlotInfoEXT, pStdReferenceInfo));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265ProfileInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265ProfileInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265ProfileInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265ProfileInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265ProfileInfoEXT_stdProfileIdc_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265ProfileInfoEXT, stdProfileIdc));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265CapabilitiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265CapabilitiesEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265CapabilitiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265CapabilitiesEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265CapabilitiesEXT_maxLevelIdc_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265CapabilitiesEXT, maxLevelIdc));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersAddInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersAddInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersAddInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersAddInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersAddInfoEXT_stdVPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersAddInfoEXT, stdVPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersAddInfoEXT_pStdVPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersAddInfoEXT, pStdVPSs));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersAddInfoEXT_stdSPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersAddInfoEXT, stdSPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersAddInfoEXT_pStdSPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersAddInfoEXT, pStdSPSs));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersAddInfoEXT_stdPPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersAddInfoEXT, stdPPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersAddInfoEXT_pStdPPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersAddInfoEXT, pStdPPSs));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersCreateInfoEXT_maxStdVPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersCreateInfoEXT, maxStdVPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersCreateInfoEXT, maxStdSPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersCreateInfoEXT, maxStdPPSCount));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265SessionParametersCreateInfoEXT, pParametersAddInfo));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265PictureInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265PictureInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265PictureInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265PictureInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265PictureInfoEXT_pStdPictureInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265PictureInfoEXT, pStdPictureInfo));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265PictureInfoEXT_sliceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265PictureInfoEXT, sliceCount));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265PictureInfoEXT_pSliceOffsets_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265PictureInfoEXT, pSliceOffsets));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265DpbSlotInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265DpbSlotInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265DpbSlotInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265DpbSlotInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_decode_h265
static Napi::Value VkVideoDecodeH265DpbSlotInfoEXT_pStdReferenceInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoDecodeH265DpbSlotInfoEXT, pStdReferenceInfo));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_queueFamilyIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, queueFamilyIndex));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_pVideoProfile_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, pVideoProfile));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_pictureFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, pictureFormat));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_maxCodedExtent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, maxCodedExtent));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_referencePictureFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, referencePictureFormat));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_maxDpbSlots_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, maxDpbSlots));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_maxActiveReferencePictures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, maxActiveReferencePictures));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionCreateInfoKHR_pStdHeaderVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionCreateInfoKHR, pStdHeaderVersion));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionParametersCreateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionParametersCreateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionParametersCreateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionParametersCreateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionParametersCreateInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionParametersCreateInfoKHR, flags));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionParametersCreateInfoKHR_videoSessionParametersTemplate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionParametersCreateInfoKHR, videoSessionParametersTemplate));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionParametersCreateInfoKHR_videoSession_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionParametersCreateInfoKHR, videoSession));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionParametersUpdateInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionParametersUpdateInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionParametersUpdateInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionParametersUpdateInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoSessionParametersUpdateInfoKHR_updateSequenceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoSessionParametersUpdateInfoKHR, updateSequenceCount));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoBeginCodingInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoBeginCodingInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoBeginCodingInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoBeginCodingInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoBeginCodingInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoBeginCodingInfoKHR, flags));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoBeginCodingInfoKHR_videoSession_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoBeginCodingInfoKHR, videoSession));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoBeginCodingInfoKHR_videoSessionParameters_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoBeginCodingInfoKHR, videoSessionParameters));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoBeginCodingInfoKHR_referenceSlotCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoBeginCodingInfoKHR, referenceSlotCount));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoBeginCodingInfoKHR_pReferenceSlots_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoBeginCodingInfoKHR, pReferenceSlots));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoEndCodingInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEndCodingInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoEndCodingInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEndCodingInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoEndCodingInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEndCodingInfoKHR, flags));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCodingControlInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCodingControlInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCodingControlInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCodingControlInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_queue
static Napi::Value VkVideoCodingControlInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoCodingControlInfoKHR, flags));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeUsageInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeUsageInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeUsageInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeUsageInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeUsageInfoKHR_videoUsageHints_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeUsageInfoKHR, videoUsageHints));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeUsageInfoKHR_videoContentHints_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeUsageInfoKHR, videoContentHints));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeUsageInfoKHR_tuningMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeUsageInfoKHR, tuningMode));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, flags));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_qualityLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, qualityLevel));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_dstBitstreamBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, dstBitstreamBuffer));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_dstBitstreamBufferOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, dstBitstreamBufferOffset));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_dstBitstreamBufferMaxRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, dstBitstreamBufferMaxRange));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_srcPictureResource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, srcPictureResource));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_pSetupReferenceSlot_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, pSetupReferenceSlot));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_referenceSlotCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, referenceSlotCount));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_pReferenceSlots_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, pReferenceSlots));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeInfoKHR_precedingExternallyEncodedBytes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeInfoKHR, precedingExternallyEncodedBytes));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlInfoKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlInfoKHR, flags));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlInfoKHR_rateControlMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlInfoKHR, rateControlMode));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlInfoKHR_layerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlInfoKHR, layerCount));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlInfoKHR_pLayerConfigs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlInfoKHR, pLayerConfigs));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlLayerInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlLayerInfoKHR, sType));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlLayerInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlLayerInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlLayerInfoKHR_averageBitrate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlLayerInfoKHR, averageBitrate));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlLayerInfoKHR_maxBitrate_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlLayerInfoKHR, maxBitrate));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlLayerInfoKHR_frameRateNumerator_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlLayerInfoKHR, frameRateNumerator));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlLayerInfoKHR_frameRateDenominator_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlLayerInfoKHR, frameRateDenominator));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlLayerInfoKHR_virtualBufferSizeInMs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlLayerInfoKHR, virtualBufferSizeInMs));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeRateControlLayerInfoKHR_initialVirtualBufferSizeInMs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeRateControlLayerInfoKHR, initialVirtualBufferSizeInMs));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeCapabilitiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeCapabilitiesKHR, sType));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeCapabilitiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeCapabilitiesKHR, pNext));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeCapabilitiesKHR_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeCapabilitiesKHR, flags));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeCapabilitiesKHR_rateControlModes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeCapabilitiesKHR, rateControlModes));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeCapabilitiesKHR_rateControlLayerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeCapabilitiesKHR, rateControlLayerCount));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeCapabilitiesKHR_qualityLevelCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeCapabilitiesKHR, qualityLevelCount));
}
#endif

#ifdef VK_KHR_video_encode_queue
static Napi::Value VkVideoEncodeCapabilitiesKHR_inputImageDataFillAlignment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeCapabilitiesKHR, inputImageDataFillAlignment));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, flags));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_inputModeFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, inputModeFlags));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_outputModeFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, outputModeFlags));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_maxPPictureL0ReferenceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, maxPPictureL0ReferenceCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_maxBPictureL0ReferenceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, maxBPictureL0ReferenceCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_maxL1ReferenceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, maxL1ReferenceCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_motionVectorsOverPicBoundariesFlag_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, motionVectorsOverPicBoundariesFlag));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_maxBytesPerPicDenom_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, maxBytesPerPicDenom));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_maxBitsPerMbDenom_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, maxBitsPerMbDenom));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_log2MaxMvLengthHorizontal_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, log2MaxMvLengthHorizontal));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264CapabilitiesEXT_log2MaxMvLengthVertical_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264CapabilitiesEXT, log2MaxMvLengthVertical));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersAddInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersAddInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersAddInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersAddInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersAddInfoEXT_stdSPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersAddInfoEXT, stdSPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersAddInfoEXT_pStdSPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersAddInfoEXT, pStdSPSs));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersAddInfoEXT_stdPPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersAddInfoEXT, stdPPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersAddInfoEXT_pStdPPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersAddInfoEXT, pStdPPSs));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersCreateInfoEXT, maxStdSPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersCreateInfoEXT, maxStdPPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264SessionParametersCreateInfoEXT, pParametersAddInfo));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264DpbSlotInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264DpbSlotInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264DpbSlotInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264DpbSlotInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264DpbSlotInfoEXT_slotIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264DpbSlotInfoEXT, slotIndex));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264DpbSlotInfoEXT_pStdReferenceInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264DpbSlotInfoEXT, pStdReferenceInfo));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264VclFrameInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264VclFrameInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264VclFrameInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264VclFrameInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264VclFrameInfoEXT_pReferenceFinalLists_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264VclFrameInfoEXT, pReferenceFinalLists));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264VclFrameInfoEXT_naluSliceEntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264VclFrameInfoEXT, naluSliceEntryCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264VclFrameInfoEXT_pNaluSliceEntries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264VclFrameInfoEXT, pNaluSliceEntries));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264VclFrameInfoEXT_pCurrentPictureInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264VclFrameInfoEXT, pCurrentPictureInfo));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ReferenceListsInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ReferenceListsInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ReferenceListsInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ReferenceListsInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ReferenceListsInfoEXT_referenceList0EntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ReferenceListsInfoEXT, referenceList0EntryCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ReferenceListsInfoEXT_pReferenceList0Entries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ReferenceListsInfoEXT, pReferenceList0Entries));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ReferenceListsInfoEXT_referenceList1EntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ReferenceListsInfoEXT, referenceList1EntryCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ReferenceListsInfoEXT_pReferenceList1Entries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ReferenceListsInfoEXT, pReferenceList1Entries));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ReferenceListsInfoEXT_pMemMgmtCtrlOperations_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ReferenceListsInfoEXT, pMemMgmtCtrlOperations));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264EmitPictureParametersInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264EmitPictureParametersInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264EmitPictureParametersInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264EmitPictureParametersInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264EmitPictureParametersInfoEXT_spsId_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264EmitPictureParametersInfoEXT, spsId));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264EmitPictureParametersInfoEXT_emitSpsEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264EmitPictureParametersInfoEXT, emitSpsEnable));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264EmitPictureParametersInfoEXT_ppsIdEntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264EmitPictureParametersInfoEXT, ppsIdEntryCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264EmitPictureParametersInfoEXT_ppsIdEntries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264EmitPictureParametersInfoEXT, ppsIdEntries));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ProfileInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ProfileInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ProfileInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ProfileInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264ProfileInfoEXT_stdProfileIdc_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264ProfileInfoEXT, stdProfileIdc));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264NaluSliceInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264NaluSliceInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264NaluSliceInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264NaluSliceInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264NaluSliceInfoEXT_mbCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264NaluSliceInfoEXT, mbCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264NaluSliceInfoEXT_pReferenceFinalLists_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264NaluSliceInfoEXT, pReferenceFinalLists));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264NaluSliceInfoEXT_pSliceHeaderStd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264NaluSliceInfoEXT, pSliceHeaderStd));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlInfoEXT_gopFrameCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlInfoEXT, gopFrameCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlInfoEXT_idrPeriod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlInfoEXT, idrPeriod));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlInfoEXT_consecutiveBFrameCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlInfoEXT, consecutiveBFrameCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlInfoEXT_rateControlStructure_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlInfoEXT, rateControlStructure));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlInfoEXT_temporalLayerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlInfoEXT, temporalLayerCount));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264QpEXT_qpI_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264QpEXT, qpI));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264QpEXT_qpP_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264QpEXT, qpP));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264QpEXT_qpB_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264QpEXT, qpB));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264FrameSizeEXT_frameISize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264FrameSizeEXT, frameISize));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264FrameSizeEXT_framePSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264FrameSizeEXT, framePSize));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264FrameSizeEXT_frameBSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264FrameSizeEXT, frameBSize));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_temporalLayerId_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, temporalLayerId));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_useInitialRcQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, useInitialRcQp));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_initialRcQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, initialRcQp));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_useMinQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, useMinQp));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_minQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, minQp));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_useMaxQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, useMaxQp));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_maxQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, maxQp));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_useMaxFrameSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, useMaxFrameSize));
}
#endif

#ifdef VK_EXT_video_encode_h264
static Napi::Value VkVideoEncodeH264RateControlLayerInfoEXT_maxFrameSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH264RateControlLayerInfoEXT, maxFrameSize));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, flags));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_inputModeFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, inputModeFlags));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_outputModeFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, outputModeFlags));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_ctbSizes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, ctbSizes));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_transformBlockSizes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, transformBlockSizes));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxPPictureL0ReferenceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxPPictureL0ReferenceCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxBPictureL0ReferenceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxBPictureL0ReferenceCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxL1ReferenceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxL1ReferenceCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxSubLayersCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxSubLayersCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_minLog2MinLumaCodingBlockSizeMinus3_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, minLog2MinLumaCodingBlockSizeMinus3));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxLog2MinLumaCodingBlockSizeMinus3_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxLog2MinLumaCodingBlockSizeMinus3));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_minLog2MinLumaTransformBlockSizeMinus2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, minLog2MinLumaTransformBlockSizeMinus2));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxLog2MinLumaTransformBlockSizeMinus2_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxLog2MinLumaTransformBlockSizeMinus2));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_minMaxTransformHierarchyDepthInter_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, minMaxTransformHierarchyDepthInter));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxMaxTransformHierarchyDepthInter_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxMaxTransformHierarchyDepthInter));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_minMaxTransformHierarchyDepthIntra_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, minMaxTransformHierarchyDepthIntra));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxMaxTransformHierarchyDepthIntra_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxMaxTransformHierarchyDepthIntra));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxDiffCuQpDeltaDepth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxDiffCuQpDeltaDepth));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_minMaxNumMergeCand_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, minMaxNumMergeCand));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265CapabilitiesEXT_maxMaxNumMergeCand_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265CapabilitiesEXT, maxMaxNumMergeCand));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersAddInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersAddInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersAddInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersAddInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersAddInfoEXT_stdVPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersAddInfoEXT, stdVPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersAddInfoEXT_pStdVPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersAddInfoEXT, pStdVPSs));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersAddInfoEXT_stdSPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersAddInfoEXT, stdSPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersAddInfoEXT_pStdSPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersAddInfoEXT, pStdSPSs));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersAddInfoEXT_stdPPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersAddInfoEXT, stdPPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersAddInfoEXT_pStdPPSs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersAddInfoEXT, pStdPPSs));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersCreateInfoEXT_maxStdVPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersCreateInfoEXT, maxStdVPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersCreateInfoEXT, maxStdSPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersCreateInfoEXT, maxStdPPSCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265SessionParametersCreateInfoEXT, pParametersAddInfo));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265VclFrameInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265VclFrameInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265VclFrameInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265VclFrameInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265VclFrameInfoEXT_pReferenceFinalLists_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265VclFrameInfoEXT, pReferenceFinalLists));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265VclFrameInfoEXT_naluSliceSegmentEntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265VclFrameInfoEXT, naluSliceSegmentEntryCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265VclFrameInfoEXT_pNaluSliceSegmentEntries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265VclFrameInfoEXT, pNaluSliceSegmentEntries));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265VclFrameInfoEXT_pCurrentPictureInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265VclFrameInfoEXT, pCurrentPictureInfo));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265EmitPictureParametersInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265EmitPictureParametersInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265EmitPictureParametersInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265EmitPictureParametersInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265EmitPictureParametersInfoEXT_vpsId_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265EmitPictureParametersInfoEXT, vpsId));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265EmitPictureParametersInfoEXT_spsId_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265EmitPictureParametersInfoEXT, spsId));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265EmitPictureParametersInfoEXT_emitVpsEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265EmitPictureParametersInfoEXT, emitVpsEnable));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265EmitPictureParametersInfoEXT_emitSpsEnable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265EmitPictureParametersInfoEXT, emitSpsEnable));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265EmitPictureParametersInfoEXT_ppsIdEntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265EmitPictureParametersInfoEXT, ppsIdEntryCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265EmitPictureParametersInfoEXT_ppsIdEntries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265EmitPictureParametersInfoEXT, ppsIdEntries));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265NaluSliceSegmentInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265NaluSliceSegmentInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265NaluSliceSegmentInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265NaluSliceSegmentInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265NaluSliceSegmentInfoEXT_ctbCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265NaluSliceSegmentInfoEXT, ctbCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265NaluSliceSegmentInfoEXT_pReferenceFinalLists_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265NaluSliceSegmentInfoEXT, pReferenceFinalLists));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265NaluSliceSegmentInfoEXT_pSliceSegmentHeaderStd_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265NaluSliceSegmentInfoEXT, pSliceSegmentHeaderStd));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlInfoEXT_gopFrameCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlInfoEXT, gopFrameCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlInfoEXT_idrPeriod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlInfoEXT, idrPeriod));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlInfoEXT_consecutiveBFrameCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlInfoEXT, consecutiveBFrameCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlInfoEXT_rateControlStructure_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlInfoEXT, rateControlStructure));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlInfoEXT_subLayerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlInfoEXT, subLayerCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265QpEXT_qpI_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265QpEXT, qpI));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265QpEXT_qpP_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265QpEXT, qpP));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265QpEXT_qpB_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265QpEXT, qpB));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265FrameSizeEXT_frameISize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265FrameSizeEXT, frameISize));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265FrameSizeEXT_framePSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265FrameSizeEXT, framePSize));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265FrameSizeEXT_frameBSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265FrameSizeEXT, frameBSize));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_temporalId_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, temporalId));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_useInitialRcQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, useInitialRcQp));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_initialRcQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, initialRcQp));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_useMinQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, useMinQp));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_minQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, minQp));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_useMaxQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, useMaxQp));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_maxQp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, maxQp));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_useMaxFrameSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, useMaxFrameSize));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265RateControlLayerInfoEXT_maxFrameSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265RateControlLayerInfoEXT, maxFrameSize));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ProfileInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ProfileInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ProfileInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ProfileInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ProfileInfoEXT_stdProfileIdc_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ProfileInfoEXT, stdProfileIdc));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265DpbSlotInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265DpbSlotInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265DpbSlotInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265DpbSlotInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265DpbSlotInfoEXT_slotIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265DpbSlotInfoEXT, slotIndex));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265DpbSlotInfoEXT_pStdReferenceInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265DpbSlotInfoEXT, pStdReferenceInfo));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ReferenceListsInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ReferenceListsInfoEXT, sType));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ReferenceListsInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ReferenceListsInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ReferenceListsInfoEXT_referenceList0EntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ReferenceListsInfoEXT, referenceList0EntryCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ReferenceListsInfoEXT_pReferenceList0Entries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ReferenceListsInfoEXT, pReferenceList0Entries));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ReferenceListsInfoEXT_referenceList1EntryCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ReferenceListsInfoEXT, referenceList1EntryCount));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ReferenceListsInfoEXT_pReferenceList1Entries_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ReferenceListsInfoEXT, pReferenceList1Entries));
}
#endif

#ifdef VK_EXT_video_encode_h265
static Napi::Value VkVideoEncodeH265ReferenceListsInfoEXT_pReferenceModifications_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkVideoEncodeH265ReferenceListsInfoEXT, pReferenceModifications));
}
#endif

#ifdef VK_NV_inherited_viewport_scissor
static Napi::Value VkPhysicalDeviceInheritedViewportScissorFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInheritedViewportScissorFeaturesNV, sType));
}
#endif

#ifdef VK_NV_inherited_viewport_scissor
static Napi::Value VkPhysicalDeviceInheritedViewportScissorFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInheritedViewportScissorFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_inherited_viewport_scissor
static Napi::Value VkPhysicalDeviceInheritedViewportScissorFeaturesNV_inheritedViewportScissor2D_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceInheritedViewportScissorFeaturesNV, inheritedViewportScissor2D));
}
#endif

#ifdef VK_NV_inherited_viewport_scissor
static Napi::Value VkCommandBufferInheritanceViewportScissorInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceViewportScissorInfoNV, sType));
}
#endif

#ifdef VK_NV_inherited_viewport_scissor
static Napi::Value VkCommandBufferInheritanceViewportScissorInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceViewportScissorInfoNV, pNext));
}
#endif

#ifdef VK_NV_inherited_viewport_scissor
static Napi::Value VkCommandBufferInheritanceViewportScissorInfoNV_viewportScissor2D_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceViewportScissorInfoNV, viewportScissor2D));
}
#endif

#ifdef VK_NV_inherited_viewport_scissor
static Napi::Value VkCommandBufferInheritanceViewportScissorInfoNV_viewportDepthCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceViewportScissorInfoNV, viewportDepthCount));
}
#endif

#ifdef VK_NV_inherited_viewport_scissor
static Napi::Value VkCommandBufferInheritanceViewportScissorInfoNV_pViewportDepths_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceViewportScissorInfoNV, pViewportDepths));
}
#endif

#ifdef VK_EXT_ycbcr_2plane_444_formats
static Napi::Value VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_ycbcr_2plane_444_formats
static Napi::Value VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_ycbcr_2plane_444_formats
static Napi::Value VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_ycbcr2plane444Formats_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, ycbcr2plane444Formats));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPhysicalDeviceProvokingVertexFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProvokingVertexFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPhysicalDeviceProvokingVertexFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProvokingVertexFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPhysicalDeviceProvokingVertexFeaturesEXT_provokingVertexLast_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProvokingVertexFeaturesEXT, provokingVertexLast));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPhysicalDeviceProvokingVertexFeaturesEXT_transformFeedbackPreservesProvokingVertex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProvokingVertexFeaturesEXT, transformFeedbackPreservesProvokingVertex));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPhysicalDeviceProvokingVertexPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProvokingVertexPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPhysicalDeviceProvokingVertexPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProvokingVertexPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPhysicalDeviceProvokingVertexPropertiesEXT_provokingVertexModePerPipeline_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProvokingVertexPropertiesEXT, provokingVertexModePerPipeline));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPhysicalDeviceProvokingVertexPropertiesEXT_transformFeedbackPreservesTriangleFanProvokingVertex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceProvokingVertexPropertiesEXT, transformFeedbackPreservesTriangleFanProvokingVertex));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_provoking_vertex
static Napi::Value VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_provokingVertexMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT, provokingVertexMode));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuModuleCreateInfoNVX_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuModuleCreateInfoNVX, sType));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuModuleCreateInfoNVX_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuModuleCreateInfoNVX, pNext));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuModuleCreateInfoNVX_dataSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuModuleCreateInfoNVX, dataSize));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuModuleCreateInfoNVX_pData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuModuleCreateInfoNVX, pData));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuFunctionCreateInfoNVX_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuFunctionCreateInfoNVX, sType));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuFunctionCreateInfoNVX_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuFunctionCreateInfoNVX, pNext));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuFunctionCreateInfoNVX_module_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuFunctionCreateInfoNVX, module));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuFunctionCreateInfoNVX_pName_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuFunctionCreateInfoNVX, pName));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, sType));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, pNext));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_function_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, function));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_gridDimX_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, gridDimX));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_gridDimY_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, gridDimY));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_gridDimZ_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, gridDimZ));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_blockDimX_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, blockDimX));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_blockDimY_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, blockDimY));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_blockDimZ_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, blockDimZ));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_sharedMemBytes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, sharedMemBytes));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_paramCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, paramCount));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_pParams_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, pParams));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_extraCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, extraCount));
}
#endif

#ifdef VK_NVX_binary_import
static Napi::Value VkCuLaunchInfoNVX_pExtras_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCuLaunchInfoNVX, pExtras));
}
#endif


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductFeatures, sType));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductFeatures_shaderIntegerDotProduct_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductFeatures, shaderIntegerDotProduct));
}



static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, sType));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, pNext));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct8BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct8BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct8BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct8BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct8BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct8BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct4x8BitPackedUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct4x8BitPackedUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct4x8BitPackedSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct4x8BitPackedSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct4x8BitPackedMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct4x8BitPackedMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct16BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct16BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct16BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct16BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct16BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct16BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct32BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct32BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct32BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct32BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct32BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct32BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct64BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct64BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct64BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct64BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct64BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct64BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating8BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating8BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating8BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating16BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating16BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating16BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating32BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating32BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating32BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating64BitUnsignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating64BitSignedAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating64BitSignedAccelerated));
}


static Napi::Value VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated));
}


#ifdef VK_EXT_physical_device_drm
static Napi::Value VkPhysicalDeviceDrmPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDrmPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_physical_device_drm
static Napi::Value VkPhysicalDeviceDrmPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDrmPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_physical_device_drm
static Napi::Value VkPhysicalDeviceDrmPropertiesEXT_hasPrimary_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDrmPropertiesEXT, hasPrimary));
}
#endif

#ifdef VK_EXT_physical_device_drm
static Napi::Value VkPhysicalDeviceDrmPropertiesEXT_hasRender_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDrmPropertiesEXT, hasRender));
}
#endif

#ifdef VK_EXT_physical_device_drm
static Napi::Value VkPhysicalDeviceDrmPropertiesEXT_primaryMajor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDrmPropertiesEXT, primaryMajor));
}
#endif

#ifdef VK_EXT_physical_device_drm
static Napi::Value VkPhysicalDeviceDrmPropertiesEXT_primaryMinor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDrmPropertiesEXT, primaryMinor));
}
#endif

#ifdef VK_EXT_physical_device_drm
static Napi::Value VkPhysicalDeviceDrmPropertiesEXT_renderMajor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDrmPropertiesEXT, renderMajor));
}
#endif

#ifdef VK_EXT_physical_device_drm
static Napi::Value VkPhysicalDeviceDrmPropertiesEXT_renderMinor_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDrmPropertiesEXT, renderMinor));
}
#endif

#ifdef VK_KHR_fragment_shader_barycentric
static Napi::Value VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, sType));
}
#endif

#ifdef VK_KHR_fragment_shader_barycentric
static Napi::Value VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, pNext));
}
#endif

#ifdef VK_KHR_fragment_shader_barycentric
static Napi::Value VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_fragmentShaderBarycentric_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, fragmentShaderBarycentric));
}
#endif

#ifdef VK_KHR_fragment_shader_barycentric
static Napi::Value VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR, sType));
}
#endif

#ifdef VK_KHR_fragment_shader_barycentric
static Napi::Value VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR, pNext));
}
#endif

#ifdef VK_KHR_fragment_shader_barycentric
static Napi::Value VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_triStripVertexOrderIndependentOfProvokingVertex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR, triStripVertexOrderIndependentOfProvokingVertex));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_rayTracingMotionBlur_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV, rayTracingMotionBlur));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_rayTracingMotionBlurPipelineTraceRaysIndirect_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV, rayTracingMotionBlurPipelineTraceRaysIndirect));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureGeometryMotionTrianglesDataNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryMotionTrianglesDataNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureGeometryMotionTrianglesDataNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryMotionTrianglesDataNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureGeometryMotionTrianglesDataNV_vertexData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureGeometryMotionTrianglesDataNV, vertexData));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMotionInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMotionInfoNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMotionInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMotionInfoNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMotionInfoNV_maxInstances_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMotionInfoNV, maxInstances));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMotionInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMotionInfoNV, flags));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_sx_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, sx));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_a_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, a));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_b_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, b));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_pvx_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, pvx));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_sy_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, sy));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_c_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, c));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_pvy_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, pvy));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_sz_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, sz));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_pvz_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, pvz));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_qx_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, qx));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_qy_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, qy));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_qz_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, qz));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_qw_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, qw));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_tx_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, tx));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_ty_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, ty));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkSRTDataNV_tz_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSRTDataNV, tz));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureSRTMotionInstanceNV_transformT0_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureSRTMotionInstanceNV, transformT0));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureSRTMotionInstanceNV_transformT1_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureSRTMotionInstanceNV, transformT1));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureSRTMotionInstanceNV_accelerationStructureReference_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureSRTMotionInstanceNV, accelerationStructureReference));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMatrixMotionInstanceNV_transformT0_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMatrixMotionInstanceNV, transformT0));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMatrixMotionInstanceNV_transformT1_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMatrixMotionInstanceNV, transformT1));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMatrixMotionInstanceNV_accelerationStructureReference_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMatrixMotionInstanceNV, accelerationStructureReference));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMotionInstanceNV_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMotionInstanceNV, type));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMotionInstanceNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMotionInstanceNV, flags));
}
#endif

#ifdef VK_NV_ray_tracing_motion_blur
static Napi::Value VkAccelerationStructureMotionInstanceNV_data_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureMotionInstanceNV, data));
}
#endif

#ifdef VK_NV_external_memory_rdma
static Napi::Value VkMemoryGetRemoteAddressInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetRemoteAddressInfoNV, sType));
}
#endif

#ifdef VK_NV_external_memory_rdma
static Napi::Value VkMemoryGetRemoteAddressInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetRemoteAddressInfoNV, pNext));
}
#endif

#ifdef VK_NV_external_memory_rdma
static Napi::Value VkMemoryGetRemoteAddressInfoNV_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetRemoteAddressInfoNV, memory));
}
#endif

#ifdef VK_NV_external_memory_rdma
static Napi::Value VkMemoryGetRemoteAddressInfoNV_handleType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMemoryGetRemoteAddressInfoNV, handleType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImportMemoryBufferCollectionFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryBufferCollectionFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImportMemoryBufferCollectionFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryBufferCollectionFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImportMemoryBufferCollectionFUCHSIA_collection_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryBufferCollectionFUCHSIA, collection));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImportMemoryBufferCollectionFUCHSIA_index_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMemoryBufferCollectionFUCHSIA, index));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionImageCreateInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionImageCreateInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionImageCreateInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionImageCreateInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionImageCreateInfoFUCHSIA_collection_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionImageCreateInfoFUCHSIA, collection));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionImageCreateInfoFUCHSIA_index_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionImageCreateInfoFUCHSIA, index));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionBufferCreateInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionBufferCreateInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionBufferCreateInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionBufferCreateInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionBufferCreateInfoFUCHSIA_collection_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionBufferCreateInfoFUCHSIA, collection));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionBufferCreateInfoFUCHSIA_index_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionBufferCreateInfoFUCHSIA, index));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionCreateInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionCreateInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionCreateInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionCreateInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionCreateInfoFUCHSIA_collectionToken_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionCreateInfoFUCHSIA, collectionToken));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_memoryTypeBits_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, memoryTypeBits));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_bufferCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, bufferCount));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_createInfoIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, createInfoIndex));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_sysmemPixelFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, sysmemPixelFormat));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_formatFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, formatFeatures));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_sysmemColorSpaceIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, sysmemColorSpaceIndex));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_samplerYcbcrConversionComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, samplerYcbcrConversionComponents));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_suggestedYcbcrModel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, suggestedYcbcrModel));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_suggestedYcbcrRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, suggestedYcbcrRange));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_suggestedXChromaOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, suggestedXChromaOffset));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionPropertiesFUCHSIA_suggestedYChromaOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionPropertiesFUCHSIA, suggestedYChromaOffset));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferConstraintsInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferConstraintsInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferConstraintsInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferConstraintsInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferConstraintsInfoFUCHSIA_createInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferConstraintsInfoFUCHSIA, createInfo));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferConstraintsInfoFUCHSIA_requiredFormatFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferConstraintsInfoFUCHSIA, requiredFormatFeatures));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferConstraintsInfoFUCHSIA_bufferCollectionConstraints_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferConstraintsInfoFUCHSIA, bufferCollectionConstraints));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkSysmemColorSpaceFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSysmemColorSpaceFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkSysmemColorSpaceFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSysmemColorSpaceFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkSysmemColorSpaceFUCHSIA_colorSpace_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSysmemColorSpaceFUCHSIA, colorSpace));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageFormatConstraintsInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatConstraintsInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageFormatConstraintsInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatConstraintsInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageFormatConstraintsInfoFUCHSIA_imageCreateInfo_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatConstraintsInfoFUCHSIA, imageCreateInfo));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageFormatConstraintsInfoFUCHSIA_requiredFormatFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatConstraintsInfoFUCHSIA, requiredFormatFeatures));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageFormatConstraintsInfoFUCHSIA_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatConstraintsInfoFUCHSIA, flags));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageFormatConstraintsInfoFUCHSIA_sysmemPixelFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatConstraintsInfoFUCHSIA, sysmemPixelFormat));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageFormatConstraintsInfoFUCHSIA_colorSpaceCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatConstraintsInfoFUCHSIA, colorSpaceCount));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageFormatConstraintsInfoFUCHSIA_pColorSpaces_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageFormatConstraintsInfoFUCHSIA, pColorSpaces));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageConstraintsInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageConstraintsInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageConstraintsInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageConstraintsInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageConstraintsInfoFUCHSIA_formatConstraintsCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageConstraintsInfoFUCHSIA, formatConstraintsCount));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageConstraintsInfoFUCHSIA_pFormatConstraints_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageConstraintsInfoFUCHSIA, pFormatConstraints));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageConstraintsInfoFUCHSIA_bufferCollectionConstraints_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageConstraintsInfoFUCHSIA, bufferCollectionConstraints));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkImageConstraintsInfoFUCHSIA_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageConstraintsInfoFUCHSIA, flags));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionConstraintsInfoFUCHSIA_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionConstraintsInfoFUCHSIA, sType));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionConstraintsInfoFUCHSIA_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionConstraintsInfoFUCHSIA, pNext));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionConstraintsInfoFUCHSIA, minBufferCount));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionConstraintsInfoFUCHSIA_maxBufferCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionConstraintsInfoFUCHSIA, maxBufferCount));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCountForCamping_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionConstraintsInfoFUCHSIA, minBufferCountForCamping));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCountForDedicatedSlack_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionConstraintsInfoFUCHSIA, minBufferCountForDedicatedSlack));
}
#endif

#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCountForSharedSlack_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkBufferCollectionConstraintsInfoFUCHSIA, minBufferCountForSharedSlack));
}
#endif

#ifdef VK_EXT_rgba10x6_formats
static Napi::Value VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_rgba10x6_formats
static Napi::Value VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_rgba10x6_formats
static Napi::Value VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_formatRgba10x6WithoutYCbCrSampler_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, formatRgba10x6WithoutYCbCrSampler));
}
#endif


static Napi::Value VkFormatProperties3_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties3, sType));
}


static Napi::Value VkFormatProperties3_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties3, pNext));
}


static Napi::Value VkFormatProperties3_linearTilingFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties3, linearTilingFeatures));
}


static Napi::Value VkFormatProperties3_optimalTilingFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties3, optimalTilingFeatures));
}


static Napi::Value VkFormatProperties3_bufferFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkFormatProperties3, bufferFeatures));
}


#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesList2EXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesList2EXT, sType));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesList2EXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesList2EXT, pNext));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesList2EXT_drmFormatModifierCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesList2EXT, drmFormatModifierCount));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierPropertiesList2EXT_pDrmFormatModifierProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierPropertiesList2EXT, pDrmFormatModifierProperties));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierProperties2EXT_drmFormatModifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierProperties2EXT, drmFormatModifier));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierProperties2EXT_drmFormatModifierPlaneCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierProperties2EXT, drmFormatModifierPlaneCount));
}
#endif

#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value VkDrmFormatModifierProperties2EXT_drmFormatModifierTilingFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDrmFormatModifierProperties2EXT, drmFormatModifierTilingFeatures));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, sType));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, pNext));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, format));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_externalFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, externalFormat));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_formatFeatures_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, formatFeatures));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_samplerYcbcrConversionComponents_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, samplerYcbcrConversionComponents));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedYcbcrModel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, suggestedYcbcrModel));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedYcbcrRange_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, suggestedYcbcrRange));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedXChromaOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, suggestedXChromaOffset));
}
#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedYChromaOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAndroidHardwareBufferFormatProperties2ANDROID, suggestedYChromaOffset));
}
#endif


static Napi::Value VkPipelineRenderingCreateInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRenderingCreateInfo, sType));
}


static Napi::Value VkPipelineRenderingCreateInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRenderingCreateInfo, pNext));
}


static Napi::Value VkPipelineRenderingCreateInfo_viewMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRenderingCreateInfo, viewMask));
}


static Napi::Value VkPipelineRenderingCreateInfo_colorAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRenderingCreateInfo, colorAttachmentCount));
}


static Napi::Value VkPipelineRenderingCreateInfo_pColorAttachmentFormats_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRenderingCreateInfo, pColorAttachmentFormats));
}


static Napi::Value VkPipelineRenderingCreateInfo_depthAttachmentFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRenderingCreateInfo, depthAttachmentFormat));
}


static Napi::Value VkPipelineRenderingCreateInfo_stencilAttachmentFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRenderingCreateInfo, stencilAttachmentFormat));
}



static Napi::Value VkRenderingInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, sType));
}


static Napi::Value VkRenderingInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, pNext));
}


static Napi::Value VkRenderingInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, flags));
}


static Napi::Value VkRenderingInfo_renderArea_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, renderArea));
}


static Napi::Value VkRenderingInfo_layerCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, layerCount));
}


static Napi::Value VkRenderingInfo_viewMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, viewMask));
}


static Napi::Value VkRenderingInfo_colorAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, colorAttachmentCount));
}


static Napi::Value VkRenderingInfo_pColorAttachments_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, pColorAttachments));
}


static Napi::Value VkRenderingInfo_pDepthAttachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, pDepthAttachment));
}


static Napi::Value VkRenderingInfo_pStencilAttachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingInfo, pStencilAttachment));
}



static Napi::Value VkRenderingAttachmentInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, sType));
}


static Napi::Value VkRenderingAttachmentInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, pNext));
}


static Napi::Value VkRenderingAttachmentInfo_imageView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, imageView));
}


static Napi::Value VkRenderingAttachmentInfo_imageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, imageLayout));
}


static Napi::Value VkRenderingAttachmentInfo_resolveMode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, resolveMode));
}


static Napi::Value VkRenderingAttachmentInfo_resolveImageView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, resolveImageView));
}


static Napi::Value VkRenderingAttachmentInfo_resolveImageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, resolveImageLayout));
}


static Napi::Value VkRenderingAttachmentInfo_loadOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, loadOp));
}


static Napi::Value VkRenderingAttachmentInfo_storeOp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, storeOp));
}


static Napi::Value VkRenderingAttachmentInfo_clearValue_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingAttachmentInfo, clearValue));
}


#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkRenderingFragmentShadingRateAttachmentInfoKHR_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, sType));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkRenderingFragmentShadingRateAttachmentInfoKHR_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, pNext));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkRenderingFragmentShadingRateAttachmentInfoKHR_imageView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, imageView));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkRenderingFragmentShadingRateAttachmentInfoKHR_imageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, imageLayout));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkRenderingFragmentShadingRateAttachmentInfoKHR_shadingRateAttachmentTexelSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, shadingRateAttachmentTexelSize));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkRenderingFragmentDensityMapAttachmentInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingFragmentDensityMapAttachmentInfoEXT, sType));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkRenderingFragmentDensityMapAttachmentInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingFragmentDensityMapAttachmentInfoEXT, pNext));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkRenderingFragmentDensityMapAttachmentInfoEXT_imageView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingFragmentDensityMapAttachmentInfoEXT, imageView));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkRenderingFragmentDensityMapAttachmentInfoEXT_imageLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderingFragmentDensityMapAttachmentInfoEXT, imageLayout));
}
#endif


static Napi::Value VkPhysicalDeviceDynamicRenderingFeatures_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDynamicRenderingFeatures, sType));
}


static Napi::Value VkPhysicalDeviceDynamicRenderingFeatures_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDynamicRenderingFeatures, pNext));
}


static Napi::Value VkPhysicalDeviceDynamicRenderingFeatures_dynamicRendering_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDynamicRenderingFeatures, dynamicRendering));
}



static Napi::Value VkCommandBufferInheritanceRenderingInfo_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderingInfo, sType));
}


static Napi::Value VkCommandBufferInheritanceRenderingInfo_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderingInfo, pNext));
}


static Napi::Value VkCommandBufferInheritanceRenderingInfo_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderingInfo, flags));
}


static Napi::Value VkCommandBufferInheritanceRenderingInfo_viewMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderingInfo, viewMask));
}


static Napi::Value VkCommandBufferInheritanceRenderingInfo_colorAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderingInfo, colorAttachmentCount));
}


static Napi::Value VkCommandBufferInheritanceRenderingInfo_pColorAttachmentFormats_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderingInfo, pColorAttachmentFormats));
}


static Napi::Value VkCommandBufferInheritanceRenderingInfo_depthAttachmentFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderingInfo, depthAttachmentFormat));
}


static Napi::Value VkCommandBufferInheritanceRenderingInfo_stencilAttachmentFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderingInfo, stencilAttachmentFormat));
}


static Napi::Value VkCommandBufferInheritanceRenderingInfo_rasterizationSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCommandBufferInheritanceRenderingInfo, rasterizationSamples));
}


#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkAttachmentSampleCountInfoAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentSampleCountInfoAMD, sType));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkAttachmentSampleCountInfoAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentSampleCountInfoAMD, pNext));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkAttachmentSampleCountInfoAMD_colorAttachmentCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentSampleCountInfoAMD, colorAttachmentCount));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkAttachmentSampleCountInfoAMD_pColorAttachmentSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentSampleCountInfoAMD, pColorAttachmentSamples));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkAttachmentSampleCountInfoAMD_depthStencilAttachmentSamples_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAttachmentSampleCountInfoAMD, depthStencilAttachmentSamples));
}
#endif


#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkMultiviewPerViewAttributesInfoNVX_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultiviewPerViewAttributesInfoNVX, sType));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkMultiviewPerViewAttributesInfoNVX_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultiviewPerViewAttributesInfoNVX, pNext));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkMultiviewPerViewAttributesInfoNVX_perViewAttributes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultiviewPerViewAttributesInfoNVX, perViewAttributes));
}
#endif

#ifdef VK_KHR_dynamic_rendering
static Napi::Value VkMultiviewPerViewAttributesInfoNVX_perViewAttributesPositionXOnly_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMultiviewPerViewAttributesInfoNVX, perViewAttributesPositionXOnly));
}
#endif

#ifdef VK_EXT_image_view_min_lod
static Napi::Value VkPhysicalDeviceImageViewMinLodFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageViewMinLodFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_image_view_min_lod
static Napi::Value VkPhysicalDeviceImageViewMinLodFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageViewMinLodFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_image_view_min_lod
static Napi::Value VkPhysicalDeviceImageViewMinLodFeaturesEXT_minLod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageViewMinLodFeaturesEXT, minLod));
}
#endif

#ifdef VK_EXT_image_view_min_lod
static Napi::Value VkImageViewMinLodCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewMinLodCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_image_view_min_lod
static Napi::Value VkImageViewMinLodCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewMinLodCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_image_view_min_lod
static Napi::Value VkImageViewMinLodCreateInfoEXT_minLod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewMinLodCreateInfoEXT, minLod));
}
#endif

#ifdef VK_EXT_rasterization_order_attachment_access
static Napi::Value VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_rasterization_order_attachment_access
static Napi::Value VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_rasterization_order_attachment_access
static Napi::Value VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_rasterizationOrderColorAttachmentAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, rasterizationOrderColorAttachmentAccess));
}
#endif

#ifdef VK_EXT_rasterization_order_attachment_access
static Napi::Value VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_rasterizationOrderDepthAttachmentAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, rasterizationOrderDepthAttachmentAccess));
}
#endif

#ifdef VK_EXT_rasterization_order_attachment_access
static Napi::Value VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_rasterizationOrderStencilAttachmentAccess_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, rasterizationOrderStencilAttachmentAccess));
}
#endif


#ifdef VK_NV_linear_color_attachment
static Napi::Value VkPhysicalDeviceLinearColorAttachmentFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLinearColorAttachmentFeaturesNV, sType));
}
#endif

#ifdef VK_NV_linear_color_attachment
static Napi::Value VkPhysicalDeviceLinearColorAttachmentFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLinearColorAttachmentFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_linear_color_attachment
static Napi::Value VkPhysicalDeviceLinearColorAttachmentFeaturesNV_linearColorAttachment_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceLinearColorAttachmentFeaturesNV, linearColorAttachment));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_graphicsPipelineLibrary_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT, graphicsPipelineLibrary));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_graphicsPipelineLibraryFastLinking_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, graphicsPipelineLibraryFastLinking));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_graphicsPipelineLibraryIndependentInterpolationDecoration_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, graphicsPipelineLibraryIndependentInterpolationDecoration));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkGraphicsPipelineLibraryCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineLibraryCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkGraphicsPipelineLibraryCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineLibraryCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_graphics_pipeline_library
static Napi::Value VkGraphicsPipelineLibraryCreateInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkGraphicsPipelineLibraryCreateInfoEXT, flags));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE, sType));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE, pNext));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_descriptorSetHostMapping_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE, descriptorSetHostMapping));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkDescriptorSetBindingReferenceVALVE_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetBindingReferenceVALVE, sType));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkDescriptorSetBindingReferenceVALVE_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetBindingReferenceVALVE, pNext));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkDescriptorSetBindingReferenceVALVE_descriptorSetLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetBindingReferenceVALVE, descriptorSetLayout));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkDescriptorSetBindingReferenceVALVE_binding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetBindingReferenceVALVE, binding));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkDescriptorSetLayoutHostMappingInfoVALVE_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutHostMappingInfoVALVE, sType));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkDescriptorSetLayoutHostMappingInfoVALVE_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutHostMappingInfoVALVE, pNext));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkDescriptorSetLayoutHostMappingInfoVALVE_descriptorOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutHostMappingInfoVALVE, descriptorOffset));
}
#endif

#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value VkDescriptorSetLayoutHostMappingInfoVALVE_descriptorSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDescriptorSetLayoutHostMappingInfoVALVE, descriptorSize));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_shaderModuleIdentifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, shaderModuleIdentifier));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_shaderModuleIdentifierAlgorithmUUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT, shaderModuleIdentifierAlgorithmUUID));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPipelineShaderStageModuleIdentifierCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPipelineShaderStageModuleIdentifierCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPipelineShaderStageModuleIdentifierCreateInfoEXT_identifierSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, identifierSize));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkPipelineShaderStageModuleIdentifierCreateInfoEXT_pIdentifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, pIdentifier));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkShaderModuleIdentifierEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleIdentifierEXT, sType));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkShaderModuleIdentifierEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleIdentifierEXT, pNext));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkShaderModuleIdentifierEXT_identifierSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleIdentifierEXT, identifierSize));
}
#endif

#ifdef VK_EXT_shader_module_identifier
static Napi::Value VkShaderModuleIdentifierEXT_identifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkShaderModuleIdentifierEXT, identifier));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageCompressionControlEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCompressionControlEXT, sType));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageCompressionControlEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCompressionControlEXT, pNext));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageCompressionControlEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCompressionControlEXT, flags));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageCompressionControlEXT_compressionControlPlaneCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCompressionControlEXT, compressionControlPlaneCount));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageCompressionControlEXT_pFixedRateFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCompressionControlEXT, pFixedRateFlags));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkPhysicalDeviceImageCompressionControlFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageCompressionControlFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkPhysicalDeviceImageCompressionControlFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageCompressionControlFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkPhysicalDeviceImageCompressionControlFeaturesEXT_imageCompressionControl_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageCompressionControlFeaturesEXT, imageCompressionControl));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageCompressionPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCompressionPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageCompressionPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCompressionPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageCompressionPropertiesEXT_imageCompressionFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCompressionPropertiesEXT, imageCompressionFlags));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageCompressionPropertiesEXT_imageCompressionFixedRateFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageCompressionPropertiesEXT, imageCompressionFixedRateFlags));
}
#endif

#ifdef VK_EXT_image_compression_control_swapchain
static Napi::Value VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_image_compression_control_swapchain
static Napi::Value VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_image_compression_control_swapchain
static Napi::Value VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_imageCompressionControlSwapchain_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT, imageCompressionControlSwapchain));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageSubresource2EXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresource2EXT, sType));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageSubresource2EXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresource2EXT, pNext));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkImageSubresource2EXT_imageSubresource_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageSubresource2EXT, imageSubresource));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkSubresourceLayout2EXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubresourceLayout2EXT, sType));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkSubresourceLayout2EXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubresourceLayout2EXT, pNext));
}
#endif

#ifdef VK_EXT_image_compression_control
static Napi::Value VkSubresourceLayout2EXT_subresourceLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkSubresourceLayout2EXT, subresourceLayout));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassCreationControlEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreationControlEXT, sType));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassCreationControlEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreationControlEXT, pNext));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassCreationControlEXT_disallowMerging_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreationControlEXT, disallowMerging));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassCreationFeedbackInfoEXT_postMergeSubpassCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreationFeedbackInfoEXT, postMergeSubpassCount));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassCreationFeedbackCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreationFeedbackCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassCreationFeedbackCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreationFeedbackCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassCreationFeedbackCreateInfoEXT_pRenderPassFeedback_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassCreationFeedbackCreateInfoEXT, pRenderPassFeedback));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassSubpassFeedbackInfoEXT_subpassMergeStatus_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSubpassFeedbackInfoEXT, subpassMergeStatus));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassSubpassFeedbackInfoEXT_description_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSubpassFeedbackInfoEXT, description));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassSubpassFeedbackInfoEXT_postMergeIndex_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSubpassFeedbackInfoEXT, postMergeIndex));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassSubpassFeedbackCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSubpassFeedbackCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassSubpassFeedbackCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSubpassFeedbackCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkRenderPassSubpassFeedbackCreateInfoEXT_pSubpassFeedback_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkRenderPassSubpassFeedbackCreateInfoEXT, pSubpassFeedback));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_subpass_merge_feedback
static Napi::Value VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_subpassMergeFeedback_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, subpassMergeFeedback));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, type));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, flags));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, mode));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_dstMicromap_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, dstMicromap));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_usageCountsCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, usageCountsCount));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_pUsageCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, pUsageCounts));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_ppUsageCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, ppUsageCounts));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_data_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, data));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_scratchData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, scratchData));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_triangleArray_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, triangleArray));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildInfoEXT_triangleArrayStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildInfoEXT, triangleArrayStride));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapCreateInfoEXT_createFlags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapCreateInfoEXT, createFlags));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapCreateInfoEXT_buffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapCreateInfoEXT, buffer));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapCreateInfoEXT_offset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapCreateInfoEXT, offset));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapCreateInfoEXT_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapCreateInfoEXT, size));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapCreateInfoEXT_type_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapCreateInfoEXT, type));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapCreateInfoEXT_deviceAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapCreateInfoEXT, deviceAddress));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapVersionInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapVersionInfoEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapVersionInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapVersionInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapVersionInfoEXT_pVersionData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapVersionInfoEXT, pVersionData));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapInfoEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapInfoEXT_src_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapInfoEXT, src));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapInfoEXT_dst_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapInfoEXT, dst));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapInfoEXT_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapInfoEXT, mode));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapToMemoryInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapToMemoryInfoEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapToMemoryInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapToMemoryInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapToMemoryInfoEXT_src_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapToMemoryInfoEXT, src));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapToMemoryInfoEXT_dst_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapToMemoryInfoEXT, dst));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMicromapToMemoryInfoEXT_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMicromapToMemoryInfoEXT, mode));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMemoryToMicromapInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToMicromapInfoEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMemoryToMicromapInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToMicromapInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMemoryToMicromapInfoEXT_src_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToMicromapInfoEXT, src));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMemoryToMicromapInfoEXT_dst_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToMicromapInfoEXT, dst));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkCopyMemoryToMicromapInfoEXT_mode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkCopyMemoryToMicromapInfoEXT, mode));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildSizesInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildSizesInfoEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildSizesInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildSizesInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildSizesInfoEXT_micromapSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildSizesInfoEXT, micromapSize));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildSizesInfoEXT_buildScratchSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildSizesInfoEXT, buildScratchSize));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapBuildSizesInfoEXT_discardable_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapBuildSizesInfoEXT, discardable));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapUsageEXT_count_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapUsageEXT, count));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapUsageEXT_subdivisionLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapUsageEXT, subdivisionLevel));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapUsageEXT_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapUsageEXT, format));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapTriangleEXT_dataOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapTriangleEXT, dataOffset));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapTriangleEXT_subdivisionLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapTriangleEXT, subdivisionLevel));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkMicromapTriangleEXT_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkMicromapTriangleEXT, format));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkPhysicalDeviceOpacityMicromapFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpacityMicromapFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkPhysicalDeviceOpacityMicromapFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpacityMicromapFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkPhysicalDeviceOpacityMicromapFeaturesEXT_micromap_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpacityMicromapFeaturesEXT, micromap));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkPhysicalDeviceOpacityMicromapFeaturesEXT_micromapCaptureReplay_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpacityMicromapFeaturesEXT, micromapCaptureReplay));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkPhysicalDeviceOpacityMicromapFeaturesEXT_micromapHostCommands_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpacityMicromapFeaturesEXT, micromapHostCommands));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkPhysicalDeviceOpacityMicromapPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpacityMicromapPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkPhysicalDeviceOpacityMicromapPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpacityMicromapPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkPhysicalDeviceOpacityMicromapPropertiesEXT_maxOpacity2StateSubdivisionLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpacityMicromapPropertiesEXT, maxOpacity2StateSubdivisionLevel));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkPhysicalDeviceOpacityMicromapPropertiesEXT_maxOpacity4StateSubdivisionLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpacityMicromapPropertiesEXT, maxOpacity4StateSubdivisionLevel));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, sType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, pNext));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_indexType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, indexType));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_indexBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, indexBuffer));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_indexStride_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, indexStride));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_baseTriangle_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, baseTriangle));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_usageCountsCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, usageCountsCount));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_pUsageCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, pUsageCounts));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_ppUsageCounts_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, ppUsageCounts));
}
#endif

#ifdef VK_EXT_opacity_micromap
static Napi::Value VkAccelerationStructureTrianglesOpacityMicromapEXT_micromap_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAccelerationStructureTrianglesOpacityMicromapEXT, micromap));
}
#endif

#ifdef VK_EXT_pipeline_properties
static Napi::Value VkPipelinePropertiesIdentifierEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelinePropertiesIdentifierEXT, sType));
}
#endif

#ifdef VK_EXT_pipeline_properties
static Napi::Value VkPipelinePropertiesIdentifierEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelinePropertiesIdentifierEXT, pNext));
}
#endif

#ifdef VK_EXT_pipeline_properties
static Napi::Value VkPipelinePropertiesIdentifierEXT_pipelineIdentifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelinePropertiesIdentifierEXT, pipelineIdentifier));
}
#endif

#ifdef VK_EXT_pipeline_properties
static Napi::Value VkPhysicalDevicePipelinePropertiesFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelinePropertiesFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_pipeline_properties
static Napi::Value VkPhysicalDevicePipelinePropertiesFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelinePropertiesFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_pipeline_properties
static Napi::Value VkPhysicalDevicePipelinePropertiesFeaturesEXT_pipelinePropertiesIdentifier_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelinePropertiesFeaturesEXT, pipelinePropertiesIdentifier));
}
#endif

#ifdef VK_AMD_shader_early_and_late_fragment_tests
static Napi::Value VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD, sType));
}
#endif

#ifdef VK_AMD_shader_early_and_late_fragment_tests
static Napi::Value VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD, pNext));
}
#endif

#ifdef VK_AMD_shader_early_and_late_fragment_tests
static Napi::Value VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_shaderEarlyAndLateFragmentTests_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD, shaderEarlyAndLateFragmentTests));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalObjectCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalObjectCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalObjectCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalObjectCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalObjectCreateInfoEXT_exportObjectType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalObjectCreateInfoEXT, exportObjectType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalObjectsInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalObjectsInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalObjectsInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalObjectsInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalDeviceInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalDeviceInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalDeviceInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalDeviceInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalDeviceInfoEXT_mtlDevice_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalDeviceInfoEXT, mtlDevice));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalCommandQueueInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalCommandQueueInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalCommandQueueInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalCommandQueueInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalCommandQueueInfoEXT_queue_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalCommandQueueInfoEXT, queue));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalCommandQueueInfoEXT_mtlCommandQueue_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalCommandQueueInfoEXT, mtlCommandQueue));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalBufferInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalBufferInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalBufferInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalBufferInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalBufferInfoEXT_memory_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalBufferInfoEXT, memory));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalBufferInfoEXT_mtlBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalBufferInfoEXT, mtlBuffer));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalBufferInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalBufferInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalBufferInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalBufferInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalBufferInfoEXT_mtlBuffer_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalBufferInfoEXT, mtlBuffer));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalTextureInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalTextureInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalTextureInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalTextureInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalTextureInfoEXT_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalTextureInfoEXT, image));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalTextureInfoEXT_imageView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalTextureInfoEXT, imageView));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalTextureInfoEXT_bufferView_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalTextureInfoEXT, bufferView));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalTextureInfoEXT_plane_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalTextureInfoEXT, plane));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalTextureInfoEXT_mtlTexture_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalTextureInfoEXT, mtlTexture));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalTextureInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalTextureInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalTextureInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalTextureInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalTextureInfoEXT_plane_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalTextureInfoEXT, plane));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalTextureInfoEXT_mtlTexture_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalTextureInfoEXT, mtlTexture));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalIOSurfaceInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalIOSurfaceInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalIOSurfaceInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalIOSurfaceInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalIOSurfaceInfoEXT_image_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalIOSurfaceInfoEXT, image));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalIOSurfaceInfoEXT_ioSurface_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalIOSurfaceInfoEXT, ioSurface));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalIOSurfaceInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalIOSurfaceInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalIOSurfaceInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalIOSurfaceInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalIOSurfaceInfoEXT_ioSurface_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalIOSurfaceInfoEXT, ioSurface));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalSharedEventInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalSharedEventInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalSharedEventInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalSharedEventInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalSharedEventInfoEXT_semaphore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalSharedEventInfoEXT, semaphore));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalSharedEventInfoEXT_event_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalSharedEventInfoEXT, event));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkExportMetalSharedEventInfoEXT_mtlSharedEvent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkExportMetalSharedEventInfoEXT, mtlSharedEvent));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalSharedEventInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalSharedEventInfoEXT, sType));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalSharedEventInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalSharedEventInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_metal_objects
static Napi::Value VkImportMetalSharedEventInfoEXT_mtlSharedEvent_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImportMetalSharedEventInfoEXT, mtlSharedEvent));
}
#endif

#ifdef VK_EXT_non_seamless_cube_map
static Napi::Value VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_non_seamless_cube_map
static Napi::Value VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_non_seamless_cube_map
static Napi::Value VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_nonSeamlessCubeMap_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, nonSeamlessCubeMap));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPhysicalDevicePipelineRobustnessFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineRobustnessFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPhysicalDevicePipelineRobustnessFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineRobustnessFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPhysicalDevicePipelineRobustnessFeaturesEXT_pipelineRobustness_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineRobustnessFeaturesEXT, pipelineRobustness));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPipelineRobustnessCreateInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRobustnessCreateInfoEXT, sType));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPipelineRobustnessCreateInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRobustnessCreateInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPipelineRobustnessCreateInfoEXT_storageBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRobustnessCreateInfoEXT, storageBuffers));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPipelineRobustnessCreateInfoEXT_uniformBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRobustnessCreateInfoEXT, uniformBuffers));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPipelineRobustnessCreateInfoEXT_vertexInputs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRobustnessCreateInfoEXT, vertexInputs));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPipelineRobustnessCreateInfoEXT_images_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPipelineRobustnessCreateInfoEXT, images));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPhysicalDevicePipelineRobustnessPropertiesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, sType));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPhysicalDevicePipelineRobustnessPropertiesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, pNext));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessStorageBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessStorageBuffers));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessUniformBuffers_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessUniformBuffers));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessVertexInputs_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessVertexInputs));
}
#endif

#ifdef VK_EXT_pipeline_robustness
static Napi::Value VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessImages_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessImages));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkImageViewSampleWeightCreateInfoQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewSampleWeightCreateInfoQCOM, sType));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkImageViewSampleWeightCreateInfoQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewSampleWeightCreateInfoQCOM, pNext));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkImageViewSampleWeightCreateInfoQCOM_filterCenter_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewSampleWeightCreateInfoQCOM, filterCenter));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkImageViewSampleWeightCreateInfoQCOM_filterSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewSampleWeightCreateInfoQCOM, filterSize));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkImageViewSampleWeightCreateInfoQCOM_numPhases_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkImageViewSampleWeightCreateInfoQCOM, numPhases));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingFeaturesQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingFeaturesQCOM, sType));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingFeaturesQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingFeaturesQCOM, pNext));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingFeaturesQCOM_textureSampleWeighted_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingFeaturesQCOM, textureSampleWeighted));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingFeaturesQCOM_textureBoxFilter_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingFeaturesQCOM, textureBoxFilter));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingFeaturesQCOM_textureBlockMatch_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingFeaturesQCOM, textureBlockMatch));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingPropertiesQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingPropertiesQCOM, sType));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingPropertiesQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingPropertiesQCOM, pNext));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingPropertiesQCOM_maxWeightFilterPhases_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingPropertiesQCOM, maxWeightFilterPhases));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingPropertiesQCOM_maxWeightFilterDimension_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingPropertiesQCOM, maxWeightFilterDimension));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingPropertiesQCOM_maxBlockMatchRegion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingPropertiesQCOM, maxBlockMatchRegion));
}
#endif

#ifdef VK_QCOM_image_processing
static Napi::Value VkPhysicalDeviceImageProcessingPropertiesQCOM_maxBoxFilterBlockSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceImageProcessingPropertiesQCOM, maxBoxFilterBlockSize));
}
#endif

#ifdef VK_QCOM_tile_properties
static Napi::Value VkPhysicalDeviceTilePropertiesFeaturesQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTilePropertiesFeaturesQCOM, sType));
}
#endif

#ifdef VK_QCOM_tile_properties
static Napi::Value VkPhysicalDeviceTilePropertiesFeaturesQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTilePropertiesFeaturesQCOM, pNext));
}
#endif

#ifdef VK_QCOM_tile_properties
static Napi::Value VkPhysicalDeviceTilePropertiesFeaturesQCOM_tileProperties_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceTilePropertiesFeaturesQCOM, tileProperties));
}
#endif

#ifdef VK_QCOM_tile_properties
static Napi::Value VkTilePropertiesQCOM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTilePropertiesQCOM, sType));
}
#endif

#ifdef VK_QCOM_tile_properties
static Napi::Value VkTilePropertiesQCOM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTilePropertiesQCOM, pNext));
}
#endif

#ifdef VK_QCOM_tile_properties
static Napi::Value VkTilePropertiesQCOM_tileSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTilePropertiesQCOM, tileSize));
}
#endif

#ifdef VK_QCOM_tile_properties
static Napi::Value VkTilePropertiesQCOM_apronSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTilePropertiesQCOM, apronSize));
}
#endif

#ifdef VK_QCOM_tile_properties
static Napi::Value VkTilePropertiesQCOM_origin_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkTilePropertiesQCOM, origin));
}
#endif

#ifdef VK_SEC_amigo_profiling
static Napi::Value VkPhysicalDeviceAmigoProfilingFeaturesSEC_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAmigoProfilingFeaturesSEC, sType));
}
#endif

#ifdef VK_SEC_amigo_profiling
static Napi::Value VkPhysicalDeviceAmigoProfilingFeaturesSEC_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAmigoProfilingFeaturesSEC, pNext));
}
#endif

#ifdef VK_SEC_amigo_profiling
static Napi::Value VkPhysicalDeviceAmigoProfilingFeaturesSEC_amigoProfiling_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAmigoProfilingFeaturesSEC, amigoProfiling));
}
#endif

#ifdef VK_SEC_amigo_profiling
static Napi::Value VkAmigoProfilingSubmitInfoSEC_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAmigoProfilingSubmitInfoSEC, sType));
}
#endif

#ifdef VK_SEC_amigo_profiling
static Napi::Value VkAmigoProfilingSubmitInfoSEC_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAmigoProfilingSubmitInfoSEC, pNext));
}
#endif

#ifdef VK_SEC_amigo_profiling
static Napi::Value VkAmigoProfilingSubmitInfoSEC_firstDrawTimestamp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAmigoProfilingSubmitInfoSEC, firstDrawTimestamp));
}
#endif

#ifdef VK_SEC_amigo_profiling
static Napi::Value VkAmigoProfilingSubmitInfoSEC_swapBufferTimestamp_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkAmigoProfilingSubmitInfoSEC, swapBufferTimestamp));
}
#endif

#ifdef VK_EXT_attachment_feedback_loop_layout
static Napi::Value VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_attachment_feedback_loop_layout
static Napi::Value VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_attachment_feedback_loop_layout
static Napi::Value VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_attachmentFeedbackLoopLayout_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT, attachmentFeedbackLoopLayout));
}
#endif

#ifdef VK_EXT_depth_clamp_zero_one
static Napi::Value VkPhysicalDeviceDepthClampZeroOneFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_depth_clamp_zero_one
static Napi::Value VkPhysicalDeviceDepthClampZeroOneFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_depth_clamp_zero_one
static Napi::Value VkPhysicalDeviceDepthClampZeroOneFeaturesEXT_depthClampZeroOne_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT, depthClampZeroOne));
}
#endif

#ifdef VK_EXT_device_address_binding_report
static Napi::Value VkPhysicalDeviceAddressBindingReportFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAddressBindingReportFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_device_address_binding_report
static Napi::Value VkPhysicalDeviceAddressBindingReportFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAddressBindingReportFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_device_address_binding_report
static Napi::Value VkPhysicalDeviceAddressBindingReportFeaturesEXT_reportAddressBinding_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceAddressBindingReportFeaturesEXT, reportAddressBinding));
}
#endif

#ifdef VK_EXT_device_address_binding_report
static Napi::Value VkDeviceAddressBindingCallbackDataEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceAddressBindingCallbackDataEXT, sType));
}
#endif

#ifdef VK_EXT_device_address_binding_report
static Napi::Value VkDeviceAddressBindingCallbackDataEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceAddressBindingCallbackDataEXT, pNext));
}
#endif

#ifdef VK_EXT_device_address_binding_report
static Napi::Value VkDeviceAddressBindingCallbackDataEXT_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceAddressBindingCallbackDataEXT, flags));
}
#endif

#ifdef VK_EXT_device_address_binding_report
static Napi::Value VkDeviceAddressBindingCallbackDataEXT_baseAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceAddressBindingCallbackDataEXT, baseAddress));
}
#endif

#ifdef VK_EXT_device_address_binding_report
static Napi::Value VkDeviceAddressBindingCallbackDataEXT_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceAddressBindingCallbackDataEXT, size));
}
#endif

#ifdef VK_EXT_device_address_binding_report
static Napi::Value VkDeviceAddressBindingCallbackDataEXT_bindingType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceAddressBindingCallbackDataEXT, bindingType));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowFeaturesNV, sType));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowFeaturesNV_opticalFlow_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowFeaturesNV, opticalFlow));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, sType));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_supportedOutputGridSizes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, supportedOutputGridSizes));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_supportedHintGridSizes_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, supportedHintGridSizes));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_hintSupported_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, hintSupported));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_costSupported_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, costSupported));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_bidirectionalFlowSupported_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, bidirectionalFlowSupported));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_globalFlowSupported_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, globalFlowSupported));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_minWidth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, minWidth));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_minHeight_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, minHeight));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_maxWidth_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, maxWidth));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_maxHeight_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, maxHeight));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkPhysicalDeviceOpticalFlowPropertiesNV_maxNumRegionsOfInterest_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceOpticalFlowPropertiesNV, maxNumRegionsOfInterest));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowImageFormatInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowImageFormatInfoNV, sType));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowImageFormatInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowImageFormatInfoNV, pNext));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowImageFormatInfoNV_usage_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowImageFormatInfoNV, usage));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowImageFormatPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowImageFormatPropertiesNV, sType));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowImageFormatPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowImageFormatPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowImageFormatPropertiesNV_format_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowImageFormatPropertiesNV, format));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, sType));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, pNext));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_width_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, width));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_height_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, height));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_imageFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, imageFormat));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_flowVectorFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, flowVectorFormat));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_costFormat_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, costFormat));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_outputGridSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, outputGridSize));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_hintGridSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, hintGridSize));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_performanceLevel_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, performanceLevel));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreateInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreateInfoNV, flags));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreatePrivateDataInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreatePrivateDataInfoNV, sType));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreatePrivateDataInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreatePrivateDataInfoNV, pNext));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreatePrivateDataInfoNV_id_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreatePrivateDataInfoNV, id));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreatePrivateDataInfoNV_size_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreatePrivateDataInfoNV, size));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowSessionCreatePrivateDataInfoNV_pPrivateData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowSessionCreatePrivateDataInfoNV, pPrivateData));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowExecuteInfoNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowExecuteInfoNV, sType));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowExecuteInfoNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowExecuteInfoNV, pNext));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowExecuteInfoNV_flags_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowExecuteInfoNV, flags));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowExecuteInfoNV_regionCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowExecuteInfoNV, regionCount));
}
#endif

#ifdef VK_NV_optical_flow
static Napi::Value VkOpticalFlowExecuteInfoNV_pRegions_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkOpticalFlowExecuteInfoNV, pRegions));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkPhysicalDeviceFaultFeaturesEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFaultFeaturesEXT, sType));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkPhysicalDeviceFaultFeaturesEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFaultFeaturesEXT, pNext));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkPhysicalDeviceFaultFeaturesEXT_deviceFault_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFaultFeaturesEXT, deviceFault));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkPhysicalDeviceFaultFeaturesEXT_deviceFaultVendorBinary_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceFaultFeaturesEXT, deviceFaultVendorBinary));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultAddressInfoEXT_addressType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultAddressInfoEXT, addressType));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultAddressInfoEXT_reportedAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultAddressInfoEXT, reportedAddress));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultAddressInfoEXT_addressPrecision_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultAddressInfoEXT, addressPrecision));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorInfoEXT_description_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorInfoEXT, description));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorInfoEXT_vendorFaultCode_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorInfoEXT, vendorFaultCode));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorInfoEXT_vendorFaultData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorInfoEXT, vendorFaultData));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultCountsEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultCountsEXT, sType));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultCountsEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultCountsEXT, pNext));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultCountsEXT_addressInfoCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultCountsEXT, addressInfoCount));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultCountsEXT_vendorInfoCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultCountsEXT, vendorInfoCount));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultCountsEXT_vendorBinarySize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultCountsEXT, vendorBinarySize));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultInfoEXT_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultInfoEXT, sType));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultInfoEXT_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultInfoEXT, pNext));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultInfoEXT_description_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultInfoEXT, description));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultInfoEXT_pAddressInfos_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultInfoEXT, pAddressInfos));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultInfoEXT_pVendorInfos_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultInfoEXT, pVendorInfos));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultInfoEXT_pVendorBinaryData_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultInfoEXT, pVendorBinaryData));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorBinaryHeaderVersionOneEXT_headerSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, headerSize));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorBinaryHeaderVersionOneEXT_headerVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, headerVersion));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorBinaryHeaderVersionOneEXT_vendorID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, vendorID));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorBinaryHeaderVersionOneEXT_deviceID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, deviceID));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorBinaryHeaderVersionOneEXT_driverVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, driverVersion));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorBinaryHeaderVersionOneEXT_pipelineCacheUUID_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, pipelineCacheUUID));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorBinaryHeaderVersionOneEXT_applicationNameOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, applicationNameOffset));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorBinaryHeaderVersionOneEXT_applicationVersion_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, applicationVersion));
}
#endif

#ifdef VK_EXT_device_fault
static Napi::Value VkDeviceFaultVendorBinaryHeaderVersionOneEXT_engineNameOffset_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, engineNameOffset));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkDecompressMemoryRegionNV_srcAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDecompressMemoryRegionNV, srcAddress));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkDecompressMemoryRegionNV_dstAddress_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDecompressMemoryRegionNV, dstAddress));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkDecompressMemoryRegionNV_compressedSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDecompressMemoryRegionNV, compressedSize));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkDecompressMemoryRegionNV_decompressedSize_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDecompressMemoryRegionNV, decompressedSize));
}
#endif

#ifdef VK_NV_memory_decompression
static Napi::Value VkDecompressMemoryRegionNV_decompressionMethod_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkDecompressMemoryRegionNV, decompressionMethod));
}
#endif

#ifdef VK_ARM_shader_core_builtins
static Napi::Value VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM, sType));
}
#endif

#ifdef VK_ARM_shader_core_builtins
static Napi::Value VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM, pNext));
}
#endif

#ifdef VK_ARM_shader_core_builtins
static Napi::Value VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_shaderCoreMask_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM, shaderCoreMask));
}
#endif

#ifdef VK_ARM_shader_core_builtins
static Napi::Value VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_shaderCoreCount_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM, shaderCoreCount));
}
#endif

#ifdef VK_ARM_shader_core_builtins
static Napi::Value VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_shaderWarpsPerCore_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM, shaderWarpsPerCore));
}
#endif

#ifdef VK_ARM_shader_core_builtins
static Napi::Value VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM, sType));
}
#endif

#ifdef VK_ARM_shader_core_builtins
static Napi::Value VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM, pNext));
}
#endif

#ifdef VK_ARM_shader_core_builtins
static Napi::Value VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM_shaderCoreBuiltins_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM, shaderCoreBuiltins));
}
#endif

#ifdef VK_NV_ray_tracing_invocation_reorder
static Napi::Value VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing_invocation_reorder
static Napi::Value VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing_invocation_reorder
static Napi::Value VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV_rayTracingInvocationReorder_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV, rayTracingInvocationReorder));
}
#endif

#ifdef VK_NV_ray_tracing_invocation_reorder
static Napi::Value VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV_sType_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV, sType));
}
#endif

#ifdef VK_NV_ray_tracing_invocation_reorder
static Napi::Value VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV_pNext_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV, pNext));
}
#endif

#ifdef VK_NV_ray_tracing_invocation_reorder
static Napi::Value VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV_rayTracingInvocationReorderReorderingHint_offsetof(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    return Napi::Number::New(env, offsetof(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV, rayTracingInvocationReorderReorderingHint));
}
#endif
static Napi::Value rawCreateInstance(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 0 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkInstanceCreateInfo const*)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInstance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInstance = (VkInstance*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateInstance(pCreateInfo, pAllocator, pInstance);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyInstance(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyInstance(instance, pAllocator);
    return env.Null();
}
static Napi::Value rawEnumeratePhysicalDevices(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPhysicalDeviceCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPhysicalDeviceCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPhysicalDevices)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPhysicalDevices = (VkPhysicalDevice*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
    return Napi::Number::New(env, result);
}
static Napi::Value rawGetDeviceProcAddr(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pName)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pName = (char const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceProcAddr(device, pName);
    return env.Null();
}
static Napi::Value rawGetInstanceProcAddr(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pName)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pName = (char const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetInstanceProcAddr(instance, pName);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkPhysicalDeviceProperties*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceQueueFamilyProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pQueueFamilyPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pQueueFamilyPropertyCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pQueueFamilyProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pQueueFamilyProperties = (VkQueueFamilyProperties*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceMemoryProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pMemoryProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryProperties = (VkPhysicalDeviceMemoryProperties*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceFeatures(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pFeatures)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFeatures = (VkPhysicalDeviceFeatures*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceFormatProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (format)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) format = (VkFormat)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFormatProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFormatProperties = (VkFormatProperties*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceImageFormatProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (format)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) format = (VkFormat)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (type)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) type = (VkImageType)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (tiling)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) tiling = (VkImageTiling)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (usage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) usage = (VkImageUsageFlags)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 5 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkImageCreateFlags)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pImageFormatProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageFormatProperties = (VkImageFormatProperties*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCreateDevice(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDeviceCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDevice = (VkDevice*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyDevice(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyDevice(device, pAllocator);
    return env.Null();
}
static Napi::Value rawEnumerateInstanceVersion(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 0 argument (pApiVersion)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pApiVersion = (uint32_t*)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkEnumerateInstanceVersion(pApiVersion);
    return Napi::Number::New(env, result);
}
static Napi::Value rawEnumerateInstanceLayerProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 0 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkLayerProperties*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
static Napi::Value rawEnumerateInstanceExtensionProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 0 argument (pLayerName)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLayerName = (char const*)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkExtensionProperties*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
static Napi::Value rawEnumerateDeviceLayerProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkLayerProperties*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
static Napi::Value rawEnumerateDeviceExtensionProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pLayerName)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLayerName = (char const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkExtensionProperties*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
static Napi::Value rawGetDeviceQueue(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (queueFamilyIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueFamilyIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (queueIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueIndex = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pQueue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pQueue = (VkQueue*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
    return env.Null();
}
static Napi::Value rawQueueSubmit(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (submitCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) submitCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSubmits)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSubmits = (VkSubmitInfo const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (fence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fence = (VkFence)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkQueueSubmit(queue, submitCount, pSubmits, fence);
    return Napi::Number::New(env, result);
}
static Napi::Value rawQueueWaitIdle(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkQueueWaitIdle(queue);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDeviceWaitIdle(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkDeviceWaitIdle(device);
    return Napi::Number::New(env, result);
}
static Napi::Value rawAllocateMemory(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pAllocateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocateInfo = (VkMemoryAllocateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMemory)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemory = (VkDeviceMemory*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
    return Napi::Number::New(env, result);
}
static Napi::Value rawFreeMemory(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (memory)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memory = (VkDeviceMemory)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkFreeMemory(device, memory, pAllocator);
    return env.Null();
}
static Napi::Value rawMapMemory(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (memory)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memory = (VkDeviceMemory)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (size)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) size = (VkDeviceSize)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkMemoryMapFlags)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer of pointers) at 5 argument (ppData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) ppData = (void**)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkMapMemory(device, memory, offset, size, flags, ppData);
    return Napi::Number::New(env, result);
}
static Napi::Value rawUnmapMemory(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (memory)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memory = (VkDeviceMemory)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkUnmapMemory(device, memory);
    return env.Null();
}
static Napi::Value rawFlushMappedMemoryRanges(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (memoryRangeCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memoryRangeCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRanges)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRanges = (VkMappedMemoryRange const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
    return Napi::Number::New(env, result);
}
static Napi::Value rawInvalidateMappedMemoryRanges(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (memoryRangeCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memoryRangeCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRanges)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRanges = (VkMappedMemoryRange const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
    return Napi::Number::New(env, result);
}
static Napi::Value rawGetDeviceMemoryCommitment(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (memory)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memory = (VkDeviceMemory)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCommittedMemoryInBytes)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCommittedMemoryInBytes = (VkDeviceSize*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
    return env.Null();
}
static Napi::Value rawGetBufferMemoryRequirements(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirements = (VkMemoryRequirements*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
    return env.Null();
}
static Napi::Value rawBindBufferMemory(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (memory)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memory = (VkDeviceMemory)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (memoryOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memoryOffset = (VkDeviceSize)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBindBufferMemory(device, buffer, memory, memoryOffset);
    return Napi::Number::New(env, result);
}
static Napi::Value rawGetImageMemoryRequirements(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirements = (VkMemoryRequirements*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
    return env.Null();
}
static Napi::Value rawBindImageMemory(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (memory)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memory = (VkDeviceMemory)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (memoryOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memoryOffset = (VkDeviceSize)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBindImageMemory(device, image, memory, memoryOffset);
    return Napi::Number::New(env, result);
}
static Napi::Value rawGetImageSparseMemoryRequirements(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSparseMemoryRequirementCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSparseMemoryRequirementCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSparseMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSparseMemoryRequirements = (VkSparseImageMemoryRequirements*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceSparseImageFormatProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 8) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (format)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) format = (VkFormat)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (type)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) type = (VkImageType)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (samples)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) samples = (VkSampleCountFlagBits)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (usage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) usage = (VkImageUsageFlags)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 5 argument (tiling)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) tiling = (VkImageTiling)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 7 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkSparseImageFormatProperties*)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
    return env.Null();
}
static Napi::Value rawQueueBindSparse(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (bindInfoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bindInfoCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pBindInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBindInfo = (VkBindSparseInfo const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (fence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fence = (VkFence)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCreateFence(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkFenceCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pFence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFence = (VkFence*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateFence(device, pCreateInfo, pAllocator, pFence);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyFence(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (fence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fence = (VkFence)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyFence(device, fence, pAllocator);
    return env.Null();
}
static Napi::Value rawResetFences(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (fenceCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fenceCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFences)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFences = (VkFence const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkResetFences(device, fenceCount, pFences);
    return Napi::Number::New(env, result);
}
static Napi::Value rawGetFenceStatus(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (fence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fence = (VkFence)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetFenceStatus(device, fence);
    return Napi::Number::New(env, result);
}
static Napi::Value rawWaitForFences(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (fenceCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fenceCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFences)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFences = (VkFence const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (waitAll)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) waitAll = (VkBool32)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (timeout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) timeout = (uint64_t)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCreateSemaphore(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkSemaphoreCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSemaphore)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSemaphore = (VkSemaphore*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroySemaphore(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (semaphore)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) semaphore = (VkSemaphore)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroySemaphore(device, semaphore, pAllocator);
    return env.Null();
}
static Napi::Value rawCreateEvent(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkEventCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pEvent)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pEvent = (VkEvent*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyEvent(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (event)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) event = (VkEvent)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyEvent(device, event, pAllocator);
    return env.Null();
}
static Napi::Value rawGetEventStatus(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (event)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) event = (VkEvent)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetEventStatus(device, event);
    return Napi::Number::New(env, result);
}
static Napi::Value rawSetEvent(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (event)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) event = (VkEvent)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkSetEvent(device, event);
    return Napi::Number::New(env, result);
}
static Napi::Value rawResetEvent(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (event)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) event = (VkEvent)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkResetEvent(device, event);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCreateQueryPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkQueryPoolCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pQueryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pQueryPool = (VkQueryPool*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyQueryPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyQueryPool(device, queryPool, pAllocator);
    return env.Null();
}
static Napi::Value rawGetQueryPoolResults(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 8) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (firstQuery)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstQuery = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (queryCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dataSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dataSize = (size_t)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 6 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (VkDeviceSize)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 7 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkQueryResultFlags)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
    return Napi::Number::New(env, result);
}
static Napi::Value rawResetQueryPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (firstQuery)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstQuery = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (queryCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkResetQueryPool(device, queryPool, firstQuery, queryCount);
    return env.Null();
}
static Napi::Value rawCreateBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkBufferCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBuffer = (VkBuffer*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyBuffer(device, buffer, pAllocator);
    return env.Null();
}
static Napi::Value rawCreateBufferView(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkBufferViewCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pView)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pView = (VkBufferView*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyBufferView(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (bufferView)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bufferView = (VkBufferView)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyBufferView(device, bufferView, pAllocator);
    return env.Null();
}
static Napi::Value rawCreateImage(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkImageCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImage = (VkImage*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateImage(device, pCreateInfo, pAllocator, pImage);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyImage(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyImage(device, image, pAllocator);
    return env.Null();
}
static Napi::Value rawGetImageSubresourceLayout(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSubresource)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSubresource = (VkImageSubresource const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLayout = (VkSubresourceLayout*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
    return env.Null();
}
static Napi::Value rawCreateImageView(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkImageViewCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pView)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pView = (VkImageView*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateImageView(device, pCreateInfo, pAllocator, pView);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyImageView(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (imageView)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageView = (VkImageView)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyImageView(device, imageView, pAllocator);
    return env.Null();
}
static Napi::Value rawCreateShaderModule(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkShaderModuleCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pShaderModule)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pShaderModule = (VkShaderModule*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyShaderModule(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (shaderModule)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) shaderModule = (VkShaderModule)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyShaderModule(device, shaderModule, pAllocator);
    return env.Null();
}
static Napi::Value rawCreatePipelineCache(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkPipelineCacheCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pPipelineCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPipelineCache = (VkPipelineCache*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyPipelineCache(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineCache = (VkPipelineCache)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyPipelineCache(device, pipelineCache, pAllocator);
    return env.Null();
}
static Napi::Value rawGetPipelineCacheData(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineCache = (VkPipelineCache)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDataSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDataSize = (size_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
    return Napi::Number::New(env, result);
}
static Napi::Value rawMergePipelineCaches(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (dstCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstCache = (VkPipelineCache)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (srcCacheCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcCacheCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSrcCaches)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSrcCaches = (VkPipelineCache const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCreateGraphicsPipelines(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineCache = (VkPipelineCache)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (createInfoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) createInfoCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCreateInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfos = (VkGraphicsPipelineCreateInfo const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pPipelines)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPipelines = (VkPipeline*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCreateComputePipelines(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineCache = (VkPipelineCache)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (createInfoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) createInfoCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCreateInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfos = (VkComputePipelineCreateInfo const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pPipelines)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPipelines = (VkPipeline*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
    return Napi::Number::New(env, result);
}
#ifdef VK_HUAWEI_subpass_shading
static Napi::Value rawGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (renderpass)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) renderpass = (VkRenderPass)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMaxWorkgroupSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMaxWorkgroupSize = (VkExtent2D*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device, renderpass, pMaxWorkgroupSize);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawDestroyPipeline(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipeline)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipeline = (VkPipeline)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyPipeline(device, pipeline, pAllocator);
    return env.Null();
}
static Napi::Value rawCreatePipelineLayout(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkPipelineLayoutCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pPipelineLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPipelineLayout = (VkPipelineLayout*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyPipelineLayout(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineLayout = (VkPipelineLayout)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
    return env.Null();
}
static Napi::Value rawCreateSampler(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkSamplerCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSampler)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSampler = (VkSampler*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroySampler(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (sampler)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) sampler = (VkSampler)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroySampler(device, sampler, pAllocator);
    return env.Null();
}
static Napi::Value rawCreateDescriptorSetLayout(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDescriptorSetLayoutCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSetLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSetLayout = (VkDescriptorSetLayout*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyDescriptorSetLayout(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (descriptorSetLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorSetLayout = (VkDescriptorSetLayout)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
    return env.Null();
}
static Napi::Value rawCreateDescriptorPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDescriptorPoolCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pDescriptorPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDescriptorPool = (VkDescriptorPool*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyDescriptorPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (descriptorPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorPool = (VkDescriptorPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
    return env.Null();
}
static Napi::Value rawResetDescriptorPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (descriptorPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorPool = (VkDescriptorPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkDescriptorPoolResetFlags)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkResetDescriptorPool(device, descriptorPool, flags);
    return Napi::Number::New(env, result);
}
static Napi::Value rawAllocateDescriptorSets(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pAllocateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocateInfo = (VkDescriptorSetAllocateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDescriptorSets)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDescriptorSets = (VkDescriptorSet*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
    return Napi::Number::New(env, result);
}
static Napi::Value rawFreeDescriptorSets(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (descriptorPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorPool = (VkDescriptorPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (descriptorSetCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorSetCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pDescriptorSets)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDescriptorSets = (VkDescriptorSet const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
    return Napi::Number::New(env, result);
}
static Napi::Value rawUpdateDescriptorSets(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (descriptorWriteCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorWriteCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDescriptorWrites)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDescriptorWrites = (VkWriteDescriptorSet const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (descriptorCopyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorCopyCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pDescriptorCopies)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDescriptorCopies = (VkCopyDescriptorSet const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
    return env.Null();
}
static Napi::Value rawCreateFramebuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkFramebufferCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pFramebuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFramebuffer = (VkFramebuffer*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyFramebuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (framebuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) framebuffer = (VkFramebuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyFramebuffer(device, framebuffer, pAllocator);
    return env.Null();
}
static Napi::Value rawCreateRenderPass(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkRenderPassCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pRenderPass)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRenderPass = (VkRenderPass*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyRenderPass(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (renderPass)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) renderPass = (VkRenderPass)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyRenderPass(device, renderPass, pAllocator);
    return env.Null();
}
static Napi::Value rawGetRenderAreaGranularity(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (renderPass)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) renderPass = (VkRenderPass)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pGranularity)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGranularity = (VkExtent2D*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetRenderAreaGranularity(device, renderPass, pGranularity);
    return env.Null();
}
static Napi::Value rawCreateCommandPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkCommandPoolCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCommandPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCommandPool = (VkCommandPool*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyCommandPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (commandPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandPool = (VkCommandPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyCommandPool(device, commandPool, pAllocator);
    return env.Null();
}
static Napi::Value rawResetCommandPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (commandPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandPool = (VkCommandPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkCommandPoolResetFlags)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkResetCommandPool(device, commandPool, flags);
    return Napi::Number::New(env, result);
}
static Napi::Value rawAllocateCommandBuffers(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pAllocateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocateInfo = (VkCommandBufferAllocateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCommandBuffers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCommandBuffers = (VkCommandBuffer*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
    return Napi::Number::New(env, result);
}
static Napi::Value rawFreeCommandBuffers(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (commandPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandPool = (VkCommandPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (commandBufferCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBufferCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCommandBuffers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCommandBuffers = (VkCommandBuffer const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
    return env.Null();
}
static Napi::Value rawBeginCommandBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pBeginInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBeginInfo = (VkCommandBufferBeginInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBeginCommandBuffer(commandBuffer, pBeginInfo);
    return Napi::Number::New(env, result);
}
static Napi::Value rawEndCommandBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkEndCommandBuffer(commandBuffer);
    return Napi::Number::New(env, result);
}
static Napi::Value rawResetCommandBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkCommandBufferResetFlags)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkResetCommandBuffer(commandBuffer, flags);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCmdBindPipeline(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineBindPoint)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineBindPoint = (VkPipelineBindPoint)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (pipeline)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipeline = (VkPipeline)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
    return env.Null();
}
static Napi::Value rawCmdSetViewport(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstViewport)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstViewport = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (viewportCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) viewportCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pViewports)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pViewports = (VkViewport const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
    return env.Null();
}
static Napi::Value rawCmdSetScissor(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstScissor)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstScissor = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (scissorCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) scissorCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pScissors)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pScissors = (VkRect2D const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
    return env.Null();
}
static Napi::Value rawCmdSetLineWidth(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (lineWidth)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) lineWidth = (float)info_[1].As<Napi::Number>().FloatValue();
    
    ::vkCmdSetLineWidth(commandBuffer, lineWidth);
    return env.Null();
}
static Napi::Value rawCmdSetDepthBias(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (depthBiasConstantFactor)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthBiasConstantFactor = (float)info_[1].As<Napi::Number>().FloatValue();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (depthBiasClamp)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthBiasClamp = (float)info_[2].As<Napi::Number>().FloatValue();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (depthBiasSlopeFactor)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthBiasSlopeFactor = (float)info_[3].As<Napi::Number>().FloatValue();
    
    ::vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
    return env.Null();
}
static Napi::Value rawCmdSetBlendConstants(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (blendConstants)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) blendConstants = (float const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetBlendConstants(commandBuffer, blendConstants);
    return env.Null();
}
static Napi::Value rawCmdSetDepthBounds(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (minDepthBounds)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) minDepthBounds = (float)info_[1].As<Napi::Number>().FloatValue();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (maxDepthBounds)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) maxDepthBounds = (float)info_[2].As<Napi::Number>().FloatValue();
    
    ::vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
    return env.Null();
}
static Napi::Value rawCmdSetStencilCompareMask(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (faceMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) faceMask = (VkStencilFaceFlags)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (compareMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) compareMask = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
    return env.Null();
}
static Napi::Value rawCmdSetStencilWriteMask(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (faceMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) faceMask = (VkStencilFaceFlags)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (writeMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) writeMask = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
    return env.Null();
}
static Napi::Value rawCmdSetStencilReference(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (faceMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) faceMask = (VkStencilFaceFlags)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (reference)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) reference = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetStencilReference(commandBuffer, faceMask, reference);
    return env.Null();
}
static Napi::Value rawCmdBindDescriptorSets(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 8) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineBindPoint)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineBindPoint = (VkPipelineBindPoint)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (layout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) layout = (VkPipelineLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (firstSet)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstSet = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (descriptorSetCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorSetCount = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pDescriptorSets)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDescriptorSets = (VkDescriptorSet const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 6 argument (dynamicOffsetCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dynamicOffsetCount = (uint32_t)info_[6].As<Napi::Number>().Uint32Value();

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 7 argument (pDynamicOffsets)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDynamicOffsets = (uint32_t const*)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
    return env.Null();
}
static Napi::Value rawCmdBindIndexBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (indexType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) indexType = (VkIndexType)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
    return env.Null();
}
static Napi::Value rawCmdBindVertexBuffers(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstBinding)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstBinding = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (bindingCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bindingCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pBuffers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBuffers = (VkBuffer const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pOffsets)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pOffsets = (VkDeviceSize const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
    return env.Null();
}
static Napi::Value rawCmdDraw(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (vertexCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) vertexCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (instanceCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instanceCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (firstVertex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstVertex = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (firstInstance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstInstance = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
    return env.Null();
}
static Napi::Value rawCmdDrawIndexed(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (indexCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) indexCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (instanceCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instanceCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (firstIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstIndex = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (vertexOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) vertexOffset = (int32_t)info_[4].As<Napi::Number>().Int32Value();

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (firstInstance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstInstance = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
    return env.Null();
}
#ifdef VK_EXT_multi_draw
static Napi::Value rawCmdDrawMultiEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (drawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) drawCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pVertexInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVertexInfo = (VkMultiDrawInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (instanceCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instanceCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (firstInstance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstInstance = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
    return env.Null();
}
#endif
#ifdef VK_EXT_multi_draw
static Napi::Value rawCmdDrawMultiIndexedEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (drawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) drawCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pIndexInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pIndexInfo = (VkMultiDrawIndexedInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (instanceCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instanceCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (firstInstance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstInstance = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pVertexOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVertexOffset = (int32_t const*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
    return env.Null();
}
#endif
static Napi::Value rawCmdDrawIndirect(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (drawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) drawCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
    return env.Null();
}
static Napi::Value rawCmdDrawIndexedIndirect(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (drawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) drawCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
    return env.Null();
}
static Napi::Value rawCmdDispatch(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (groupCountX)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCountX = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (groupCountY)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCountY = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (groupCountZ)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCountZ = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
    return env.Null();
}
static Napi::Value rawCmdDispatchIndirect(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdDispatchIndirect(commandBuffer, buffer, offset);
    return env.Null();
}
#ifdef VK_HUAWEI_subpass_shading
static Napi::Value rawCmdSubpassShadingHUAWEI(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSubpassShadingHUAWEI(commandBuffer);
    return env.Null();
}
#endif
static Napi::Value rawCmdCopyBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (srcBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcBuffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (dstBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstBuffer = (VkBuffer)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (regionCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) regionCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pRegions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRegions = (VkBufferCopy const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
    return env.Null();
}
static Napi::Value rawCmdCopyImage(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (srcImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcImage = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (srcImageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcImageLayout = (VkImageLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (dstImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImage = (VkImage)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dstImageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImageLayout = (VkImageLayout)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (regionCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) regionCount = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pRegions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRegions = (VkImageCopy const*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    return env.Null();
}
static Napi::Value rawCmdBlitImage(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 8) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (srcImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcImage = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (srcImageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcImageLayout = (VkImageLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (dstImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImage = (VkImage)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dstImageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImageLayout = (VkImageLayout)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (regionCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) regionCount = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pRegions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRegions = (VkImageBlit const*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 7 argument (filter)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) filter = (VkFilter)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
    return env.Null();
}
static Napi::Value rawCmdCopyBufferToImage(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (srcBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcBuffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (dstImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImage = (VkImage)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (dstImageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImageLayout = (VkImageLayout)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (regionCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) regionCount = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pRegions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRegions = (VkBufferImageCopy const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
    return env.Null();
}
static Napi::Value rawCmdCopyImageToBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (srcImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcImage = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (srcImageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcImageLayout = (VkImageLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (dstBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstBuffer = (VkBuffer)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (regionCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) regionCount = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pRegions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRegions = (VkBufferImageCopy const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
    return env.Null();
}
#ifdef VK_NV_copy_memory_indirect
static Napi::Value rawCmdCopyMemoryIndirectNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (copyBufferAddress)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) copyBufferAddress = (VkDeviceAddress)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (copyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) copyCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkCmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);
    return env.Null();
}
#endif
#ifdef VK_NV_copy_memory_indirect
static Napi::Value rawCmdCopyMemoryToImageIndirectNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (copyBufferAddress)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) copyBufferAddress = (VkDeviceAddress)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (copyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) copyCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dstImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImage = (VkImage)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 5 argument (dstImageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImageLayout = (VkImageLayout)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pImageSubresources)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageSubresources = (VkImageSubresourceLayers const*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyMemoryToImageIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
    return env.Null();
}
#endif
static Napi::Value rawCmdUpdateBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (dstBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstBuffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (dstOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstOffset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (dataSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dataSize = (VkDeviceSize)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
    return env.Null();
}
static Napi::Value rawCmdFillBuffer(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (dstBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstBuffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (dstOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstOffset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (size)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) size = (VkDeviceSize)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (data)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) data = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();
    
    ::vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
    return env.Null();
}
static Napi::Value rawCmdClearColorImage(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (imageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageLayout = (VkImageLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pColor)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pColor = (VkClearColorValue const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (rangeCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) rangeCount = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pRanges)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRanges = (VkImageSubresourceRange const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
    return env.Null();
}
static Napi::Value rawCmdClearDepthStencilImage(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (imageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageLayout = (VkImageLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pDepthStencil)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDepthStencil = (VkClearDepthStencilValue const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (rangeCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) rangeCount = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pRanges)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRanges = (VkImageSubresourceRange const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
    return env.Null();
}
static Napi::Value rawCmdClearAttachments(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (attachmentCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) attachmentCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAttachments)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAttachments = (VkClearAttachment const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (rectCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) rectCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pRects)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRects = (VkClearRect const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
    return env.Null();
}
static Napi::Value rawCmdResolveImage(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (srcImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcImage = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (srcImageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcImageLayout = (VkImageLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (dstImage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImage = (VkImage)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dstImageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstImageLayout = (VkImageLayout)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (regionCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) regionCount = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pRegions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRegions = (VkImageResolve const*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    return env.Null();
}
static Napi::Value rawCmdSetEvent(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (event)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) event = (VkEvent)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (stageMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stageMask = (VkPipelineStageFlags)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetEvent(commandBuffer, event, stageMask);
    return env.Null();
}
static Napi::Value rawCmdResetEvent(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (event)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) event = (VkEvent)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (stageMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stageMask = (VkPipelineStageFlags)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdResetEvent(commandBuffer, event, stageMask);
    return env.Null();
}
static Napi::Value rawCmdWaitEvents(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 11) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (eventCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) eventCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pEvents)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pEvents = (VkEvent const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (srcStageMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcStageMask = (VkPipelineStageFlags)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dstStageMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstStageMask = (VkPipelineStageFlags)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (memoryBarrierCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memoryBarrierCount = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pMemoryBarriers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryBarriers = (VkMemoryBarrier const*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[7].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 7 argument (bufferMemoryBarrierCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bufferMemoryBarrierCount = (uint32_t)info_[7].As<Napi::Number>().Uint32Value();

    if (!info_[8].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 8 argument (pBufferMemoryBarriers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBufferMemoryBarriers = (VkBufferMemoryBarrier const*)info_[8].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[9].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 9 argument (imageMemoryBarrierCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageMemoryBarrierCount = (uint32_t)info_[9].As<Napi::Number>().Uint32Value();

    if (!info_[10].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 10 argument (pImageMemoryBarriers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageMemoryBarriers = (VkImageMemoryBarrier const*)info_[10].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    return env.Null();
}
static Napi::Value rawCmdPipelineBarrier(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 10) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (srcStageMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcStageMask = (VkPipelineStageFlags)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (dstStageMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstStageMask = (VkPipelineStageFlags)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (dependencyFlags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dependencyFlags = (VkDependencyFlags)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (memoryBarrierCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memoryBarrierCount = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pMemoryBarriers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryBarriers = (VkMemoryBarrier const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 6 argument (bufferMemoryBarrierCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bufferMemoryBarrierCount = (uint32_t)info_[6].As<Napi::Number>().Uint32Value();

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 7 argument (pBufferMemoryBarriers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBufferMemoryBarriers = (VkBufferMemoryBarrier const*)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[8].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 8 argument (imageMemoryBarrierCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageMemoryBarrierCount = (uint32_t)info_[8].As<Napi::Number>().Uint32Value();

    if (!info_[9].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 9 argument (pImageMemoryBarriers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageMemoryBarriers = (VkImageMemoryBarrier const*)info_[9].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    return env.Null();
}
static Napi::Value rawCmdBeginQuery(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (query)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) query = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkQueryControlFlags)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
    return env.Null();
}
static Napi::Value rawCmdEndQuery(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (query)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) query = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();
    
    ::vkCmdEndQuery(commandBuffer, queryPool, query);
    return env.Null();
}
#ifdef VK_EXT_conditional_rendering
static Napi::Value rawCmdBeginConditionalRenderingEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pConditionalRenderingBegin)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pConditionalRenderingBegin = (VkConditionalRenderingBeginInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
    return env.Null();
}
#endif
#ifdef VK_EXT_conditional_rendering
static Napi::Value rawCmdEndConditionalRenderingEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdEndConditionalRenderingEXT(commandBuffer);
    return env.Null();
}
#endif
static Napi::Value rawCmdResetQueryPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (firstQuery)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstQuery = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (queryCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
    return env.Null();
}
static Napi::Value rawCmdWriteTimestamp(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineStage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineStage = (VkPipelineStageFlagBits)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (query)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) query = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
    return env.Null();
}
static Napi::Value rawCmdCopyQueryPoolResults(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 8) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (firstQuery)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstQuery = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (queryCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dstBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstBuffer = (VkBuffer)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 5 argument (dstOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstOffset = (VkDeviceSize)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 6 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (VkDeviceSize)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 7 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkQueryResultFlags)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
    return env.Null();
}
static Napi::Value rawCmdPushConstants(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (layout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) layout = (VkPipelineLayout)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (stageFlags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stageFlags = (VkShaderStageFlags)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (size)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) size = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pValues)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pValues = (void const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
    return env.Null();
}
static Napi::Value rawCmdBeginRenderPass(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pRenderPassBegin)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRenderPassBegin = (VkRenderPassBeginInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (contents)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) contents = (VkSubpassContents)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
    return env.Null();
}
static Napi::Value rawCmdNextSubpass(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (contents)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) contents = (VkSubpassContents)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdNextSubpass(commandBuffer, contents);
    return env.Null();
}
static Napi::Value rawCmdEndRenderPass(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdEndRenderPass(commandBuffer);
    return env.Null();
}
static Napi::Value rawCmdExecuteCommands(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (commandBufferCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBufferCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCommandBuffers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCommandBuffers = (VkCommandBuffer const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
    return env.Null();
}
#ifdef VK_KHR_android_surface
static Napi::Value rawCreateAndroidSurfaceKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkAndroidSurfaceCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_display
static Napi::Value rawGetPhysicalDeviceDisplayPropertiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkDisplayPropertiesKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_display
static Napi::Value rawGetPhysicalDeviceDisplayPlanePropertiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkDisplayPlanePropertiesKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_display
static Napi::Value rawGetDisplayPlaneSupportedDisplaysKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (planeIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) planeIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDisplayCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDisplayCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pDisplays)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDisplays = (VkDisplayKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_display
static Napi::Value rawGetDisplayModePropertiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkDisplayModePropertiesKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_display
static Napi::Value rawCreateDisplayModeKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDisplayModeCreateInfoKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pMode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMode = (VkDisplayModeKHR*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_display
static Napi::Value rawGetDisplayPlaneCapabilitiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (mode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) mode = (VkDisplayModeKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (planeIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) planeIndex = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCapabilities)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCapabilities = (VkDisplayPlaneCapabilitiesKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_display
static Napi::Value rawCreateDisplayPlaneSurfaceKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDisplaySurfaceCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_display_swapchain
static Napi::Value rawCreateSharedSwapchainsKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (swapchainCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchainCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCreateInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfos = (VkSwapchainCreateInfoKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pSwapchains)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSwapchains = (VkSwapchainKHR*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_surface
static Napi::Value rawDestroySurfaceKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (surface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) surface = (VkSurfaceKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroySurfaceKHR(instance, surface, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_KHR_surface
static Napi::Value rawGetPhysicalDeviceSurfaceSupportKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (queueFamilyIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueFamilyIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (surface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) surface = (VkSurfaceKHR)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSupported)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSupported = (VkBool32*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_surface
static Napi::Value rawGetPhysicalDeviceSurfaceCapabilitiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (surface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) surface = (VkSurfaceKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSurfaceCapabilities)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceCapabilities = (VkSurfaceCapabilitiesKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_surface
static Napi::Value rawGetPhysicalDeviceSurfaceFormatsKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (surface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) surface = (VkSurfaceKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSurfaceFormatCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceFormatCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurfaceFormats)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceFormats = (VkSurfaceFormatKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_surface
static Napi::Value rawGetPhysicalDeviceSurfacePresentModesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (surface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) surface = (VkSurfaceKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPresentModeCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPresentModeCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pPresentModes)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPresentModes = (VkPresentModeKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_swapchain
static Napi::Value rawCreateSwapchainKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkSwapchainCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSwapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSwapchain = (VkSwapchainKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_swapchain
static Napi::Value rawDestroySwapchainKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroySwapchainKHR(device, swapchain, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_KHR_swapchain
static Napi::Value rawGetSwapchainImagesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSwapchainImageCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSwapchainImageCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSwapchainImages)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSwapchainImages = (VkImage*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_swapchain
static Napi::Value rawAcquireNextImageKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (timeout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) timeout = (uint64_t)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (semaphore)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) semaphore = (VkSemaphore)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (fence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fence = (VkFence)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pImageIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageIndex = (uint32_t*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_swapchain
static Napi::Value rawQueuePresentKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPresentInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPresentInfo = (VkPresentInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkQueuePresentKHR(queue, pPresentInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NN_vi_surface
static Napi::Value rawCreateViSurfaceNN(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkViSurfaceCreateInfoNN const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_wayland_surface
static Napi::Value rawCreateWaylandSurfaceKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkWaylandSurfaceCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_wayland_surface
static Napi::Value rawGetPhysicalDeviceWaylandPresentationSupportKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (queueFamilyIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueFamilyIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (wl_display*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_win32_surface
static Napi::Value rawCreateWin32SurfaceKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkWin32SurfaceCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_win32_surface
static Napi::Value rawGetPhysicalDeviceWin32PresentationSupportKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (queueFamilyIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueFamilyIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();
    
    decltype(auto) result = ::vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_xlib_surface
static Napi::Value rawCreateXlibSurfaceKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkXlibSurfaceCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_xlib_surface
static Napi::Value rawGetPhysicalDeviceXlibPresentationSupportKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (queueFamilyIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueFamilyIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (dpy)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dpy = (Display*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (visualID)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) visualID = (VisualID)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_xcb_surface
static Napi::Value rawCreateXcbSurfaceKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkXcbSurfaceCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_xcb_surface
static Napi::Value rawGetPhysicalDeviceXcbPresentationSupportKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (queueFamilyIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueFamilyIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (connection)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) connection = (xcb_connection_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (visual_id)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) visual_id = (xcb_visualid_t)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_directfb_surface
static Napi::Value rawCreateDirectFBSurfaceEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDirectFBSurfaceCreateInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_directfb_surface
static Napi::Value rawGetPhysicalDeviceDirectFBPresentationSupportEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (queueFamilyIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueFamilyIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (dfb)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dfb = (IDirectFB*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_FUCHSIA_imagepipe_surface
static Napi::Value rawCreateImagePipeSurfaceFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkImagePipeSurfaceCreateInfoFUCHSIA const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_GGP_stream_descriptor_surface
static Napi::Value rawCreateStreamDescriptorSurfaceGGP(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkStreamDescriptorSurfaceCreateInfoGGP const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_QNX_screen_surface
static Napi::Value rawCreateScreenSurfaceQNX(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkScreenSurfaceCreateInfoQNX const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateScreenSurfaceQNX(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_QNX_screen_surface
static Napi::Value rawGetPhysicalDeviceScreenPresentationSupportQNX(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (queueFamilyIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueFamilyIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (window)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) window = (_screen_window*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceScreenPresentationSupportQNX(physicalDevice, queueFamilyIndex, window);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_debug_report
static Napi::Value rawCreateDebugReportCallbackEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDebugReportCallbackCreateInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCallback)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCallback = (VkDebugReportCallbackEXT*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_debug_report
static Napi::Value rawDestroyDebugReportCallbackEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (callback)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) callback = (VkDebugReportCallbackEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_report
static Napi::Value rawDebugReportMessageEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 8) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkDebugReportFlagsEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (objectType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) objectType = (VkDebugReportObjectTypeEXT)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (object)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) object = (uint64_t)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (location)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) location = (size_t)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (messageCode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) messageCode = (int32_t)info_[5].As<Napi::Number>().Int32Value();

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pLayerPrefix)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLayerPrefix = (char const*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 7 argument (pMessage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMessage = (char const*)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_marker
static Napi::Value rawDebugMarkerSetObjectNameEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pNameInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pNameInfo = (VkDebugMarkerObjectNameInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_debug_marker
static Napi::Value rawDebugMarkerSetObjectTagEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pTagInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pTagInfo = (VkDebugMarkerObjectTagInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_debug_marker
static Napi::Value rawCmdDebugMarkerBeginEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pMarkerInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMarkerInfo = (VkDebugMarkerMarkerInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_marker
static Napi::Value rawCmdDebugMarkerEndEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdDebugMarkerEndEXT(commandBuffer);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_marker
static Napi::Value rawCmdDebugMarkerInsertEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pMarkerInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMarkerInfo = (VkDebugMarkerMarkerInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
    return env.Null();
}
#endif
#ifdef VK_NV_external_memory_capabilities
static Napi::Value rawGetPhysicalDeviceExternalImageFormatPropertiesNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 8) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (format)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) format = (VkFormat)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (type)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) type = (VkImageType)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (tiling)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) tiling = (VkImageTiling)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (usage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) usage = (VkImageUsageFlags)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 5 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkImageCreateFlags)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 6 argument (externalHandleType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) externalHandleType = (VkExternalMemoryHandleTypeFlagsNV)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 7 argument (pExternalImageFormatProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExternalImageFormatProperties = (VkExternalImageFormatPropertiesNV*)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_external_memory_win32
static Napi::Value rawGetMemoryWin32HandleNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (memory)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memory = (VkDeviceMemory)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (handleType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) handleType = (VkExternalMemoryHandleTypeFlagsNV)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pHandle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pHandle = (HANDLE*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_device_generated_commands
static Napi::Value rawCmdExecuteGeneratedCommandsNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (isPreprocessed)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) isPreprocessed = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pGeneratedCommandsInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGeneratedCommandsInfo = (VkGeneratedCommandsInfoNV const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
    return env.Null();
}
#endif
#ifdef VK_NV_device_generated_commands
static Napi::Value rawCmdPreprocessGeneratedCommandsNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pGeneratedCommandsInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGeneratedCommandsInfo = (VkGeneratedCommandsInfoNV const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
    return env.Null();
}
#endif
#ifdef VK_NV_device_generated_commands
static Napi::Value rawCmdBindPipelineShaderGroupNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineBindPoint)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineBindPoint = (VkPipelineBindPoint)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (pipeline)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipeline = (VkPipeline)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (groupIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupIndex = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
    return env.Null();
}
#endif
#ifdef VK_NV_device_generated_commands
static Napi::Value rawGetGeneratedCommandsMemoryRequirementsNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkGeneratedCommandsMemoryRequirementsInfoNV const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirements = (VkMemoryRequirements2*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    return env.Null();
}
#endif
#ifdef VK_NV_device_generated_commands
static Napi::Value rawCreateIndirectCommandsLayoutNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkIndirectCommandsLayoutCreateInfoNV const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pIndirectCommandsLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pIndirectCommandsLayout = (VkIndirectCommandsLayoutNV*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_device_generated_commands
static Napi::Value rawDestroyIndirectCommandsLayoutNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (indirectCommandsLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) indirectCommandsLayout = (VkIndirectCommandsLayoutNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
    return env.Null();
}
#endif
static Napi::Value rawGetPhysicalDeviceFeatures2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pFeatures)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFeatures = (VkPhysicalDeviceFeatures2*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceProperties2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkPhysicalDeviceProperties2*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceFormatProperties2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (format)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) format = (VkFormat)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFormatProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFormatProperties = (VkFormatProperties2*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceImageFormatProperties2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pImageFormatInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageFormatInfo = (VkPhysicalDeviceImageFormatInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pImageFormatProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageFormatProperties = (VkImageFormatProperties2*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
    return Napi::Number::New(env, result);
}
static Napi::Value rawGetPhysicalDeviceQueueFamilyProperties2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pQueueFamilyPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pQueueFamilyPropertyCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pQueueFamilyProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pQueueFamilyProperties = (VkQueueFamilyProperties2*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceMemoryProperties2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pMemoryProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryProperties = (VkPhysicalDeviceMemoryProperties2*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceSparseImageFormatProperties2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pFormatInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFormatInfo = (VkPhysicalDeviceSparseImageFormatInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkSparseImageFormatProperties2*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
    return env.Null();
}
#ifdef VK_KHR_push_descriptor
static Napi::Value rawCmdPushDescriptorSetKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineBindPoint)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineBindPoint = (VkPipelineBindPoint)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (layout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) layout = (VkPipelineLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (set)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) set = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (descriptorWriteCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorWriteCount = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pDescriptorWrites)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDescriptorWrites = (VkWriteDescriptorSet const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
    return env.Null();
}
#endif
static Napi::Value rawTrimCommandPool(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (commandPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandPool = (VkCommandPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkCommandPoolTrimFlags)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkTrimCommandPool(device, commandPool, flags);
    return env.Null();
}
static Napi::Value rawGetPhysicalDeviceExternalBufferProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pExternalBufferInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExternalBufferInfo = (VkPhysicalDeviceExternalBufferInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pExternalBufferProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExternalBufferProperties = (VkExternalBufferProperties*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
    return env.Null();
}
#ifdef VK_KHR_external_memory_win32
static Napi::Value rawGetMemoryWin32HandleKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pGetWin32HandleInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGetWin32HandleInfo = (VkMemoryGetWin32HandleInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pHandle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pHandle = (HANDLE*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_external_memory_win32
static Napi::Value rawGetMemoryWin32HandlePropertiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (handleType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) handleType = (VkExternalMemoryHandleTypeFlagBits)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (handle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) handle = (HANDLE)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMemoryWin32HandleProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryWin32HandleProperties = (VkMemoryWin32HandlePropertiesKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_external_memory_fd
static Napi::Value rawGetMemoryFdKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pGetFdInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGetFdInfo = (VkMemoryGetFdInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFd)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFd = (int*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_external_memory_fd
static Napi::Value rawGetMemoryFdPropertiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (handleType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) handleType = (VkExternalMemoryHandleTypeFlagBits)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (fd)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fd = (int)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMemoryFdProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryFdProperties = (VkMemoryFdPropertiesKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_FUCHSIA_external_memory
static Napi::Value rawGetMemoryZirconHandleFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pGetZirconHandleInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGetZirconHandleInfo = (VkMemoryGetZirconHandleInfoFUCHSIA const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pZirconHandle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pZirconHandle = (zx_handle_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_FUCHSIA_external_memory
static Napi::Value rawGetMemoryZirconHandlePropertiesFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (handleType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) handleType = (VkExternalMemoryHandleTypeFlagBits)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (zirconHandle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) zirconHandle = (zx_handle_t)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMemoryZirconHandleProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryZirconHandleProperties = (VkMemoryZirconHandlePropertiesFUCHSIA*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryZirconHandlePropertiesFUCHSIA(device, handleType, zirconHandle, pMemoryZirconHandleProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_external_memory_rdma
static Napi::Value rawGetMemoryRemoteAddressNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pMemoryGetRemoteAddressInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryGetRemoteAddressInfo = (VkMemoryGetRemoteAddressInfoNV const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAddress)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAddress = (VkRemoteAddressNV*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawGetPhysicalDeviceExternalSemaphoreProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pExternalSemaphoreInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExternalSemaphoreInfo = (VkPhysicalDeviceExternalSemaphoreInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pExternalSemaphoreProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExternalSemaphoreProperties = (VkExternalSemaphoreProperties*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
    return env.Null();
}
#ifdef VK_KHR_external_semaphore_win32
static Napi::Value rawGetSemaphoreWin32HandleKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pGetWin32HandleInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGetWin32HandleInfo = (VkSemaphoreGetWin32HandleInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pHandle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pHandle = (HANDLE*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_external_semaphore_win32
static Napi::Value rawImportSemaphoreWin32HandleKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pImportSemaphoreWin32HandleInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImportSemaphoreWin32HandleInfo = (VkImportSemaphoreWin32HandleInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_external_semaphore_fd
static Napi::Value rawGetSemaphoreFdKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pGetFdInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGetFdInfo = (VkSemaphoreGetFdInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFd)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFd = (int*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_external_semaphore_fd
static Napi::Value rawImportSemaphoreFdKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pImportSemaphoreFdInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImportSemaphoreFdInfo = (VkImportSemaphoreFdInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value rawGetSemaphoreZirconHandleFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pGetZirconHandleInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGetZirconHandleInfo = (VkSemaphoreGetZirconHandleInfoFUCHSIA const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pZirconHandle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pZirconHandle = (zx_handle_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetSemaphoreZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_FUCHSIA_external_semaphore
static Napi::Value rawImportSemaphoreZirconHandleFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pImportSemaphoreZirconHandleInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImportSemaphoreZirconHandleInfo = (VkImportSemaphoreZirconHandleInfoFUCHSIA const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkImportSemaphoreZirconHandleFUCHSIA(device, pImportSemaphoreZirconHandleInfo);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawGetPhysicalDeviceExternalFenceProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pExternalFenceInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExternalFenceInfo = (VkPhysicalDeviceExternalFenceInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pExternalFenceProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExternalFenceProperties = (VkExternalFenceProperties*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
    return env.Null();
}
#ifdef VK_KHR_external_fence_win32
static Napi::Value rawGetFenceWin32HandleKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pGetWin32HandleInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGetWin32HandleInfo = (VkFenceGetWin32HandleInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pHandle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pHandle = (HANDLE*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_external_fence_win32
static Napi::Value rawImportFenceWin32HandleKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pImportFenceWin32HandleInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImportFenceWin32HandleInfo = (VkImportFenceWin32HandleInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_external_fence_fd
static Napi::Value rawGetFenceFdKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pGetFdInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pGetFdInfo = (VkFenceGetFdInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFd)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFd = (int*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetFenceFdKHR(device, pGetFdInfo, pFd);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_external_fence_fd
static Napi::Value rawImportFenceFdKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pImportFenceFdInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImportFenceFdInfo = (VkImportFenceFdInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkImportFenceFdKHR(device, pImportFenceFdInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_direct_mode_display
static Napi::Value rawReleaseDisplayEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkReleaseDisplayEXT(physicalDevice, display);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_acquire_xlib_display
static Napi::Value rawAcquireXlibDisplayEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (dpy)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dpy = (Display*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAcquireXlibDisplayEXT(physicalDevice, dpy, display);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_acquire_xlib_display
static Napi::Value rawGetRandROutputDisplayEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (dpy)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dpy = (Display*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (rrOutput)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) rrOutput = (RROutput)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pDisplay)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDisplay = (VkDisplayKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_acquire_winrt_display
static Napi::Value rawAcquireWinrtDisplayNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAcquireWinrtDisplayNV(physicalDevice, display);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_acquire_winrt_display
static Napi::Value rawGetWinrtDisplayNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (deviceRelativeId)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deviceRelativeId = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDisplay)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDisplay = (VkDisplayKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_display_control
static Napi::Value rawDisplayPowerControlEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDisplayPowerInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDisplayPowerInfo = (VkDisplayPowerInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_display_control
static Napi::Value rawRegisterDeviceEventEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pDeviceEventInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDeviceEventInfo = (VkDeviceEventInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pFence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFence = (VkFence*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_display_control
static Napi::Value rawRegisterDisplayEventEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDisplayEventInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDisplayEventInfo = (VkDisplayEventInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pFence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFence = (VkFence*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_display_control
static Napi::Value rawGetSwapchainCounterEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (counter)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) counter = (VkSurfaceCounterFlagBitsEXT)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCounterValue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCounterValue = (uint64_t*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_display_surface_counter
static Napi::Value rawGetPhysicalDeviceSurfaceCapabilities2EXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (surface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) surface = (VkSurfaceKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSurfaceCapabilities)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceCapabilities = (VkSurfaceCapabilities2EXT*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawEnumeratePhysicalDeviceGroups(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPhysicalDeviceGroupCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPhysicalDeviceGroupCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPhysicalDeviceGroupProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPhysicalDeviceGroupProperties = (VkPhysicalDeviceGroupProperties*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
    return Napi::Number::New(env, result);
}
static Napi::Value rawGetDeviceGroupPeerMemoryFeatures(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (heapIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) heapIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (localDeviceIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) localDeviceIndex = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (remoteDeviceIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) remoteDeviceIndex = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pPeerMemoryFeatures)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPeerMemoryFeatures = (VkPeerMemoryFeatureFlags*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
    return env.Null();
}
static Napi::Value rawBindBufferMemory2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (bindInfoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bindInfoCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pBindInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBindInfos = (VkBindBufferMemoryInfo const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
    return Napi::Number::New(env, result);
}
static Napi::Value rawBindImageMemory2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (bindInfoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bindInfoCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pBindInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBindInfos = (VkBindImageMemoryInfo const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBindImageMemory2(device, bindInfoCount, pBindInfos);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCmdSetDeviceMask(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (deviceMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deviceMask = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetDeviceMask(commandBuffer, deviceMask);
    return env.Null();
}
#ifdef VK_KHR_device_group
static Napi::Value rawGetDeviceGroupPresentCapabilitiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pDeviceGroupPresentCapabilities)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDeviceGroupPresentCapabilities = (VkDeviceGroupPresentCapabilitiesKHR*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_device_group
static Napi::Value rawGetDeviceGroupSurfacePresentModesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (surface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) surface = (VkSurfaceKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pModes)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pModes = (VkDeviceGroupPresentModeFlagsKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_device_group
static Napi::Value rawAcquireNextImage2KHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pAcquireInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAcquireInfo = (VkAcquireNextImageInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pImageIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageIndex = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawCmdDispatchBase(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (baseGroupX)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) baseGroupX = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (baseGroupY)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) baseGroupY = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (baseGroupZ)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) baseGroupZ = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (groupCountX)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCountX = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (groupCountY)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCountY = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 6 argument (groupCountZ)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCountZ = (uint32_t)info_[6].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    return env.Null();
}
#ifdef VK_KHR_device_group
static Napi::Value rawGetPhysicalDevicePresentRectanglesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (surface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) surface = (VkSurfaceKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pRectCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRectCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pRects)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRects = (VkRect2D*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawCreateDescriptorUpdateTemplate(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDescriptorUpdateTemplateCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pDescriptorUpdateTemplate)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDescriptorUpdateTemplate = (VkDescriptorUpdateTemplate*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyDescriptorUpdateTemplate(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (descriptorUpdateTemplate)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorUpdateTemplate = (VkDescriptorUpdateTemplate)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
    return env.Null();
}
static Napi::Value rawUpdateDescriptorSetWithTemplate(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (descriptorSet)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorSet = (VkDescriptorSet)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (descriptorUpdateTemplate)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorUpdateTemplate = (VkDescriptorUpdateTemplate)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
    return env.Null();
}
#ifdef VK_KHR_descriptor_update_template
static Napi::Value rawCmdPushDescriptorSetWithTemplateKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (descriptorUpdateTemplate)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorUpdateTemplate = (VkDescriptorUpdateTemplate)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (layout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) layout = (VkPipelineLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (set)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) set = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
    return env.Null();
}
#endif
#ifdef VK_EXT_hdr_metadata
static Napi::Value rawSetHdrMetadataEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (swapchainCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchainCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSwapchains)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSwapchains = (VkSwapchainKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMetadata)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMetadata = (VkHdrMetadataEXT const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
    return env.Null();
}
#endif
#ifdef VK_KHR_shared_presentable_image
static Napi::Value rawGetSwapchainStatusKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetSwapchainStatusKHR(device, swapchain);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_GOOGLE_display_timing
static Napi::Value rawGetRefreshCycleDurationGOOGLE(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDisplayTimingProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDisplayTimingProperties = (VkRefreshCycleDurationGOOGLE*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_GOOGLE_display_timing
static Napi::Value rawGetPastPresentationTimingGOOGLE(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPresentationTimingCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPresentationTimingCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pPresentationTimings)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPresentationTimings = (VkPastPresentationTimingGOOGLE*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_MVK_ios_surface
static Napi::Value rawCreateIOSSurfaceMVK(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkIOSSurfaceCreateInfoMVK const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_MVK_macos_surface
static Napi::Value rawCreateMacOSSurfaceMVK(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkMacOSSurfaceCreateInfoMVK const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_metal_surface
static Napi::Value rawCreateMetalSurfaceEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkMetalSurfaceCreateInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_clip_space_w_scaling
static Napi::Value rawCmdSetViewportWScalingNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstViewport)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstViewport = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (viewportCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) viewportCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pViewportWScalings)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pViewportWScalings = (VkViewportWScalingNV const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
    return env.Null();
}
#endif
#ifdef VK_EXT_discard_rectangles
static Napi::Value rawCmdSetDiscardRectangleEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstDiscardRectangle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstDiscardRectangle = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (discardRectangleCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) discardRectangleCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pDiscardRectangles)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDiscardRectangles = (VkRect2D const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
    return env.Null();
}
#endif
#ifdef VK_EXT_sample_locations
static Napi::Value rawCmdSetSampleLocationsEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pSampleLocationsInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSampleLocationsInfo = (VkSampleLocationsInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_sample_locations
static Napi::Value rawGetPhysicalDeviceMultisamplePropertiesEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (samples)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) samples = (VkSampleCountFlagBits)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMultisampleProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMultisampleProperties = (VkMultisamplePropertiesEXT*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
    return env.Null();
}
#endif
#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value rawGetPhysicalDeviceSurfaceCapabilities2KHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pSurfaceInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceInfo = (VkPhysicalDeviceSurfaceInfo2KHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSurfaceCapabilities)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceCapabilities = (VkSurfaceCapabilities2KHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_get_surface_capabilities2
static Napi::Value rawGetPhysicalDeviceSurfaceFormats2KHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pSurfaceInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceInfo = (VkPhysicalDeviceSurfaceInfo2KHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSurfaceFormatCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceFormatCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurfaceFormats)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceFormats = (VkSurfaceFormat2KHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_get_display_properties2
static Napi::Value rawGetPhysicalDeviceDisplayProperties2KHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkDisplayProperties2KHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_get_display_properties2
static Napi::Value rawGetPhysicalDeviceDisplayPlaneProperties2KHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkDisplayPlaneProperties2KHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_get_display_properties2
static Napi::Value rawGetDisplayModeProperties2KHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkDisplayModeProperties2KHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_get_display_properties2
static Napi::Value rawGetDisplayPlaneCapabilities2KHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pDisplayPlaneInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDisplayPlaneInfo = (VkDisplayPlaneInfo2KHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCapabilities)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCapabilities = (VkDisplayPlaneCapabilities2KHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawGetBufferMemoryRequirements2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkBufferMemoryRequirementsInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirements = (VkMemoryRequirements2*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
    return env.Null();
}
static Napi::Value rawGetImageMemoryRequirements2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkImageMemoryRequirementsInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirements = (VkMemoryRequirements2*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
    return env.Null();
}
static Napi::Value rawGetImageSparseMemoryRequirements2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkImageSparseMemoryRequirementsInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSparseMemoryRequirementCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSparseMemoryRequirementCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSparseMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSparseMemoryRequirements = (VkSparseImageMemoryRequirements2*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    return env.Null();
}
static Napi::Value rawGetDeviceBufferMemoryRequirements(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkDeviceBufferMemoryRequirements const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirements = (VkMemoryRequirements2*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);
    return env.Null();
}
static Napi::Value rawGetDeviceImageMemoryRequirements(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkDeviceImageMemoryRequirements const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirements = (VkMemoryRequirements2*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);
    return env.Null();
}
static Napi::Value rawGetDeviceImageSparseMemoryRequirements(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkDeviceImageMemoryRequirements const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSparseMemoryRequirementCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSparseMemoryRequirementCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSparseMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSparseMemoryRequirements = (VkSparseImageMemoryRequirements2*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    return env.Null();
}
static Napi::Value rawCreateSamplerYcbcrConversion(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkSamplerYcbcrConversionCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pYcbcrConversion)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pYcbcrConversion = (VkSamplerYcbcrConversion*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroySamplerYcbcrConversion(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (ycbcrConversion)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) ycbcrConversion = (VkSamplerYcbcrConversion)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
    return env.Null();
}
static Napi::Value rawGetDeviceQueue2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pQueueInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pQueueInfo = (VkDeviceQueueInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pQueue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pQueue = (VkQueue*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceQueue2(device, pQueueInfo, pQueue);
    return env.Null();
}
#ifdef VK_EXT_validation_cache
static Napi::Value rawCreateValidationCacheEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkValidationCacheCreateInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pValidationCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pValidationCache = (VkValidationCacheEXT*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_validation_cache
static Napi::Value rawDestroyValidationCacheEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (validationCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) validationCache = (VkValidationCacheEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_EXT_validation_cache
static Napi::Value rawGetValidationCacheDataEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (validationCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) validationCache = (VkValidationCacheEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDataSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDataSize = (size_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_validation_cache
static Napi::Value rawMergeValidationCachesEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (dstCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstCache = (VkValidationCacheEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (srcCacheCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) srcCacheCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSrcCaches)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSrcCaches = (VkValidationCacheEXT const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawGetDescriptorSetLayoutSupport(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDescriptorSetLayoutCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSupport)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSupport = (VkDescriptorSetLayoutSupport*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
    return env.Null();
}
#ifdef VK_ANDROID_native_buffer
static Napi::Value rawGetSwapchainGrallocUsageANDROID(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (format)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) format = (VkFormat)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (imageUsage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageUsage = (VkImageUsageFlags)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (grallocUsage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) grallocUsage = (int*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_ANDROID_native_buffer
static Napi::Value rawGetSwapchainGrallocUsage2ANDROID(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (format)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) format = (VkFormat)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (imageUsage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageUsage = (VkImageUsageFlags)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (swapchainImageUsage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchainImageUsage = (VkSwapchainImageUsageFlagsANDROID)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (grallocConsumerUsage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) grallocConsumerUsage = (uint64_t*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (grallocProducerUsage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) grallocProducerUsage = (uint64_t*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_ANDROID_native_buffer
static Napi::Value rawAcquireImageANDROID(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (nativeFenceFd)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) nativeFenceFd = (int)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (semaphore)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) semaphore = (VkSemaphore)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (fence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fence = (VkFence)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_ANDROID_native_buffer
static Napi::Value rawQueueSignalReleaseImageANDROID(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (waitSemaphoreCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) waitSemaphoreCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pWaitSemaphores)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pWaitSemaphores = (VkSemaphore const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pNativeFenceFd)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pNativeFenceFd = (int*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_AMD_shader_info
static Napi::Value rawGetShaderInfoAMD(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipeline)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipeline = (VkPipeline)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (shaderStage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) shaderStage = (VkShaderStageFlagBits)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (infoType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) infoType = (VkShaderInfoTypeAMD)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pInfoSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfoSize = (size_t*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (void*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_AMD_display_native_hdr
static Napi::Value rawSetLocalDimmingAMD(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapChain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapChain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (localDimmingEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) localDimmingEnable = (VkBool32)info_[2].As<Napi::Number>().Uint32Value();
    
    ::vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_calibrated_timestamps
static Napi::Value rawGetPhysicalDeviceCalibrateableTimeDomainsEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pTimeDomainCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pTimeDomainCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pTimeDomains)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pTimeDomains = (VkTimeDomainEXT*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_calibrated_timestamps
static Napi::Value rawGetCalibratedTimestampsEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (timestampCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) timestampCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pTimestampInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pTimestampInfos = (VkCalibratedTimestampInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pTimestamps)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pTimestamps = (uint64_t*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pMaxDeviation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMaxDeviation = (uint64_t*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawSetDebugUtilsObjectNameEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pNameInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pNameInfo = (VkDebugUtilsObjectNameInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawSetDebugUtilsObjectTagEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pTagInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pTagInfo = (VkDebugUtilsObjectTagInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawQueueBeginDebugUtilsLabelEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pLabelInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLabelInfo = (VkDebugUtilsLabelEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawQueueEndDebugUtilsLabelEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkQueueEndDebugUtilsLabelEXT(queue);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawQueueInsertDebugUtilsLabelEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pLabelInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLabelInfo = (VkDebugUtilsLabelEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawCmdBeginDebugUtilsLabelEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pLabelInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLabelInfo = (VkDebugUtilsLabelEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawCmdEndDebugUtilsLabelEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdEndDebugUtilsLabelEXT(commandBuffer);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawCmdInsertDebugUtilsLabelEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pLabelInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLabelInfo = (VkDebugUtilsLabelEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawCreateDebugUtilsMessengerEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkDebugUtilsMessengerCreateInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMessenger)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMessenger = (VkDebugUtilsMessengerEXT*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawDestroyDebugUtilsMessengerEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (messenger)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) messenger = (VkDebugUtilsMessengerEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_EXT_debug_utils
static Napi::Value rawSubmitDebugUtilsMessageEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (messageSeverity)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) messageSeverity = (VkDebugUtilsMessageSeverityFlagBitsEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (messageTypes)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) messageTypes = (VkDebugUtilsMessageTypeFlagsEXT)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCallbackData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCallbackData = (VkDebugUtilsMessengerCallbackDataEXT const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
    return env.Null();
}
#endif
#ifdef VK_EXT_external_memory_host
static Napi::Value rawGetMemoryHostPointerPropertiesEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (handleType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) handleType = (VkExternalMemoryHandleTypeFlagBits)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pHostPointer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pHostPointer = (void const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMemoryHostPointerProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryHostPointerProperties = (VkMemoryHostPointerPropertiesEXT*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_AMD_buffer_marker
static Napi::Value rawCmdWriteBufferMarkerAMD(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineStage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineStage = (VkPipelineStageFlagBits)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (dstBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstBuffer = (VkBuffer)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (dstOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstOffset = (VkDeviceSize)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (marker)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) marker = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();
    
    ::vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
    return env.Null();
}
#endif
static Napi::Value rawCreateRenderPass2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkRenderPassCreateInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pRenderPass)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRenderPass = (VkRenderPass*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCmdBeginRenderPass2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pRenderPassBegin)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRenderPassBegin = (VkRenderPassBeginInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSubpassBeginInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSubpassBeginInfo = (VkSubpassBeginInfo const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
    return env.Null();
}
static Napi::Value rawCmdNextSubpass2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pSubpassBeginInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSubpassBeginInfo = (VkSubpassBeginInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSubpassEndInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSubpassEndInfo = (VkSubpassEndInfo const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
    return env.Null();
}
static Napi::Value rawCmdEndRenderPass2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pSubpassEndInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSubpassEndInfo = (VkSubpassEndInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
    return env.Null();
}
static Napi::Value rawGetSemaphoreCounterValue(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (semaphore)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) semaphore = (VkSemaphore)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pValue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pValue = (uint64_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetSemaphoreCounterValue(device, semaphore, pValue);
    return Napi::Number::New(env, result);
}
static Napi::Value rawWaitSemaphores(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pWaitInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pWaitInfo = (VkSemaphoreWaitInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (timeout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) timeout = (uint64_t)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkWaitSemaphores(device, pWaitInfo, timeout);
    return Napi::Number::New(env, result);
}
static Napi::Value rawSignalSemaphore(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pSignalInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSignalInfo = (VkSemaphoreSignalInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkSignalSemaphore(device, pSignalInfo);
    return Napi::Number::New(env, result);
}
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value rawGetAndroidHardwareBufferPropertiesANDROID(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (AHardwareBuffer const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkAndroidHardwareBufferPropertiesANDROID*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
static Napi::Value rawGetMemoryAndroidHardwareBufferANDROID(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkMemoryGetAndroidHardwareBufferInfoANDROID const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer of pointers) at 2 argument (pBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBuffer = (AHardwareBuffer**)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawCmdDrawIndirectCount(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (countBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) countBuffer = (VkBuffer)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (countBufferOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) countBufferOffset = (VkDeviceSize)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (maxDrawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) maxDrawCount = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 6 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[6].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    return env.Null();
}
static Napi::Value rawCmdDrawIndexedIndirectCount(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (countBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) countBuffer = (VkBuffer)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (countBufferOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) countBufferOffset = (VkDeviceSize)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (maxDrawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) maxDrawCount = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 6 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[6].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    return env.Null();
}
#ifdef VK_NV_device_diagnostic_checkpoints
static Napi::Value rawCmdSetCheckpointNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCheckpointMarker)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCheckpointMarker = (void const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
    return env.Null();
}
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
static Napi::Value rawGetQueueCheckpointDataNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCheckpointDataCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCheckpointDataCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCheckpointData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCheckpointData = (VkCheckpointDataNV*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
    return env.Null();
}
#endif
#ifdef VK_EXT_transform_feedback
static Napi::Value rawCmdBindTransformFeedbackBuffersEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstBinding)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstBinding = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (bindingCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bindingCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pBuffers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBuffers = (VkBuffer const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pOffsets)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pOffsets = (VkDeviceSize const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pSizes)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSizes = (VkDeviceSize const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
    return env.Null();
}
#endif
#ifdef VK_EXT_transform_feedback
static Napi::Value rawCmdBeginTransformFeedbackEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstCounterBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstCounterBuffer = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (counterBufferCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) counterBufferCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCounterBuffers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCounterBuffers = (VkBuffer const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pCounterBufferOffsets)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCounterBufferOffsets = (VkDeviceSize const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    return env.Null();
}
#endif
#ifdef VK_EXT_transform_feedback
static Napi::Value rawCmdEndTransformFeedbackEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstCounterBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstCounterBuffer = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (counterBufferCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) counterBufferCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCounterBuffers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCounterBuffers = (VkBuffer const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pCounterBufferOffsets)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCounterBufferOffsets = (VkDeviceSize const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    return env.Null();
}
#endif
#ifdef VK_EXT_transform_feedback
static Napi::Value rawCmdBeginQueryIndexedEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (query)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) query = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (flags)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) flags = (VkQueryControlFlags)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (index)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) index = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();
    
    ::vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
    return env.Null();
}
#endif
#ifdef VK_EXT_transform_feedback
static Napi::Value rawCmdEndQueryIndexedEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (query)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) query = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (index)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) index = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
    return env.Null();
}
#endif
#ifdef VK_EXT_transform_feedback
static Napi::Value rawCmdDrawIndirectByteCountEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (instanceCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instanceCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (firstInstance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstInstance = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (counterBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) counterBuffer = (VkBuffer)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (counterBufferOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) counterBufferOffset = (VkDeviceSize)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (counterOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) counterOffset = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 6 argument (vertexStride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) vertexStride = (uint32_t)info_[6].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
    return env.Null();
}
#endif
#ifdef VK_NV_scissor_exclusive
static Napi::Value rawCmdSetExclusiveScissorNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstExclusiveScissor)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstExclusiveScissor = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (exclusiveScissorCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) exclusiveScissorCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pExclusiveScissors)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExclusiveScissors = (VkRect2D const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
    return env.Null();
}
#endif
#ifdef VK_NV_shading_rate_image
static Napi::Value rawCmdBindShadingRateImageNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (imageView)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageView = (VkImageView)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (imageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageLayout = (VkImageLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
    return env.Null();
}
#endif
#ifdef VK_NV_shading_rate_image
static Napi::Value rawCmdSetViewportShadingRatePaletteNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstViewport)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstViewport = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (viewportCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) viewportCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pShadingRatePalettes)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pShadingRatePalettes = (VkShadingRatePaletteNV const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
    return env.Null();
}
#endif
#ifdef VK_NV_shading_rate_image
static Napi::Value rawCmdSetCoarseSampleOrderNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (sampleOrderType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) sampleOrderType = (VkCoarseSampleOrderTypeNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (customSampleOrderCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) customSampleOrderCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCustomSampleOrders)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCustomSampleOrders = (VkCoarseSampleOrderCustomNV const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
    return env.Null();
}
#endif
#ifdef VK_NV_mesh_shader
static Napi::Value rawCmdDrawMeshTasksNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (taskCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) taskCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (firstTask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstTask = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
    return env.Null();
}
#endif
#ifdef VK_NV_mesh_shader
static Napi::Value rawCmdDrawMeshTasksIndirectNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (drawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) drawCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
    return env.Null();
}
#endif
#ifdef VK_NV_mesh_shader
static Napi::Value rawCmdDrawMeshTasksIndirectCountNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (countBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) countBuffer = (VkBuffer)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (countBufferOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) countBufferOffset = (VkDeviceSize)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (maxDrawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) maxDrawCount = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 6 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[6].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    return env.Null();
}
#endif
#ifdef VK_EXT_mesh_shader
static Napi::Value rawCmdDrawMeshTasksEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (groupCountX)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCountX = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (groupCountY)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCountY = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (groupCountZ)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCountZ = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);
    return env.Null();
}
#endif
#ifdef VK_EXT_mesh_shader
static Napi::Value rawCmdDrawMeshTasksIndirectEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (drawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) drawCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);
    return env.Null();
}
#endif
#ifdef VK_EXT_mesh_shader
static Napi::Value rawCmdDrawMeshTasksIndirectCountEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (offset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) offset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (countBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) countBuffer = (VkBuffer)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (countBufferOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) countBufferOffset = (VkDeviceSize)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (maxDrawCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) maxDrawCount = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 6 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[6].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    return env.Null();
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawCompileDeferredNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipeline)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipeline = (VkPipeline)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (shader)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) shader = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();
    
    decltype(auto) result = ::vkCompileDeferredNV(device, pipeline, shader);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawCreateAccelerationStructureNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkAccelerationStructureCreateInfoNV const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pAccelerationStructure)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAccelerationStructure = (VkAccelerationStructureNV*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_HUAWEI_invocation_mask
static Napi::Value rawCmdBindInvocationMaskHUAWEI(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (imageView)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageView = (VkImageView)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (imageLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageLayout = (VkImageLayout)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBindInvocationMaskHUAWEI(commandBuffer, imageView, imageLayout);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawDestroyAccelerationStructureKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (accelerationStructure)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) accelerationStructure = (VkAccelerationStructureKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawDestroyAccelerationStructureNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (accelerationStructure)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) accelerationStructure = (VkAccelerationStructureNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawGetAccelerationStructureMemoryRequirementsNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkAccelerationStructureMemoryRequirementsInfoNV const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirements = (VkMemoryRequirements2KHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    return env.Null();
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawBindAccelerationStructureMemoryNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (bindInfoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bindInfoCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pBindInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBindInfos = (VkBindAccelerationStructureMemoryInfoNV const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawCmdCopyAccelerationStructureNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (dst)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dst = (VkAccelerationStructureNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (src)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) src = (VkAccelerationStructureNV)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (mode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) mode = (VkCopyAccelerationStructureModeKHR)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCmdCopyAccelerationStructureKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyAccelerationStructureInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCopyAccelerationStructureKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (deferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deferredOperation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyAccelerationStructureInfoKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCmdCopyAccelerationStructureToMemoryKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyAccelerationStructureToMemoryInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCopyAccelerationStructureToMemoryKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (deferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deferredOperation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyAccelerationStructureToMemoryInfoKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCmdCopyMemoryToAccelerationStructureKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyMemoryToAccelerationStructureInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCopyMemoryToAccelerationStructureKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (deferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deferredOperation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyMemoryToAccelerationStructureInfoKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCmdWriteAccelerationStructuresPropertiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (accelerationStructureCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) accelerationStructureCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAccelerationStructures)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAccelerationStructures = (VkAccelerationStructureKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (queryType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryType = (VkQueryType)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (firstQuery)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstQuery = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();
    
    ::vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    return env.Null();
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawCmdWriteAccelerationStructuresPropertiesNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (accelerationStructureCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) accelerationStructureCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAccelerationStructures)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAccelerationStructures = (VkAccelerationStructureNV const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (queryType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryType = (VkQueryType)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (firstQuery)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstQuery = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();
    
    ::vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    return env.Null();
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawCmdBuildAccelerationStructureNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 9) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkAccelerationStructureInfoNV const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (instanceData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instanceData = (VkBuffer)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (instanceOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instanceOffset = (VkDeviceSize)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (update)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) update = (VkBool32)info_[4].As<Napi::Number>().Uint32Value();

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 5 argument (dst)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dst = (VkAccelerationStructureNV)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 6 argument (src)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) src = (VkAccelerationStructureNV)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 7 argument (scratch)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) scratch = (VkBuffer)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[8].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 8 argument (scratchOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) scratchOffset = (VkDeviceSize)info_[8].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawWriteAccelerationStructuresPropertiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (accelerationStructureCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) accelerationStructureCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAccelerationStructures)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAccelerationStructures = (VkAccelerationStructureKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (queryType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryType = (VkQueryType)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dataSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dataSize = (size_t)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 6 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (size_t)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value rawCmdTraceRaysKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 8) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pRaygenShaderBindingTable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRaygenShaderBindingTable = (VkStridedDeviceAddressRegionKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMissShaderBindingTable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMissShaderBindingTable = (VkStridedDeviceAddressRegionKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pHitShaderBindingTable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pHitShaderBindingTable = (VkStridedDeviceAddressRegionKHR const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pCallableShaderBindingTable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCallableShaderBindingTable = (VkStridedDeviceAddressRegionKHR const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (width)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) width = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();

    if (!info_[6].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 6 argument (height)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) height = (uint32_t)info_[6].As<Napi::Number>().Uint32Value();

    if (!info_[7].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 7 argument (depth)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depth = (uint32_t)info_[7].As<Napi::Number>().Uint32Value();
    
    ::vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
    return env.Null();
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawCmdTraceRaysNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 15) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (raygenShaderBindingTableBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) raygenShaderBindingTableBuffer = (VkBuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (raygenShaderBindingOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) raygenShaderBindingOffset = (VkDeviceSize)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (missShaderBindingTableBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) missShaderBindingTableBuffer = (VkBuffer)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (missShaderBindingOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) missShaderBindingOffset = (VkDeviceSize)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 5 argument (missShaderBindingStride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) missShaderBindingStride = (VkDeviceSize)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 6 argument (hitShaderBindingTableBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) hitShaderBindingTableBuffer = (VkBuffer)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[7].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 7 argument (hitShaderBindingOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) hitShaderBindingOffset = (VkDeviceSize)info_[7].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[8].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 8 argument (hitShaderBindingStride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) hitShaderBindingStride = (VkDeviceSize)info_[8].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[9].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 9 argument (callableShaderBindingTableBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) callableShaderBindingTableBuffer = (VkBuffer)info_[9].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[10].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 10 argument (callableShaderBindingOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) callableShaderBindingOffset = (VkDeviceSize)info_[10].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[11].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 11 argument (callableShaderBindingStride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) callableShaderBindingStride = (VkDeviceSize)info_[11].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[12].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 12 argument (width)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) width = (uint32_t)info_[12].As<Napi::Number>().Uint32Value();

    if (!info_[13].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 13 argument (height)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) height = (uint32_t)info_[13].As<Napi::Number>().Uint32Value();

    if (!info_[14].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 14 argument (depth)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depth = (uint32_t)info_[14].As<Napi::Number>().Uint32Value();
    
    ::vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
    return env.Null();
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value rawGetRayTracingShaderGroupHandlesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipeline)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipeline = (VkPipeline)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (firstGroup)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstGroup = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (groupCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dataSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dataSize = (size_t)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value rawGetRayTracingCaptureReplayShaderGroupHandlesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipeline)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipeline = (VkPipeline)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (firstGroup)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstGroup = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (groupCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dataSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dataSize = (size_t)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawGetAccelerationStructureHandleNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (accelerationStructure)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) accelerationStructure = (VkAccelerationStructureNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (dataSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dataSize = (size_t)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_ray_tracing
static Napi::Value rawCreateRayTracingPipelinesNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipelineCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineCache = (VkPipelineCache)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (createInfoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) createInfoCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCreateInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfos = (VkRayTracingPipelineCreateInfoNV const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pPipelines)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPipelines = (VkPipeline*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value rawCreateRayTracingPipelinesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (deferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deferredOperation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (pipelineCache)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineCache = (VkPipelineCache)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (createInfoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) createInfoCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pCreateInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfos = (VkRayTracingPipelineCreateInfoKHR const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pPipelines)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPipelines = (VkPipeline*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_cooperative_matrix
static Napi::Value rawGetPhysicalDeviceCooperativeMatrixPropertiesNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertyCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkCooperativeMatrixPropertiesNV*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value rawCmdTraceRaysIndirectKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pRaygenShaderBindingTable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRaygenShaderBindingTable = (VkStridedDeviceAddressRegionKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMissShaderBindingTable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMissShaderBindingTable = (VkStridedDeviceAddressRegionKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pHitShaderBindingTable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pHitShaderBindingTable = (VkStridedDeviceAddressRegionKHR const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pCallableShaderBindingTable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCallableShaderBindingTable = (VkStridedDeviceAddressRegionKHR const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 5 argument (indirectDeviceAddress)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) indirectDeviceAddress = (VkDeviceAddress)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
    return env.Null();
}
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
static Napi::Value rawCmdTraceRaysIndirect2KHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (indirectDeviceAddress)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) indirectDeviceAddress = (VkDeviceAddress)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawGetDeviceAccelerationStructureCompatibilityKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pVersionInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVersionInfo = (VkAccelerationStructureVersionInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCompatibility)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCompatibility = (VkAccelerationStructureCompatibilityKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
    return env.Null();
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value rawGetRayTracingShaderGroupStackSizeKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (pipeline)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipeline = (VkPipeline)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (group)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) group = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (groupShader)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) groupShader = (VkShaderGroupShaderKHR)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
    return Napi::BigInt::New(env, (uint64_t)result);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
static Napi::Value rawCmdSetRayTracingPipelineStackSizeKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (pipelineStackSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pipelineStackSize = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
    return env.Null();
}
#endif
#ifdef VK_NVX_image_view_handle
static Napi::Value rawGetImageViewHandleNVX(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkImageViewHandleInfoNVX const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetImageViewHandleNVX(device, pInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NVX_image_view_handle
static Napi::Value rawGetImageViewAddressNVX(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (imageView)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) imageView = (VkImageView)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkImageViewAddressPropertiesNVX*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetImageViewAddressNVX(device, imageView, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_full_screen_exclusive
static Napi::Value rawGetPhysicalDeviceSurfacePresentModes2EXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pSurfaceInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceInfo = (VkPhysicalDeviceSurfaceInfo2KHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPresentModeCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPresentModeCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pPresentModes)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPresentModes = (VkPresentModeKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_full_screen_exclusive
static Napi::Value rawGetDeviceGroupSurfacePresentModes2EXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pSurfaceInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurfaceInfo = (VkPhysicalDeviceSurfaceInfo2KHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pModes)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pModes = (VkDeviceGroupPresentModeFlagsKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_full_screen_exclusive
static Napi::Value rawAcquireFullScreenExclusiveModeEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAcquireFullScreenExclusiveModeEXT(device, swapchain);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_full_screen_exclusive
static Napi::Value rawReleaseFullScreenExclusiveModeEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkReleaseFullScreenExclusiveModeEXT(device, swapchain);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_performance_query
static Napi::Value rawEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (queueFamilyIndex)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queueFamilyIndex = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCounterCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCounterCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCounters)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCounters = (VkPerformanceCounterKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pCounterDescriptions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCounterDescriptions = (VkPerformanceCounterDescriptionKHR*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_performance_query
static Napi::Value rawGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPerformanceQueryCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPerformanceQueryCreateInfo = (VkQueryPoolPerformanceCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pNumPasses)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pNumPasses = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
    return env.Null();
}
#endif
#ifdef VK_KHR_performance_query
static Napi::Value rawAcquireProfilingLockKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkAcquireProfilingLockInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAcquireProfilingLockKHR(device, pInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_performance_query
static Napi::Value rawReleaseProfilingLockKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkReleaseProfilingLockKHR(device);
    return env.Null();
}
#endif
#ifdef VK_EXT_image_drm_format_modifier
static Napi::Value rawGetImageDrmFormatModifierPropertiesEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkImageDrmFormatModifierPropertiesEXT*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawGetBufferOpaqueCaptureAddress(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkBufferDeviceAddressInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetBufferOpaqueCaptureAddress(device, pInfo);
    return Napi::BigInt::New(env, (uint64_t)result);
}
static Napi::Value rawGetBufferDeviceAddress(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkBufferDeviceAddressInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetBufferDeviceAddress(device, pInfo);
    return Napi::BigInt::New(env, (uint64_t)result);
}
#ifdef VK_EXT_headless_surface
static Napi::Value rawCreateHeadlessSurfaceEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (instance)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) instance = (VkInstance)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkHeadlessSurfaceCreateInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSurface)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSurface = (VkSurfaceKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_coverage_reduction_mode
static Napi::Value rawGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCombinationCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCombinationCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCombinations)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCombinations = (VkFramebufferMixedSamplesCombinationNV*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_INTEL_performance_query
static Napi::Value rawInitializePerformanceApiINTEL(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInitializeInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInitializeInfo = (VkInitializePerformanceApiInfoINTEL const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkInitializePerformanceApiINTEL(device, pInitializeInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_INTEL_performance_query
static Napi::Value rawUninitializePerformanceApiINTEL(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkUninitializePerformanceApiINTEL(device);
    return env.Null();
}
#endif
#ifdef VK_INTEL_performance_query
static Napi::Value rawCmdSetPerformanceMarkerINTEL(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pMarkerInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMarkerInfo = (VkPerformanceMarkerInfoINTEL const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_INTEL_performance_query
static Napi::Value rawCmdSetPerformanceStreamMarkerINTEL(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pMarkerInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMarkerInfo = (VkPerformanceStreamMarkerInfoINTEL const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_INTEL_performance_query
static Napi::Value rawCmdSetPerformanceOverrideINTEL(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pOverrideInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pOverrideInfo = (VkPerformanceOverrideInfoINTEL const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_INTEL_performance_query
static Napi::Value rawAcquirePerformanceConfigurationINTEL(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pAcquireInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAcquireInfo = (VkPerformanceConfigurationAcquireInfoINTEL const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pConfiguration)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pConfiguration = (VkPerformanceConfigurationINTEL*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_INTEL_performance_query
static Napi::Value rawReleasePerformanceConfigurationINTEL(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (configuration)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) configuration = (VkPerformanceConfigurationINTEL)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkReleasePerformanceConfigurationINTEL(device, configuration);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_INTEL_performance_query
static Napi::Value rawQueueSetPerformanceConfigurationINTEL(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (configuration)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) configuration = (VkPerformanceConfigurationINTEL)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_INTEL_performance_query
static Napi::Value rawGetPerformanceParameterINTEL(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (parameter)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) parameter = (VkPerformanceParameterTypeINTEL)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pValue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pValue = (VkPerformanceValueINTEL*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPerformanceParameterINTEL(device, parameter, pValue);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawGetDeviceMemoryOpaqueCaptureAddress(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkDeviceMemoryOpaqueCaptureAddressInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
    return Napi::BigInt::New(env, (uint64_t)result);
}
#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value rawGetPipelineExecutablePropertiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPipelineInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPipelineInfo = (VkPipelineInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pExecutableCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExecutableCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkPipelineExecutablePropertiesKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value rawGetPipelineExecutableStatisticsKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pExecutableInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExecutableInfo = (VkPipelineExecutableInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pStatisticCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pStatisticCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pStatistics)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pStatistics = (VkPipelineExecutableStatisticKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_pipeline_executable_properties
static Napi::Value rawGetPipelineExecutableInternalRepresentationsKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pExecutableInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExecutableInfo = (VkPipelineExecutableInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInternalRepresentationCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInternalRepresentationCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pInternalRepresentations)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInternalRepresentations = (VkPipelineExecutableInternalRepresentationKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_line_rasterization
static Napi::Value rawCmdSetLineStippleEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (lineStippleFactor)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) lineStippleFactor = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (lineStipplePattern)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) lineStipplePattern = (uint16_t)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
    return env.Null();
}
#endif
static Napi::Value rawGetPhysicalDeviceToolProperties(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pToolCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pToolCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pToolProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pToolProperties = (VkPhysicalDeviceToolProperties*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);
    return Napi::Number::New(env, result);
}
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCreateAccelerationStructureKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkAccelerationStructureCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pAccelerationStructure)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAccelerationStructure = (VkAccelerationStructureKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCmdBuildAccelerationStructuresKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (infoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) infoCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfos = (VkAccelerationStructureBuildGeometryInfoKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer of pointers) at 3 argument (ppBuildRangeInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) ppBuildRangeInfos = (VkAccelerationStructureBuildRangeInfoKHR* const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawCmdBuildAccelerationStructuresIndirectKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (infoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) infoCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfos = (VkAccelerationStructureBuildGeometryInfoKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pIndirectDeviceAddresses)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pIndirectDeviceAddresses = (VkDeviceAddress const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pIndirectStrides)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pIndirectStrides = (uint32_t const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer of pointers) at 5 argument (ppMaxPrimitiveCounts)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) ppMaxPrimitiveCounts = (uint32_t* const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawBuildAccelerationStructuresKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (deferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deferredOperation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (infoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) infoCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfos = (VkAccelerationStructureBuildGeometryInfoKHR const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer of pointers) at 4 argument (ppBuildRangeInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) ppBuildRangeInfos = (VkAccelerationStructureBuildRangeInfoKHR* const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawGetAccelerationStructureDeviceAddressKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkAccelerationStructureDeviceAddressInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
    return Napi::BigInt::New(env, (uint64_t)result);
}
#endif
#ifdef VK_KHR_deferred_host_operations
static Napi::Value rawCreateDeferredOperationKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDeferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDeferredOperation = (VkDeferredOperationKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_deferred_host_operations
static Napi::Value rawDestroyDeferredOperationKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (operation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) operation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyDeferredOperationKHR(device, operation, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_KHR_deferred_host_operations
static Napi::Value rawGetDeferredOperationMaxConcurrencyKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (operation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) operation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_deferred_host_operations
static Napi::Value rawGetDeferredOperationResultKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (operation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) operation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDeferredOperationResultKHR(device, operation);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_deferred_host_operations
static Napi::Value rawDeferredOperationJoinKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (operation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) operation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkDeferredOperationJoinKHR(device, operation);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawCmdSetCullMode(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (cullMode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) cullMode = (VkCullModeFlags)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetCullMode(commandBuffer, cullMode);
    return env.Null();
}
static Napi::Value rawCmdSetFrontFace(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (frontFace)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) frontFace = (VkFrontFace)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetFrontFace(commandBuffer, frontFace);
    return env.Null();
}
static Napi::Value rawCmdSetPrimitiveTopology(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (primitiveTopology)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) primitiveTopology = (VkPrimitiveTopology)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
    return env.Null();
}
static Napi::Value rawCmdSetViewportWithCount(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (viewportCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) viewportCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pViewports)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pViewports = (VkViewport const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);
    return env.Null();
}
static Napi::Value rawCmdSetScissorWithCount(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (scissorCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) scissorCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pScissors)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pScissors = (VkRect2D const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);
    return env.Null();
}
static Napi::Value rawCmdBindVertexBuffers2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstBinding)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstBinding = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (bindingCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bindingCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pBuffers)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBuffers = (VkBuffer const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pOffsets)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pOffsets = (VkDeviceSize const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pSizes)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSizes = (VkDeviceSize const*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 6 argument (pStrides)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pStrides = (VkDeviceSize const*)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
    return env.Null();
}
static Napi::Value rawCmdSetDepthTestEnable(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (depthTestEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthTestEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
    return env.Null();
}
static Napi::Value rawCmdSetDepthWriteEnable(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (depthWriteEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthWriteEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
    return env.Null();
}
static Napi::Value rawCmdSetDepthCompareOp(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (depthCompareOp)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthCompareOp = (VkCompareOp)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
    return env.Null();
}
static Napi::Value rawCmdSetDepthBoundsTestEnable(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (depthBoundsTestEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthBoundsTestEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
    return env.Null();
}
static Napi::Value rawCmdSetStencilTestEnable(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (stencilTestEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stencilTestEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
    return env.Null();
}
static Napi::Value rawCmdSetStencilOp(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (faceMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) faceMask = (VkStencilFaceFlags)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (failOp)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) failOp = (VkStencilOp)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (passOp)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) passOp = (VkStencilOp)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (depthFailOp)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthFailOp = (VkStencilOp)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 5 argument (compareOp)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) compareOp = (VkCompareOp)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
    return env.Null();
}
#ifdef VK_EXT_extended_dynamic_state2
static Napi::Value rawCmdSetPatchControlPointsEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (patchControlPoints)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) patchControlPoints = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
    return env.Null();
}
#endif
static Napi::Value rawCmdSetRasterizerDiscardEnable(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (rasterizerDiscardEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) rasterizerDiscardEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
    return env.Null();
}
static Napi::Value rawCmdSetDepthBiasEnable(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (depthBiasEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthBiasEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
    return env.Null();
}
#ifdef VK_EXT_extended_dynamic_state2
static Napi::Value rawCmdSetLogicOpEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (logicOp)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) logicOp = (VkLogicOp)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetLogicOpEXT(commandBuffer, logicOp);
    return env.Null();
}
#endif
static Napi::Value rawCmdSetPrimitiveRestartEnable(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (primitiveRestartEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) primitiveRestartEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
    return env.Null();
}
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetTessellationDomainOriginEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (domainOrigin)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) domainOrigin = (VkTessellationDomainOrigin)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetDepthClampEnableEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (depthClampEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthClampEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetPolygonModeEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (polygonMode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) polygonMode = (VkPolygonMode)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetPolygonModeEXT(commandBuffer, polygonMode);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetRasterizationSamplesEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (rasterizationSamples)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) rasterizationSamples = (VkSampleCountFlagBits)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetSampleMaskEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (samples)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) samples = (VkSampleCountFlagBits)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSampleMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSampleMask = (VkSampleMask const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetAlphaToCoverageEnableEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (alphaToCoverageEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) alphaToCoverageEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetAlphaToOneEnableEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (alphaToOneEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) alphaToOneEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetLogicOpEnableEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (logicOpEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) logicOpEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetColorBlendEnableEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstAttachment)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstAttachment = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (attachmentCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) attachmentCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pColorBlendEnables)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pColorBlendEnables = (VkBool32 const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetColorBlendEnableEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetColorBlendEquationEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstAttachment)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstAttachment = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (attachmentCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) attachmentCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pColorBlendEquations)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pColorBlendEquations = (VkColorBlendEquationEXT const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetColorBlendEquationEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetColorWriteMaskEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstAttachment)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstAttachment = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (attachmentCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) attachmentCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pColorWriteMasks)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pColorWriteMasks = (VkColorComponentFlags const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetColorWriteMaskEXT(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetRasterizationStreamEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (rasterizationStream)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) rasterizationStream = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetConservativeRasterizationModeEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (conservativeRasterizationMode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) conservativeRasterizationMode = (VkConservativeRasterizationModeEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetConservativeRasterizationModeEXT(commandBuffer, conservativeRasterizationMode);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetExtraPrimitiveOverestimationSizeEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (extraPrimitiveOverestimationSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) extraPrimitiveOverestimationSize = (float)info_[1].As<Napi::Number>().FloatValue();
    
    ::vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer, extraPrimitiveOverestimationSize);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetDepthClipEnableEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (depthClipEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) depthClipEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetSampleLocationsEnableEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (sampleLocationsEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) sampleLocationsEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetColorBlendAdvancedEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstAttachment)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstAttachment = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (attachmentCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) attachmentCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pColorBlendAdvanced)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pColorBlendAdvanced = (VkColorBlendAdvancedEXT const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetColorBlendAdvancedEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetProvokingVertexModeEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (provokingVertexMode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) provokingVertexMode = (VkProvokingVertexModeEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetLineRasterizationModeEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (lineRasterizationMode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) lineRasterizationMode = (VkLineRasterizationModeEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetLineStippleEnableEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (stippledLineEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stippledLineEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetDepthClipNegativeOneToOneEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (negativeOneToOne)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) negativeOneToOne = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetViewportWScalingEnableNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (viewportWScalingEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) viewportWScalingEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetViewportSwizzleNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (firstViewport)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstViewport = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (viewportCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) viewportCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pViewportSwizzles)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pViewportSwizzles = (VkViewportSwizzleNV const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetViewportSwizzleNV(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetCoverageToColorEnableNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (coverageToColorEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) coverageToColorEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetCoverageToColorLocationNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (coverageToColorLocation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) coverageToColorLocation = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetCoverageModulationModeNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (coverageModulationMode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) coverageModulationMode = (VkCoverageModulationModeNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetCoverageModulationTableEnableNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (coverageModulationTableEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) coverageModulationTableEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetCoverageModulationTableEnableNV(commandBuffer, coverageModulationTableEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetCoverageModulationTableNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (coverageModulationTableCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) coverageModulationTableCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCoverageModulationTable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCoverageModulationTable = (float const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetCoverageModulationTableNV(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetShadingRateImageEnableNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (shadingRateImageEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) shadingRateImageEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetCoverageReductionModeNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (coverageReductionMode)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) coverageReductionMode = (VkCoverageReductionModeNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);
    return env.Null();
}
#endif
#ifdef VK_EXT_extended_dynamic_state3
static Napi::Value rawCmdSetRepresentativeFragmentTestEnableNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (representativeFragmentTestEnable)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) representativeFragmentTestEnable = (VkBool32)info_[1].As<Napi::Number>().Uint32Value();
    
    ::vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer, representativeFragmentTestEnable);
    return env.Null();
}
#endif
static Napi::Value rawCreatePrivateDataSlot(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkPrivateDataSlotCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pPrivateDataSlot)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPrivateDataSlot = (VkPrivateDataSlot*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);
    return Napi::Number::New(env, result);
}
static Napi::Value rawDestroyPrivateDataSlot(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (privateDataSlot)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) privateDataSlot = (VkPrivateDataSlot)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator);
    return env.Null();
}
static Napi::Value rawSetPrivateData(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (objectType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) objectType = (VkObjectType)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (objectHandle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) objectHandle = (uint64_t)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (privateDataSlot)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) privateDataSlot = (VkPrivateDataSlot)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (data)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) data = (uint64_t)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
    return Napi::Number::New(env, result);
}
static Napi::Value rawGetPrivateData(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (objectType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) objectType = (VkObjectType)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (objectHandle)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) objectHandle = (uint64_t)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (privateDataSlot)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) privateDataSlot = (VkPrivateDataSlot)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (uint64_t*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);
    return env.Null();
}
static Napi::Value rawCmdCopyBuffer2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCopyBufferInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCopyBufferInfo = (VkCopyBufferInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
    return env.Null();
}
static Napi::Value rawCmdCopyImage2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCopyImageInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCopyImageInfo = (VkCopyImageInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyImage2(commandBuffer, pCopyImageInfo);
    return env.Null();
}
static Napi::Value rawCmdBlitImage2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pBlitImageInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBlitImageInfo = (VkBlitImageInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBlitImage2(commandBuffer, pBlitImageInfo);
    return env.Null();
}
static Napi::Value rawCmdCopyBufferToImage2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCopyBufferToImageInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCopyBufferToImageInfo = (VkCopyBufferToImageInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
    return env.Null();
}
static Napi::Value rawCmdCopyImageToBuffer2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCopyImageToBufferInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCopyImageToBufferInfo = (VkCopyImageToBufferInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
    return env.Null();
}
static Napi::Value rawCmdResolveImage2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pResolveImageInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pResolveImageInfo = (VkResolveImageInfo2 const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdResolveImage2(commandBuffer, pResolveImageInfo);
    return env.Null();
}
#ifdef VK_KHR_fragment_shading_rate
static Napi::Value rawCmdSetFragmentShadingRateKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pFragmentSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFragmentSize = (VkExtent2D const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (combinerOps)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) combinerOps = (VkFragmentShadingRateCombinerOpKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
    return env.Null();
}
#endif
#ifdef VK_KHR_fragment_shading_rate
static Napi::Value rawGetPhysicalDeviceFragmentShadingRatesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pFragmentShadingRateCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFragmentShadingRateCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFragmentShadingRates)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFragmentShadingRates = (VkPhysicalDeviceFragmentShadingRateKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_fragment_shading_rate_enums
static Napi::Value rawCmdSetFragmentShadingRateEnumNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (shadingRate)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) shadingRate = (VkFragmentShadingRateNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (combinerOps)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) combinerOps = (VkFragmentShadingRateCombinerOpKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
    return env.Null();
}
#endif
#ifdef VK_KHR_acceleration_structure
static Napi::Value rawGetAccelerationStructureBuildSizesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buildType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buildType = (VkAccelerationStructureBuildTypeKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pBuildInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBuildInfo = (VkAccelerationStructureBuildGeometryInfoKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMaxPrimitiveCounts)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMaxPrimitiveCounts = (uint32_t const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pSizeInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSizeInfo = (VkAccelerationStructureBuildSizesInfoKHR*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
static Napi::Value rawCmdSetVertexInputEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (vertexBindingDescriptionCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) vertexBindingDescriptionCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pVertexBindingDescriptions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVertexBindingDescriptions = (VkVertexInputBindingDescription2EXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (vertexAttributeDescriptionCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) vertexAttributeDescriptionCount = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 4 argument (pVertexAttributeDescriptions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVertexAttributeDescriptions = (VkVertexInputAttributeDescription2EXT const*)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
    return env.Null();
}
#endif
#ifdef VK_EXT_color_write_enable
static Napi::Value rawCmdSetColorWriteEnableEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (attachmentCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) attachmentCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pColorWriteEnables)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pColorWriteEnables = (VkBool32 const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
    return env.Null();
}
#endif
static Napi::Value rawCmdSetEvent2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (event)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) event = (VkEvent)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDependencyInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDependencyInfo = (VkDependencyInfo const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdSetEvent2(commandBuffer, event, pDependencyInfo);
    return env.Null();
}
static Napi::Value rawCmdResetEvent2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (event)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) event = (VkEvent)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (stageMask)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stageMask = (VkPipelineStageFlags2)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdResetEvent2(commandBuffer, event, stageMask);
    return env.Null();
}
static Napi::Value rawCmdWaitEvents2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (eventCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) eventCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pEvents)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pEvents = (VkEvent const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pDependencyInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDependencyInfos = (VkDependencyInfo const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);
    return env.Null();
}
static Napi::Value rawCmdPipelineBarrier2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pDependencyInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDependencyInfo = (VkDependencyInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo);
    return env.Null();
}
static Napi::Value rawQueueSubmit2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (submitCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) submitCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSubmits)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSubmits = (VkSubmitInfo2 const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (fence)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) fence = (VkFence)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkQueueSubmit2(queue, submitCount, pSubmits, fence);
    return Napi::Number::New(env, result);
}
static Napi::Value rawCmdWriteTimestamp2(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (stage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stage = (VkPipelineStageFlags2)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (query)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) query = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
    return env.Null();
}
#ifdef VK_KHR_synchronization2
static Napi::Value rawCmdWriteBufferMarker2AMD(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (stage)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stage = (VkPipelineStageFlags2)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (dstBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstBuffer = (VkBuffer)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (dstOffset)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dstOffset = (VkDeviceSize)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 4 argument (marker)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) marker = (uint32_t)info_[4].As<Napi::Number>().Uint32Value();
    
    ::vkCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
    return env.Null();
}
#endif
#ifdef VK_KHR_synchronization2
static Napi::Value rawGetQueueCheckpointData2NV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (queue)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queue = (VkQueue)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCheckpointDataCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCheckpointDataCount = (uint32_t*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCheckpointData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCheckpointData = (VkCheckpointData2NV*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);
    return env.Null();
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawGetPhysicalDeviceVideoCapabilitiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pVideoProfile)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVideoProfile = (VkVideoProfileInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCapabilities)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCapabilities = (VkVideoCapabilitiesKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice, pVideoProfile, pCapabilities);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawGetPhysicalDeviceVideoFormatPropertiesKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pVideoFormatInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVideoFormatInfo = (VkPhysicalDeviceVideoFormatInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pVideoFormatPropertyCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVideoFormatPropertyCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pVideoFormatProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVideoFormatProperties = (VkVideoFormatPropertiesKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawCreateVideoSessionKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkVideoSessionCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pVideoSession)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVideoSession = (VkVideoSessionKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawDestroyVideoSessionKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (videoSession)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) videoSession = (VkVideoSessionKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyVideoSessionKHR(device, videoSession, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawCreateVideoSessionParametersKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkVideoSessionParametersCreateInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pVideoSessionParameters)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVideoSessionParameters = (VkVideoSessionParametersKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateVideoSessionParametersKHR(device, pCreateInfo, pAllocator, pVideoSessionParameters);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawUpdateVideoSessionParametersKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (videoSessionParameters)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) videoSessionParameters = (VkVideoSessionParametersKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pUpdateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pUpdateInfo = (VkVideoSessionParametersUpdateInfoKHR const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkUpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawDestroyVideoSessionParametersKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (videoSessionParameters)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) videoSessionParameters = (VkVideoSessionParametersKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawGetVideoSessionMemoryRequirementsKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (videoSession)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) videoSession = (VkVideoSessionKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMemoryRequirementsCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirementsCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMemoryRequirements)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMemoryRequirements = (VkVideoSessionMemoryRequirementsKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawBindVideoSessionMemoryKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (videoSession)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) videoSession = (VkVideoSessionKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (bindSessionMemoryInfoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bindSessionMemoryInfoCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pBindSessionMemoryInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBindSessionMemoryInfos = (VkBindVideoSessionMemoryInfoKHR const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBindVideoSessionMemoryKHR(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_video_decode_queue
static Napi::Value rawCmdDecodeVideoKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pDecodeInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDecodeInfo = (VkVideoDecodeInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdDecodeVideoKHR(commandBuffer, pDecodeInfo);
    return env.Null();
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawCmdBeginVideoCodingKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pBeginInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBeginInfo = (VkVideoBeginCodingInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);
    return env.Null();
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawCmdControlVideoCodingKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCodingControlInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCodingControlInfo = (VkVideoCodingControlInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);
    return env.Null();
}
#endif
#ifdef VK_KHR_video_queue
static Napi::Value rawCmdEndVideoCodingKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pEndCodingInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pEndCodingInfo = (VkVideoEndCodingInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);
    return env.Null();
}
#endif
#ifdef VK_KHR_video_encode_queue
static Napi::Value rawCmdEncodeVideoKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pEncodeInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pEncodeInfo = (VkVideoEncodeInfoKHR const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdEncodeVideoKHR(commandBuffer, pEncodeInfo);
    return env.Null();
}
#endif
#ifdef VK_NV_memory_decompression
static Napi::Value rawCmdDecompressMemoryNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (decompressRegionCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) decompressRegionCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pDecompressMemoryRegions)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pDecompressMemoryRegions = (VkDecompressMemoryRegionNV const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdDecompressMemoryNV(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
    return env.Null();
}
#endif
#ifdef VK_NV_memory_decompression
static Napi::Value rawCmdDecompressMemoryIndirectCountNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (indirectCommandsAddress)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) indirectCommandsAddress = (VkDeviceAddress)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (indirectCommandsCountAddress)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) indirectCommandsCountAddress = (VkDeviceAddress)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 3 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (uint32_t)info_[3].As<Napi::Number>().Uint32Value();
    
    ::vkCmdDecompressMemoryIndirectCountNV(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
    return env.Null();
}
#endif
#ifdef VK_NVX_binary_import
static Napi::Value rawCreateCuModuleNVX(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkCuModuleCreateInfoNVX const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pModule)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pModule = (VkCuModuleNVX*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NVX_binary_import
static Napi::Value rawCreateCuFunctionNVX(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkCuFunctionCreateInfoNVX const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pFunction)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFunction = (VkCuFunctionNVX*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NVX_binary_import
static Napi::Value rawDestroyCuModuleNVX(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (module)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) module = (VkCuModuleNVX)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyCuModuleNVX(device, module, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_NVX_binary_import
static Napi::Value rawDestroyCuFunctionNVX(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (function)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) function = (VkCuFunctionNVX)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyCuFunctionNVX(device, function, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_NVX_binary_import
static Napi::Value rawCmdCuLaunchKernelNVX(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pLaunchInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLaunchInfo = (VkCuLaunchInfoNVX const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_pageable_device_local_memory
static Napi::Value rawSetDeviceMemoryPriorityEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (memory)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) memory = (VkDeviceMemory)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (priority)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) priority = (float)info_[2].As<Napi::Number>().FloatValue();
    
    ::vkSetDeviceMemoryPriorityEXT(device, memory, priority);
    return env.Null();
}
#endif
#ifdef VK_EXT_acquire_drm_display
static Napi::Value rawAcquireDrmDisplayEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (drmFd)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) drmFd = (int32_t)info_[1].As<Napi::Number>().Int32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkAcquireDrmDisplayEXT(physicalDevice, drmFd, display);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_acquire_drm_display
static Napi::Value rawGetDrmDisplayEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (drmFd)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) drmFd = (int32_t)info_[1].As<Napi::Number>().Int32Value();

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (connectorId)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) connectorId = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (display)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) display = (VkDisplayKHR*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_KHR_present_wait
static Napi::Value rawWaitForPresentKHR(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (swapchain)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) swapchain = (VkSwapchainKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (presentId)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) presentId = (uint64_t)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (timeout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) timeout = (uint64_t)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkWaitForPresentKHR(device, swapchain, presentId, timeout);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value rawCreateBufferCollectionFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkBufferCollectionCreateInfoFUCHSIA const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pCollection)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCollection = (VkBufferCollectionFUCHSIA*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateBufferCollectionFUCHSIA(device, pCreateInfo, pAllocator, pCollection);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value rawSetBufferCollectionBufferConstraintsFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (collection)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) collection = (VkBufferCollectionFUCHSIA)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pBufferConstraintsInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBufferConstraintsInfo = (VkBufferConstraintsInfoFUCHSIA const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkSetBufferCollectionBufferConstraintsFUCHSIA(device, collection, pBufferConstraintsInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value rawSetBufferCollectionImageConstraintsFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (collection)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) collection = (VkBufferCollectionFUCHSIA)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pImageConstraintsInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageConstraintsInfo = (VkImageConstraintsInfoFUCHSIA const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkSetBufferCollectionImageConstraintsFUCHSIA(device, collection, pImageConstraintsInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value rawDestroyBufferCollectionFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (collection)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) collection = (VkBufferCollectionFUCHSIA)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyBufferCollectionFUCHSIA(device, collection, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
static Napi::Value rawGetBufferCollectionPropertiesFUCHSIA(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (collection)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) collection = (VkBufferCollectionFUCHSIA)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkBufferCollectionPropertiesFUCHSIA*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetBufferCollectionPropertiesFUCHSIA(device, collection, pProperties);
    return Napi::Number::New(env, result);
}
#endif
static Napi::Value rawCmdBeginRendering(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pRenderingInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRenderingInfo = (VkRenderingInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBeginRendering(commandBuffer, pRenderingInfo);
    return env.Null();
}
static Napi::Value rawCmdEndRendering(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 1) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdEndRendering(commandBuffer);
    return env.Null();
}
#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value rawGetDescriptorSetLayoutHostMappingInfoVALVE(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pBindingReference)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBindingReference = (VkDescriptorSetBindingReferenceVALVE const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pHostMapping)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pHostMapping = (VkDescriptorSetLayoutHostMappingInfoVALVE*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDescriptorSetLayoutHostMappingInfoVALVE(device, pBindingReference, pHostMapping);
    return env.Null();
}
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
static Napi::Value rawGetDescriptorSetHostMappingVALVE(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (descriptorSet)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) descriptorSet = (VkDescriptorSet)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer of pointers) at 2 argument (ppData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) ppData = (void**)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDescriptorSetHostMappingVALVE(device, descriptorSet, ppData);
    return env.Null();
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawCreateMicromapEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkMicromapCreateInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pMicromap)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMicromap = (VkMicromapEXT*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawCmdBuildMicromapsEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (infoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) infoCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfos = (VkMicromapBuildInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);
    return env.Null();
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawBuildMicromapsEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (deferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deferredOperation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 2 argument (infoCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) infoCount = (uint32_t)info_[2].As<Napi::Number>().Uint32Value();

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pInfos)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfos = (VkMicromapBuildInfoEXT const*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawDestroyMicromapEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (micromap)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) micromap = (VkMicromapEXT)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyMicromapEXT(device, micromap, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawCmdCopyMicromapEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyMicromapInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyMicromapEXT(commandBuffer, pInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawCopyMicromapEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (deferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deferredOperation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyMicromapInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCopyMicromapEXT(device, deferredOperation, pInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawCmdCopyMicromapToMemoryEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyMicromapToMemoryInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawCopyMicromapToMemoryEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (deferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deferredOperation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyMicromapToMemoryInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCopyMicromapToMemoryEXT(device, deferredOperation, pInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawCmdCopyMemoryToMicromapEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyMemoryToMicromapInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawCopyMemoryToMicromapEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (deferredOperation)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) deferredOperation = (VkDeferredOperationKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pInfo = (VkCopyMemoryToMicromapInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCopyMemoryToMicromapEXT(device, deferredOperation, pInfo);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawCmdWriteMicromapsPropertiesEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 6) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (micromapCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) micromapCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMicromaps)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMicromaps = (VkMicromapEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (queryType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryType = (VkQueryType)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (queryPool)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryPool = (VkQueryPool)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 5 argument (firstQuery)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) firstQuery = (uint32_t)info_[5].As<Napi::Number>().Uint32Value();
    
    ::vkCmdWriteMicromapsPropertiesEXT(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
    return env.Null();
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawWriteMicromapsPropertiesEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 7) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsNumber()) { Napi::TypeError::New(env, "Wrong type, needs Number at 1 argument (micromapCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) micromapCount = (uint32_t)info_[1].As<Napi::Number>().Uint32Value();

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pMicromaps)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMicromaps = (VkMicromapEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (queryType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) queryType = (VkQueryType)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (dataSize)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) dataSize = (size_t)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[5].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 5 argument (pData)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pData = (void*)info_[5].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[6].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 6 argument (stride)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) stride = (size_t)info_[6].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkWriteMicromapsPropertiesEXT(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawGetDeviceMicromapCompatibilityEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pVersionInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pVersionInfo = (VkMicromapVersionInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pCompatibility)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCompatibility = (VkAccelerationStructureCompatibilityKHR*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);
    return env.Null();
}
#endif
#ifdef VK_EXT_opacity_micromap
static Napi::Value rawGetMicromapBuildSizesEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (buildType)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) buildType = (VkAccelerationStructureBuildTypeKHR)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pBuildInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pBuildInfo = (VkMicromapBuildInfoEXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSizeInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSizeInfo = (VkMicromapBuildSizesInfoEXT*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_shader_module_identifier
static Napi::Value rawGetShaderModuleIdentifierEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (shaderModule)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) shaderModule = (VkShaderModule)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pIdentifier)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pIdentifier = (VkShaderModuleIdentifierEXT*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);
    return env.Null();
}
#endif
#ifdef VK_EXT_shader_module_identifier
static Napi::Value rawGetShaderModuleCreateInfoIdentifierEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkShaderModuleCreateInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pIdentifier)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pIdentifier = (VkShaderModuleIdentifierEXT*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);
    return env.Null();
}
#endif
#ifdef VK_EXT_image_compression_control
static Napi::Value rawGetImageSubresourceLayout2EXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (image)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) image = (VkImage)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pSubresource)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSubresource = (VkImageSubresource2EXT const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pLayout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pLayout = (VkSubresourceLayout2EXT*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkGetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);
    return env.Null();
}
#endif
#ifdef VK_EXT_pipeline_properties
static Napi::Value rawGetPipelinePropertiesEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pPipelineInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPipelineInfo = (VkPipelineInfoEXT const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPipelineProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPipelineProperties = (VkBaseOutStructure*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_EXT_metal_objects
static Napi::Value rawExportMetalObjectsEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 2) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pMetalObjectsInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pMetalObjectsInfo = (VkExportMetalObjectsInfoEXT*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkExportMetalObjectsEXT(device, pMetalObjectsInfo);
    return env.Null();
}
#endif
#ifdef VK_QCOM_tile_properties
static Napi::Value rawGetFramebufferTilePropertiesQCOM(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (framebuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) framebuffer = (VkFramebuffer)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pPropertiesCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pPropertiesCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkTilePropertiesQCOM*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetFramebufferTilePropertiesQCOM(device, framebuffer, pPropertiesCount, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_QCOM_tile_properties
static Napi::Value rawGetDynamicRenderingTilePropertiesQCOM(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pRenderingInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pRenderingInfo = (VkRenderingInfo const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pProperties = (VkTilePropertiesQCOM*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_optical_flow
static Napi::Value rawGetPhysicalDeviceOpticalFlowImageFormatsNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (physicalDevice)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) physicalDevice = (VkPhysicalDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pOpticalFlowImageFormatInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pOpticalFlowImageFormatInfo = (VkOpticalFlowImageFormatInfoNV const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFormatCount)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFormatCount = (uint32_t*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pImageFormatProperties)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pImageFormatProperties = (VkOpticalFlowImageFormatPropertiesNV*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_optical_flow
static Napi::Value rawCreateOpticalFlowSessionNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 4) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pCreateInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pCreateInfo = (VkOpticalFlowSessionCreateInfoNV const*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 3 argument (pSession)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pSession = (VkOpticalFlowSessionNV*)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkCreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_optical_flow
static Napi::Value rawDestroyOpticalFlowSessionNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (session)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) session = (VkOpticalFlowSessionNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pAllocator)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pAllocator = (VkAllocationCallbacks const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkDestroyOpticalFlowSessionNV(device, session, pAllocator);
    return env.Null();
}
#endif
#ifdef VK_NV_optical_flow
static Napi::Value rawBindOpticalFlowSessionImageNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 5) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (session)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) session = (VkOpticalFlowSessionNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 2 argument (bindingPoint)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) bindingPoint = (VkOpticalFlowSessionBindingPointNV)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[3].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 3 argument (view)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) view = (VkImageView)info_[3].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[4].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 4 argument (layout)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) layout = (VkImageLayout)info_[4].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkBindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);
    return Napi::Number::New(env, result);
}
#endif
#ifdef VK_NV_optical_flow
static Napi::Value rawCmdOpticalFlowExecuteNV(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (commandBuffer)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) commandBuffer = (VkCommandBuffer)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 1 argument (session)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) session = (VkOpticalFlowSessionNV)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pExecuteInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pExecuteInfo = (VkOpticalFlowExecuteInfoNV const*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    ::vkCmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);
    return env.Null();
}
#endif
#ifdef VK_EXT_device_fault
static Napi::Value rawGetDeviceFaultInfoEXT(const Napi::CallbackInfo& info_) {
    Napi::Env env = info_.Env();
    bool lossless = true;
    if (info_.Length() < 3) {
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException(); return env.Null();
    }
    
    if (!info_[0].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (handle) at 0 argument (device)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) device = (VkDevice)info_[0].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[1].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 1 argument (pFaultCounts)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFaultCounts = (VkDeviceFaultCountsEXT*)info_[1].As<Napi::BigInt>().Uint64Value(&lossless);;

    if (!info_[2].IsBigInt()) { Napi::TypeError::New(env, "Wrong type, needs BigInt (pointer) at 2 argument (pFaultInfo)").ThrowAsJavaScriptException(); return env.Null(); }
    decltype(auto) pFaultInfo = (VkDeviceFaultInfoEXT*)info_[2].As<Napi::BigInt>().Uint64Value(&lossless);;
    
    decltype(auto) result = ::vkGetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);
    return Napi::Number::New(env, result);
}
#endif

static Napi::Object Init(Napi::Env env, Napi::Object exports) {
    volkInitialize();

    exports["VkBaseOutStructure_sType_offsetof"] = Napi::Function::New(env, VkBaseOutStructure_sType_offsetof);
    exports["VkBaseOutStructure_pNext_offsetof"] = Napi::Function::New(env, VkBaseOutStructure_pNext_offsetof);
    exports["VkBaseInStructure_sType_offsetof"] = Napi::Function::New(env, VkBaseInStructure_sType_offsetof);
    exports["VkBaseInStructure_pNext_offsetof"] = Napi::Function::New(env, VkBaseInStructure_pNext_offsetof);
    exports["VkOffset2D_x_offsetof"] = Napi::Function::New(env, VkOffset2D_x_offsetof);
    exports["VkOffset2D_y_offsetof"] = Napi::Function::New(env, VkOffset2D_y_offsetof);
    exports["VkOffset3D_x_offsetof"] = Napi::Function::New(env, VkOffset3D_x_offsetof);
    exports["VkOffset3D_y_offsetof"] = Napi::Function::New(env, VkOffset3D_y_offsetof);
    exports["VkOffset3D_z_offsetof"] = Napi::Function::New(env, VkOffset3D_z_offsetof);
    exports["VkExtent2D_width_offsetof"] = Napi::Function::New(env, VkExtent2D_width_offsetof);
    exports["VkExtent2D_height_offsetof"] = Napi::Function::New(env, VkExtent2D_height_offsetof);
    exports["VkExtent3D_width_offsetof"] = Napi::Function::New(env, VkExtent3D_width_offsetof);
    exports["VkExtent3D_height_offsetof"] = Napi::Function::New(env, VkExtent3D_height_offsetof);
    exports["VkExtent3D_depth_offsetof"] = Napi::Function::New(env, VkExtent3D_depth_offsetof);
    exports["VkViewport_x_offsetof"] = Napi::Function::New(env, VkViewport_x_offsetof);
    exports["VkViewport_y_offsetof"] = Napi::Function::New(env, VkViewport_y_offsetof);
    exports["VkViewport_width_offsetof"] = Napi::Function::New(env, VkViewport_width_offsetof);
    exports["VkViewport_height_offsetof"] = Napi::Function::New(env, VkViewport_height_offsetof);
    exports["VkViewport_minDepth_offsetof"] = Napi::Function::New(env, VkViewport_minDepth_offsetof);
    exports["VkViewport_maxDepth_offsetof"] = Napi::Function::New(env, VkViewport_maxDepth_offsetof);
    exports["VkRect2D_offset_offsetof"] = Napi::Function::New(env, VkRect2D_offset_offsetof);
    exports["VkRect2D_extent_offsetof"] = Napi::Function::New(env, VkRect2D_extent_offsetof);
    exports["VkClearRect_rect_offsetof"] = Napi::Function::New(env, VkClearRect_rect_offsetof);
    exports["VkClearRect_baseArrayLayer_offsetof"] = Napi::Function::New(env, VkClearRect_baseArrayLayer_offsetof);
    exports["VkClearRect_layerCount_offsetof"] = Napi::Function::New(env, VkClearRect_layerCount_offsetof);
    exports["VkComponentMapping_r_offsetof"] = Napi::Function::New(env, VkComponentMapping_r_offsetof);
    exports["VkComponentMapping_g_offsetof"] = Napi::Function::New(env, VkComponentMapping_g_offsetof);
    exports["VkComponentMapping_b_offsetof"] = Napi::Function::New(env, VkComponentMapping_b_offsetof);
    exports["VkComponentMapping_a_offsetof"] = Napi::Function::New(env, VkComponentMapping_a_offsetof);
    exports["VkPhysicalDeviceProperties_apiVersion_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties_apiVersion_offsetof);
    exports["VkPhysicalDeviceProperties_driverVersion_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties_driverVersion_offsetof);
    exports["VkPhysicalDeviceProperties_vendorID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties_vendorID_offsetof);
    exports["VkPhysicalDeviceProperties_deviceID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties_deviceID_offsetof);
    exports["VkPhysicalDeviceProperties_deviceType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties_deviceType_offsetof);
    exports["VkPhysicalDeviceProperties_deviceName_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties_deviceName_offsetof);
    exports["VkPhysicalDeviceProperties_pipelineCacheUUID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties_pipelineCacheUUID_offsetof);
    exports["VkPhysicalDeviceProperties_limits_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties_limits_offsetof);
    exports["VkPhysicalDeviceProperties_sparseProperties_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties_sparseProperties_offsetof);
    exports["VkExtensionProperties_extensionName_offsetof"] = Napi::Function::New(env, VkExtensionProperties_extensionName_offsetof);
    exports["VkExtensionProperties_specVersion_offsetof"] = Napi::Function::New(env, VkExtensionProperties_specVersion_offsetof);
    exports["VkLayerProperties_layerName_offsetof"] = Napi::Function::New(env, VkLayerProperties_layerName_offsetof);
    exports["VkLayerProperties_specVersion_offsetof"] = Napi::Function::New(env, VkLayerProperties_specVersion_offsetof);
    exports["VkLayerProperties_implementationVersion_offsetof"] = Napi::Function::New(env, VkLayerProperties_implementationVersion_offsetof);
    exports["VkLayerProperties_description_offsetof"] = Napi::Function::New(env, VkLayerProperties_description_offsetof);
    exports["VkApplicationInfo_sType_offsetof"] = Napi::Function::New(env, VkApplicationInfo_sType_offsetof);
    exports["VkApplicationInfo_pNext_offsetof"] = Napi::Function::New(env, VkApplicationInfo_pNext_offsetof);
    exports["VkApplicationInfo_pApplicationName_offsetof"] = Napi::Function::New(env, VkApplicationInfo_pApplicationName_offsetof);
    exports["VkApplicationInfo_applicationVersion_offsetof"] = Napi::Function::New(env, VkApplicationInfo_applicationVersion_offsetof);
    exports["VkApplicationInfo_pEngineName_offsetof"] = Napi::Function::New(env, VkApplicationInfo_pEngineName_offsetof);
    exports["VkApplicationInfo_engineVersion_offsetof"] = Napi::Function::New(env, VkApplicationInfo_engineVersion_offsetof);
    exports["VkApplicationInfo_apiVersion_offsetof"] = Napi::Function::New(env, VkApplicationInfo_apiVersion_offsetof);
    exports["VkAllocationCallbacks_pUserData_offsetof"] = Napi::Function::New(env, VkAllocationCallbacks_pUserData_offsetof);
    exports["VkAllocationCallbacks_pfnAllocation_offsetof"] = Napi::Function::New(env, VkAllocationCallbacks_pfnAllocation_offsetof);
    exports["VkAllocationCallbacks_pfnReallocation_offsetof"] = Napi::Function::New(env, VkAllocationCallbacks_pfnReallocation_offsetof);
    exports["VkAllocationCallbacks_pfnFree_offsetof"] = Napi::Function::New(env, VkAllocationCallbacks_pfnFree_offsetof);
    exports["VkAllocationCallbacks_pfnInternalAllocation_offsetof"] = Napi::Function::New(env, VkAllocationCallbacks_pfnInternalAllocation_offsetof);
    exports["VkAllocationCallbacks_pfnInternalFree_offsetof"] = Napi::Function::New(env, VkAllocationCallbacks_pfnInternalFree_offsetof);
    exports["VkDeviceQueueCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkDeviceQueueCreateInfo_sType_offsetof);
    exports["VkDeviceQueueCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDeviceQueueCreateInfo_pNext_offsetof);
    exports["VkDeviceQueueCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkDeviceQueueCreateInfo_flags_offsetof);
    exports["VkDeviceQueueCreateInfo_queueFamilyIndex_offsetof"] = Napi::Function::New(env, VkDeviceQueueCreateInfo_queueFamilyIndex_offsetof);
    exports["VkDeviceQueueCreateInfo_queueCount_offsetof"] = Napi::Function::New(env, VkDeviceQueueCreateInfo_queueCount_offsetof);
    exports["VkDeviceQueueCreateInfo_pQueuePriorities_offsetof"] = Napi::Function::New(env, VkDeviceQueueCreateInfo_pQueuePriorities_offsetof);
    exports["VkDeviceCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_sType_offsetof);
    exports["VkDeviceCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_pNext_offsetof);
    exports["VkDeviceCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_flags_offsetof);
    exports["VkDeviceCreateInfo_queueCreateInfoCount_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_queueCreateInfoCount_offsetof);
    exports["VkDeviceCreateInfo_pQueueCreateInfos_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_pQueueCreateInfos_offsetof);
    exports["VkDeviceCreateInfo_enabledLayerCount_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_enabledLayerCount_offsetof);
    exports["VkDeviceCreateInfo_ppEnabledLayerNames_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_ppEnabledLayerNames_offsetof);
    exports["VkDeviceCreateInfo_enabledExtensionCount_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_enabledExtensionCount_offsetof);
    exports["VkDeviceCreateInfo_ppEnabledExtensionNames_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_ppEnabledExtensionNames_offsetof);
    exports["VkDeviceCreateInfo_pEnabledFeatures_offsetof"] = Napi::Function::New(env, VkDeviceCreateInfo_pEnabledFeatures_offsetof);
    exports["VkInstanceCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkInstanceCreateInfo_sType_offsetof);
    exports["VkInstanceCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkInstanceCreateInfo_pNext_offsetof);
    exports["VkInstanceCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkInstanceCreateInfo_flags_offsetof);
    exports["VkInstanceCreateInfo_pApplicationInfo_offsetof"] = Napi::Function::New(env, VkInstanceCreateInfo_pApplicationInfo_offsetof);
    exports["VkInstanceCreateInfo_enabledLayerCount_offsetof"] = Napi::Function::New(env, VkInstanceCreateInfo_enabledLayerCount_offsetof);
    exports["VkInstanceCreateInfo_ppEnabledLayerNames_offsetof"] = Napi::Function::New(env, VkInstanceCreateInfo_ppEnabledLayerNames_offsetof);
    exports["VkInstanceCreateInfo_enabledExtensionCount_offsetof"] = Napi::Function::New(env, VkInstanceCreateInfo_enabledExtensionCount_offsetof);
    exports["VkInstanceCreateInfo_ppEnabledExtensionNames_offsetof"] = Napi::Function::New(env, VkInstanceCreateInfo_ppEnabledExtensionNames_offsetof);
    exports["VkQueueFamilyProperties_queueFlags_offsetof"] = Napi::Function::New(env, VkQueueFamilyProperties_queueFlags_offsetof);
    exports["VkQueueFamilyProperties_queueCount_offsetof"] = Napi::Function::New(env, VkQueueFamilyProperties_queueCount_offsetof);
    exports["VkQueueFamilyProperties_timestampValidBits_offsetof"] = Napi::Function::New(env, VkQueueFamilyProperties_timestampValidBits_offsetof);
    exports["VkQueueFamilyProperties_minImageTransferGranularity_offsetof"] = Napi::Function::New(env, VkQueueFamilyProperties_minImageTransferGranularity_offsetof);
    exports["VkPhysicalDeviceMemoryProperties_memoryTypeCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryProperties_memoryTypeCount_offsetof);
    exports["VkPhysicalDeviceMemoryProperties_memoryTypes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryProperties_memoryTypes_offsetof);
    exports["VkPhysicalDeviceMemoryProperties_memoryHeapCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryProperties_memoryHeapCount_offsetof);
    exports["VkPhysicalDeviceMemoryProperties_memoryHeaps_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryProperties_memoryHeaps_offsetof);
    exports["VkMemoryAllocateInfo_sType_offsetof"] = Napi::Function::New(env, VkMemoryAllocateInfo_sType_offsetof);
    exports["VkMemoryAllocateInfo_pNext_offsetof"] = Napi::Function::New(env, VkMemoryAllocateInfo_pNext_offsetof);
    exports["VkMemoryAllocateInfo_allocationSize_offsetof"] = Napi::Function::New(env, VkMemoryAllocateInfo_allocationSize_offsetof);
    exports["VkMemoryAllocateInfo_memoryTypeIndex_offsetof"] = Napi::Function::New(env, VkMemoryAllocateInfo_memoryTypeIndex_offsetof);
    exports["VkMemoryRequirements_size_offsetof"] = Napi::Function::New(env, VkMemoryRequirements_size_offsetof);
    exports["VkMemoryRequirements_alignment_offsetof"] = Napi::Function::New(env, VkMemoryRequirements_alignment_offsetof);
    exports["VkMemoryRequirements_memoryTypeBits_offsetof"] = Napi::Function::New(env, VkMemoryRequirements_memoryTypeBits_offsetof);
    exports["VkSparseImageFormatProperties_aspectMask_offsetof"] = Napi::Function::New(env, VkSparseImageFormatProperties_aspectMask_offsetof);
    exports["VkSparseImageFormatProperties_imageGranularity_offsetof"] = Napi::Function::New(env, VkSparseImageFormatProperties_imageGranularity_offsetof);
    exports["VkSparseImageFormatProperties_flags_offsetof"] = Napi::Function::New(env, VkSparseImageFormatProperties_flags_offsetof);
    exports["VkSparseImageMemoryRequirements_formatProperties_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryRequirements_formatProperties_offsetof);
    exports["VkSparseImageMemoryRequirements_imageMipTailFirstLod_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryRequirements_imageMipTailFirstLod_offsetof);
    exports["VkSparseImageMemoryRequirements_imageMipTailSize_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryRequirements_imageMipTailSize_offsetof);
    exports["VkSparseImageMemoryRequirements_imageMipTailOffset_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryRequirements_imageMipTailOffset_offsetof);
    exports["VkSparseImageMemoryRequirements_imageMipTailStride_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryRequirements_imageMipTailStride_offsetof);
    exports["VkMemoryType_propertyFlags_offsetof"] = Napi::Function::New(env, VkMemoryType_propertyFlags_offsetof);
    exports["VkMemoryType_heapIndex_offsetof"] = Napi::Function::New(env, VkMemoryType_heapIndex_offsetof);
    exports["VkMemoryHeap_size_offsetof"] = Napi::Function::New(env, VkMemoryHeap_size_offsetof);
    exports["VkMemoryHeap_flags_offsetof"] = Napi::Function::New(env, VkMemoryHeap_flags_offsetof);
    exports["VkMappedMemoryRange_sType_offsetof"] = Napi::Function::New(env, VkMappedMemoryRange_sType_offsetof);
    exports["VkMappedMemoryRange_pNext_offsetof"] = Napi::Function::New(env, VkMappedMemoryRange_pNext_offsetof);
    exports["VkMappedMemoryRange_memory_offsetof"] = Napi::Function::New(env, VkMappedMemoryRange_memory_offsetof);
    exports["VkMappedMemoryRange_offset_offsetof"] = Napi::Function::New(env, VkMappedMemoryRange_offset_offsetof);
    exports["VkMappedMemoryRange_size_offsetof"] = Napi::Function::New(env, VkMappedMemoryRange_size_offsetof);
    exports["VkFormatProperties_linearTilingFeatures_offsetof"] = Napi::Function::New(env, VkFormatProperties_linearTilingFeatures_offsetof);
    exports["VkFormatProperties_optimalTilingFeatures_offsetof"] = Napi::Function::New(env, VkFormatProperties_optimalTilingFeatures_offsetof);
    exports["VkFormatProperties_bufferFeatures_offsetof"] = Napi::Function::New(env, VkFormatProperties_bufferFeatures_offsetof);
    exports["VkImageFormatProperties_maxExtent_offsetof"] = Napi::Function::New(env, VkImageFormatProperties_maxExtent_offsetof);
    exports["VkImageFormatProperties_maxMipLevels_offsetof"] = Napi::Function::New(env, VkImageFormatProperties_maxMipLevels_offsetof);
    exports["VkImageFormatProperties_maxArrayLayers_offsetof"] = Napi::Function::New(env, VkImageFormatProperties_maxArrayLayers_offsetof);
    exports["VkImageFormatProperties_sampleCounts_offsetof"] = Napi::Function::New(env, VkImageFormatProperties_sampleCounts_offsetof);
    exports["VkImageFormatProperties_maxResourceSize_offsetof"] = Napi::Function::New(env, VkImageFormatProperties_maxResourceSize_offsetof);
    exports["VkDescriptorBufferInfo_buffer_offsetof"] = Napi::Function::New(env, VkDescriptorBufferInfo_buffer_offsetof);
    exports["VkDescriptorBufferInfo_offset_offsetof"] = Napi::Function::New(env, VkDescriptorBufferInfo_offset_offsetof);
    exports["VkDescriptorBufferInfo_range_offsetof"] = Napi::Function::New(env, VkDescriptorBufferInfo_range_offsetof);
    exports["VkDescriptorImageInfo_sampler_offsetof"] = Napi::Function::New(env, VkDescriptorImageInfo_sampler_offsetof);
    exports["VkDescriptorImageInfo_imageView_offsetof"] = Napi::Function::New(env, VkDescriptorImageInfo_imageView_offsetof);
    exports["VkDescriptorImageInfo_imageLayout_offsetof"] = Napi::Function::New(env, VkDescriptorImageInfo_imageLayout_offsetof);
    exports["VkWriteDescriptorSet_sType_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_sType_offsetof);
    exports["VkWriteDescriptorSet_pNext_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_pNext_offsetof);
    exports["VkWriteDescriptorSet_dstSet_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_dstSet_offsetof);
    exports["VkWriteDescriptorSet_dstBinding_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_dstBinding_offsetof);
    exports["VkWriteDescriptorSet_dstArrayElement_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_dstArrayElement_offsetof);
    exports["VkWriteDescriptorSet_descriptorCount_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_descriptorCount_offsetof);
    exports["VkWriteDescriptorSet_descriptorType_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_descriptorType_offsetof);
    exports["VkWriteDescriptorSet_pImageInfo_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_pImageInfo_offsetof);
    exports["VkWriteDescriptorSet_pBufferInfo_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_pBufferInfo_offsetof);
    exports["VkWriteDescriptorSet_pTexelBufferView_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSet_pTexelBufferView_offsetof);
    exports["VkCopyDescriptorSet_sType_offsetof"] = Napi::Function::New(env, VkCopyDescriptorSet_sType_offsetof);
    exports["VkCopyDescriptorSet_pNext_offsetof"] = Napi::Function::New(env, VkCopyDescriptorSet_pNext_offsetof);
    exports["VkCopyDescriptorSet_srcSet_offsetof"] = Napi::Function::New(env, VkCopyDescriptorSet_srcSet_offsetof);
    exports["VkCopyDescriptorSet_srcBinding_offsetof"] = Napi::Function::New(env, VkCopyDescriptorSet_srcBinding_offsetof);
    exports["VkCopyDescriptorSet_srcArrayElement_offsetof"] = Napi::Function::New(env, VkCopyDescriptorSet_srcArrayElement_offsetof);
    exports["VkCopyDescriptorSet_dstSet_offsetof"] = Napi::Function::New(env, VkCopyDescriptorSet_dstSet_offsetof);
    exports["VkCopyDescriptorSet_dstBinding_offsetof"] = Napi::Function::New(env, VkCopyDescriptorSet_dstBinding_offsetof);
    exports["VkCopyDescriptorSet_dstArrayElement_offsetof"] = Napi::Function::New(env, VkCopyDescriptorSet_dstArrayElement_offsetof);
    exports["VkCopyDescriptorSet_descriptorCount_offsetof"] = Napi::Function::New(env, VkCopyDescriptorSet_descriptorCount_offsetof);
    exports["VkBufferCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkBufferCreateInfo_sType_offsetof);
    exports["VkBufferCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkBufferCreateInfo_pNext_offsetof);
    exports["VkBufferCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkBufferCreateInfo_flags_offsetof);
    exports["VkBufferCreateInfo_size_offsetof"] = Napi::Function::New(env, VkBufferCreateInfo_size_offsetof);
    exports["VkBufferCreateInfo_usage_offsetof"] = Napi::Function::New(env, VkBufferCreateInfo_usage_offsetof);
    exports["VkBufferCreateInfo_sharingMode_offsetof"] = Napi::Function::New(env, VkBufferCreateInfo_sharingMode_offsetof);
    exports["VkBufferCreateInfo_queueFamilyIndexCount_offsetof"] = Napi::Function::New(env, VkBufferCreateInfo_queueFamilyIndexCount_offsetof);
    exports["VkBufferCreateInfo_pQueueFamilyIndices_offsetof"] = Napi::Function::New(env, VkBufferCreateInfo_pQueueFamilyIndices_offsetof);
    exports["VkBufferViewCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkBufferViewCreateInfo_sType_offsetof);
    exports["VkBufferViewCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkBufferViewCreateInfo_pNext_offsetof);
    exports["VkBufferViewCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkBufferViewCreateInfo_flags_offsetof);
    exports["VkBufferViewCreateInfo_buffer_offsetof"] = Napi::Function::New(env, VkBufferViewCreateInfo_buffer_offsetof);
    exports["VkBufferViewCreateInfo_format_offsetof"] = Napi::Function::New(env, VkBufferViewCreateInfo_format_offsetof);
    exports["VkBufferViewCreateInfo_offset_offsetof"] = Napi::Function::New(env, VkBufferViewCreateInfo_offset_offsetof);
    exports["VkBufferViewCreateInfo_range_offsetof"] = Napi::Function::New(env, VkBufferViewCreateInfo_range_offsetof);
    exports["VkImageSubresource_aspectMask_offsetof"] = Napi::Function::New(env, VkImageSubresource_aspectMask_offsetof);
    exports["VkImageSubresource_mipLevel_offsetof"] = Napi::Function::New(env, VkImageSubresource_mipLevel_offsetof);
    exports["VkImageSubresource_arrayLayer_offsetof"] = Napi::Function::New(env, VkImageSubresource_arrayLayer_offsetof);
    exports["VkImageSubresourceLayers_aspectMask_offsetof"] = Napi::Function::New(env, VkImageSubresourceLayers_aspectMask_offsetof);
    exports["VkImageSubresourceLayers_mipLevel_offsetof"] = Napi::Function::New(env, VkImageSubresourceLayers_mipLevel_offsetof);
    exports["VkImageSubresourceLayers_baseArrayLayer_offsetof"] = Napi::Function::New(env, VkImageSubresourceLayers_baseArrayLayer_offsetof);
    exports["VkImageSubresourceLayers_layerCount_offsetof"] = Napi::Function::New(env, VkImageSubresourceLayers_layerCount_offsetof);
    exports["VkImageSubresourceRange_aspectMask_offsetof"] = Napi::Function::New(env, VkImageSubresourceRange_aspectMask_offsetof);
    exports["VkImageSubresourceRange_baseMipLevel_offsetof"] = Napi::Function::New(env, VkImageSubresourceRange_baseMipLevel_offsetof);
    exports["VkImageSubresourceRange_levelCount_offsetof"] = Napi::Function::New(env, VkImageSubresourceRange_levelCount_offsetof);
    exports["VkImageSubresourceRange_baseArrayLayer_offsetof"] = Napi::Function::New(env, VkImageSubresourceRange_baseArrayLayer_offsetof);
    exports["VkImageSubresourceRange_layerCount_offsetof"] = Napi::Function::New(env, VkImageSubresourceRange_layerCount_offsetof);
    exports["VkMemoryBarrier_sType_offsetof"] = Napi::Function::New(env, VkMemoryBarrier_sType_offsetof);
    exports["VkMemoryBarrier_pNext_offsetof"] = Napi::Function::New(env, VkMemoryBarrier_pNext_offsetof);
    exports["VkMemoryBarrier_srcAccessMask_offsetof"] = Napi::Function::New(env, VkMemoryBarrier_srcAccessMask_offsetof);
    exports["VkMemoryBarrier_dstAccessMask_offsetof"] = Napi::Function::New(env, VkMemoryBarrier_dstAccessMask_offsetof);
    exports["VkBufferMemoryBarrier_sType_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier_sType_offsetof);
    exports["VkBufferMemoryBarrier_pNext_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier_pNext_offsetof);
    exports["VkBufferMemoryBarrier_srcAccessMask_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier_srcAccessMask_offsetof);
    exports["VkBufferMemoryBarrier_dstAccessMask_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier_dstAccessMask_offsetof);
    exports["VkBufferMemoryBarrier_srcQueueFamilyIndex_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier_srcQueueFamilyIndex_offsetof);
    exports["VkBufferMemoryBarrier_dstQueueFamilyIndex_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier_dstQueueFamilyIndex_offsetof);
    exports["VkBufferMemoryBarrier_buffer_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier_buffer_offsetof);
    exports["VkBufferMemoryBarrier_offset_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier_offset_offsetof);
    exports["VkBufferMemoryBarrier_size_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier_size_offsetof);
    exports["VkImageMemoryBarrier_sType_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_sType_offsetof);
    exports["VkImageMemoryBarrier_pNext_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_pNext_offsetof);
    exports["VkImageMemoryBarrier_srcAccessMask_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_srcAccessMask_offsetof);
    exports["VkImageMemoryBarrier_dstAccessMask_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_dstAccessMask_offsetof);
    exports["VkImageMemoryBarrier_oldLayout_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_oldLayout_offsetof);
    exports["VkImageMemoryBarrier_newLayout_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_newLayout_offsetof);
    exports["VkImageMemoryBarrier_srcQueueFamilyIndex_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_srcQueueFamilyIndex_offsetof);
    exports["VkImageMemoryBarrier_dstQueueFamilyIndex_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_dstQueueFamilyIndex_offsetof);
    exports["VkImageMemoryBarrier_image_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_image_offsetof);
    exports["VkImageMemoryBarrier_subresourceRange_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier_subresourceRange_offsetof);
    exports["VkImageCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_sType_offsetof);
    exports["VkImageCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_pNext_offsetof);
    exports["VkImageCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_flags_offsetof);
    exports["VkImageCreateInfo_imageType_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_imageType_offsetof);
    exports["VkImageCreateInfo_format_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_format_offsetof);
    exports["VkImageCreateInfo_extent_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_extent_offsetof);
    exports["VkImageCreateInfo_mipLevels_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_mipLevels_offsetof);
    exports["VkImageCreateInfo_arrayLayers_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_arrayLayers_offsetof);
    exports["VkImageCreateInfo_samples_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_samples_offsetof);
    exports["VkImageCreateInfo_tiling_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_tiling_offsetof);
    exports["VkImageCreateInfo_usage_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_usage_offsetof);
    exports["VkImageCreateInfo_sharingMode_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_sharingMode_offsetof);
    exports["VkImageCreateInfo_queueFamilyIndexCount_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_queueFamilyIndexCount_offsetof);
    exports["VkImageCreateInfo_pQueueFamilyIndices_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_pQueueFamilyIndices_offsetof);
    exports["VkImageCreateInfo_initialLayout_offsetof"] = Napi::Function::New(env, VkImageCreateInfo_initialLayout_offsetof);
    exports["VkSubresourceLayout_offset_offsetof"] = Napi::Function::New(env, VkSubresourceLayout_offset_offsetof);
    exports["VkSubresourceLayout_size_offsetof"] = Napi::Function::New(env, VkSubresourceLayout_size_offsetof);
    exports["VkSubresourceLayout_rowPitch_offsetof"] = Napi::Function::New(env, VkSubresourceLayout_rowPitch_offsetof);
    exports["VkSubresourceLayout_arrayPitch_offsetof"] = Napi::Function::New(env, VkSubresourceLayout_arrayPitch_offsetof);
    exports["VkSubresourceLayout_depthPitch_offsetof"] = Napi::Function::New(env, VkSubresourceLayout_depthPitch_offsetof);
    exports["VkImageViewCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkImageViewCreateInfo_sType_offsetof);
    exports["VkImageViewCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkImageViewCreateInfo_pNext_offsetof);
    exports["VkImageViewCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkImageViewCreateInfo_flags_offsetof);
    exports["VkImageViewCreateInfo_image_offsetof"] = Napi::Function::New(env, VkImageViewCreateInfo_image_offsetof);
    exports["VkImageViewCreateInfo_viewType_offsetof"] = Napi::Function::New(env, VkImageViewCreateInfo_viewType_offsetof);
    exports["VkImageViewCreateInfo_format_offsetof"] = Napi::Function::New(env, VkImageViewCreateInfo_format_offsetof);
    exports["VkImageViewCreateInfo_components_offsetof"] = Napi::Function::New(env, VkImageViewCreateInfo_components_offsetof);
    exports["VkImageViewCreateInfo_subresourceRange_offsetof"] = Napi::Function::New(env, VkImageViewCreateInfo_subresourceRange_offsetof);
    exports["VkBufferCopy_srcOffset_offsetof"] = Napi::Function::New(env, VkBufferCopy_srcOffset_offsetof);
    exports["VkBufferCopy_dstOffset_offsetof"] = Napi::Function::New(env, VkBufferCopy_dstOffset_offsetof);
    exports["VkBufferCopy_size_offsetof"] = Napi::Function::New(env, VkBufferCopy_size_offsetof);
    exports["VkSparseMemoryBind_resourceOffset_offsetof"] = Napi::Function::New(env, VkSparseMemoryBind_resourceOffset_offsetof);
    exports["VkSparseMemoryBind_size_offsetof"] = Napi::Function::New(env, VkSparseMemoryBind_size_offsetof);
    exports["VkSparseMemoryBind_memory_offsetof"] = Napi::Function::New(env, VkSparseMemoryBind_memory_offsetof);
    exports["VkSparseMemoryBind_memoryOffset_offsetof"] = Napi::Function::New(env, VkSparseMemoryBind_memoryOffset_offsetof);
    exports["VkSparseMemoryBind_flags_offsetof"] = Napi::Function::New(env, VkSparseMemoryBind_flags_offsetof);
    exports["VkSparseImageMemoryBind_subresource_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryBind_subresource_offsetof);
    exports["VkSparseImageMemoryBind_offset_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryBind_offset_offsetof);
    exports["VkSparseImageMemoryBind_extent_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryBind_extent_offsetof);
    exports["VkSparseImageMemoryBind_memory_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryBind_memory_offsetof);
    exports["VkSparseImageMemoryBind_memoryOffset_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryBind_memoryOffset_offsetof);
    exports["VkSparseImageMemoryBind_flags_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryBind_flags_offsetof);
    exports["VkSparseBufferMemoryBindInfo_buffer_offsetof"] = Napi::Function::New(env, VkSparseBufferMemoryBindInfo_buffer_offsetof);
    exports["VkSparseBufferMemoryBindInfo_bindCount_offsetof"] = Napi::Function::New(env, VkSparseBufferMemoryBindInfo_bindCount_offsetof);
    exports["VkSparseBufferMemoryBindInfo_pBinds_offsetof"] = Napi::Function::New(env, VkSparseBufferMemoryBindInfo_pBinds_offsetof);
    exports["VkSparseImageOpaqueMemoryBindInfo_image_offsetof"] = Napi::Function::New(env, VkSparseImageOpaqueMemoryBindInfo_image_offsetof);
    exports["VkSparseImageOpaqueMemoryBindInfo_bindCount_offsetof"] = Napi::Function::New(env, VkSparseImageOpaqueMemoryBindInfo_bindCount_offsetof);
    exports["VkSparseImageOpaqueMemoryBindInfo_pBinds_offsetof"] = Napi::Function::New(env, VkSparseImageOpaqueMemoryBindInfo_pBinds_offsetof);
    exports["VkSparseImageMemoryBindInfo_image_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryBindInfo_image_offsetof);
    exports["VkSparseImageMemoryBindInfo_bindCount_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryBindInfo_bindCount_offsetof);
    exports["VkSparseImageMemoryBindInfo_pBinds_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryBindInfo_pBinds_offsetof);
    exports["VkBindSparseInfo_sType_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_sType_offsetof);
    exports["VkBindSparseInfo_pNext_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_pNext_offsetof);
    exports["VkBindSparseInfo_waitSemaphoreCount_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_waitSemaphoreCount_offsetof);
    exports["VkBindSparseInfo_pWaitSemaphores_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_pWaitSemaphores_offsetof);
    exports["VkBindSparseInfo_bufferBindCount_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_bufferBindCount_offsetof);
    exports["VkBindSparseInfo_pBufferBinds_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_pBufferBinds_offsetof);
    exports["VkBindSparseInfo_imageOpaqueBindCount_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_imageOpaqueBindCount_offsetof);
    exports["VkBindSparseInfo_pImageOpaqueBinds_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_pImageOpaqueBinds_offsetof);
    exports["VkBindSparseInfo_imageBindCount_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_imageBindCount_offsetof);
    exports["VkBindSparseInfo_pImageBinds_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_pImageBinds_offsetof);
    exports["VkBindSparseInfo_signalSemaphoreCount_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_signalSemaphoreCount_offsetof);
    exports["VkBindSparseInfo_pSignalSemaphores_offsetof"] = Napi::Function::New(env, VkBindSparseInfo_pSignalSemaphores_offsetof);
    exports["VkImageCopy_srcSubresource_offsetof"] = Napi::Function::New(env, VkImageCopy_srcSubresource_offsetof);
    exports["VkImageCopy_srcOffset_offsetof"] = Napi::Function::New(env, VkImageCopy_srcOffset_offsetof);
    exports["VkImageCopy_dstSubresource_offsetof"] = Napi::Function::New(env, VkImageCopy_dstSubresource_offsetof);
    exports["VkImageCopy_dstOffset_offsetof"] = Napi::Function::New(env, VkImageCopy_dstOffset_offsetof);
    exports["VkImageCopy_extent_offsetof"] = Napi::Function::New(env, VkImageCopy_extent_offsetof);
    exports["VkImageBlit_srcSubresource_offsetof"] = Napi::Function::New(env, VkImageBlit_srcSubresource_offsetof);
    exports["VkImageBlit_srcOffsets_offsetof"] = Napi::Function::New(env, VkImageBlit_srcOffsets_offsetof);
    exports["VkImageBlit_dstSubresource_offsetof"] = Napi::Function::New(env, VkImageBlit_dstSubresource_offsetof);
    exports["VkImageBlit_dstOffsets_offsetof"] = Napi::Function::New(env, VkImageBlit_dstOffsets_offsetof);
    exports["VkBufferImageCopy_bufferOffset_offsetof"] = Napi::Function::New(env, VkBufferImageCopy_bufferOffset_offsetof);
    exports["VkBufferImageCopy_bufferRowLength_offsetof"] = Napi::Function::New(env, VkBufferImageCopy_bufferRowLength_offsetof);
    exports["VkBufferImageCopy_bufferImageHeight_offsetof"] = Napi::Function::New(env, VkBufferImageCopy_bufferImageHeight_offsetof);
    exports["VkBufferImageCopy_imageSubresource_offsetof"] = Napi::Function::New(env, VkBufferImageCopy_imageSubresource_offsetof);
    exports["VkBufferImageCopy_imageOffset_offsetof"] = Napi::Function::New(env, VkBufferImageCopy_imageOffset_offsetof);
    exports["VkBufferImageCopy_imageExtent_offsetof"] = Napi::Function::New(env, VkBufferImageCopy_imageExtent_offsetof);
#ifdef VK_NV_copy_memory_indirect
    exports["VkCopyMemoryIndirectCommandNV_srcAddress_offsetof"] = Napi::Function::New(env, VkCopyMemoryIndirectCommandNV_srcAddress_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkCopyMemoryIndirectCommandNV_dstAddress_offsetof"] = Napi::Function::New(env, VkCopyMemoryIndirectCommandNV_dstAddress_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkCopyMemoryIndirectCommandNV_size_offsetof"] = Napi::Function::New(env, VkCopyMemoryIndirectCommandNV_size_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkCopyMemoryToImageIndirectCommandNV_srcAddress_offsetof"] = Napi::Function::New(env, VkCopyMemoryToImageIndirectCommandNV_srcAddress_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkCopyMemoryToImageIndirectCommandNV_bufferRowLength_offsetof"] = Napi::Function::New(env, VkCopyMemoryToImageIndirectCommandNV_bufferRowLength_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkCopyMemoryToImageIndirectCommandNV_bufferImageHeight_offsetof"] = Napi::Function::New(env, VkCopyMemoryToImageIndirectCommandNV_bufferImageHeight_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkCopyMemoryToImageIndirectCommandNV_imageSubresource_offsetof"] = Napi::Function::New(env, VkCopyMemoryToImageIndirectCommandNV_imageSubresource_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkCopyMemoryToImageIndirectCommandNV_imageOffset_offsetof"] = Napi::Function::New(env, VkCopyMemoryToImageIndirectCommandNV_imageOffset_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkCopyMemoryToImageIndirectCommandNV_imageExtent_offsetof"] = Napi::Function::New(env, VkCopyMemoryToImageIndirectCommandNV_imageExtent_offsetof);
#endif
    exports["VkImageResolve_srcSubresource_offsetof"] = Napi::Function::New(env, VkImageResolve_srcSubresource_offsetof);
    exports["VkImageResolve_srcOffset_offsetof"] = Napi::Function::New(env, VkImageResolve_srcOffset_offsetof);
    exports["VkImageResolve_dstSubresource_offsetof"] = Napi::Function::New(env, VkImageResolve_dstSubresource_offsetof);
    exports["VkImageResolve_dstOffset_offsetof"] = Napi::Function::New(env, VkImageResolve_dstOffset_offsetof);
    exports["VkImageResolve_extent_offsetof"] = Napi::Function::New(env, VkImageResolve_extent_offsetof);
    exports["VkShaderModuleCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkShaderModuleCreateInfo_sType_offsetof);
    exports["VkShaderModuleCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkShaderModuleCreateInfo_pNext_offsetof);
    exports["VkShaderModuleCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkShaderModuleCreateInfo_flags_offsetof);
    exports["VkShaderModuleCreateInfo_codeSize_offsetof"] = Napi::Function::New(env, VkShaderModuleCreateInfo_codeSize_offsetof);
    exports["VkShaderModuleCreateInfo_pCode_offsetof"] = Napi::Function::New(env, VkShaderModuleCreateInfo_pCode_offsetof);
    exports["VkDescriptorSetLayoutBinding_binding_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutBinding_binding_offsetof);
    exports["VkDescriptorSetLayoutBinding_descriptorType_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutBinding_descriptorType_offsetof);
    exports["VkDescriptorSetLayoutBinding_descriptorCount_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutBinding_descriptorCount_offsetof);
    exports["VkDescriptorSetLayoutBinding_stageFlags_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutBinding_stageFlags_offsetof);
    exports["VkDescriptorSetLayoutBinding_pImmutableSamplers_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutBinding_pImmutableSamplers_offsetof);
    exports["VkDescriptorSetLayoutCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutCreateInfo_sType_offsetof);
    exports["VkDescriptorSetLayoutCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutCreateInfo_pNext_offsetof);
    exports["VkDescriptorSetLayoutCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutCreateInfo_flags_offsetof);
    exports["VkDescriptorSetLayoutCreateInfo_bindingCount_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutCreateInfo_bindingCount_offsetof);
    exports["VkDescriptorSetLayoutCreateInfo_pBindings_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutCreateInfo_pBindings_offsetof);
    exports["VkDescriptorPoolSize_type_offsetof"] = Napi::Function::New(env, VkDescriptorPoolSize_type_offsetof);
    exports["VkDescriptorPoolSize_descriptorCount_offsetof"] = Napi::Function::New(env, VkDescriptorPoolSize_descriptorCount_offsetof);
    exports["VkDescriptorPoolCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkDescriptorPoolCreateInfo_sType_offsetof);
    exports["VkDescriptorPoolCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorPoolCreateInfo_pNext_offsetof);
    exports["VkDescriptorPoolCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkDescriptorPoolCreateInfo_flags_offsetof);
    exports["VkDescriptorPoolCreateInfo_maxSets_offsetof"] = Napi::Function::New(env, VkDescriptorPoolCreateInfo_maxSets_offsetof);
    exports["VkDescriptorPoolCreateInfo_poolSizeCount_offsetof"] = Napi::Function::New(env, VkDescriptorPoolCreateInfo_poolSizeCount_offsetof);
    exports["VkDescriptorPoolCreateInfo_pPoolSizes_offsetof"] = Napi::Function::New(env, VkDescriptorPoolCreateInfo_pPoolSizes_offsetof);
    exports["VkDescriptorSetAllocateInfo_sType_offsetof"] = Napi::Function::New(env, VkDescriptorSetAllocateInfo_sType_offsetof);
    exports["VkDescriptorSetAllocateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorSetAllocateInfo_pNext_offsetof);
    exports["VkDescriptorSetAllocateInfo_descriptorPool_offsetof"] = Napi::Function::New(env, VkDescriptorSetAllocateInfo_descriptorPool_offsetof);
    exports["VkDescriptorSetAllocateInfo_descriptorSetCount_offsetof"] = Napi::Function::New(env, VkDescriptorSetAllocateInfo_descriptorSetCount_offsetof);
    exports["VkDescriptorSetAllocateInfo_pSetLayouts_offsetof"] = Napi::Function::New(env, VkDescriptorSetAllocateInfo_pSetLayouts_offsetof);
    exports["VkSpecializationMapEntry_constantID_offsetof"] = Napi::Function::New(env, VkSpecializationMapEntry_constantID_offsetof);
    exports["VkSpecializationMapEntry_offset_offsetof"] = Napi::Function::New(env, VkSpecializationMapEntry_offset_offsetof);
    exports["VkSpecializationMapEntry_size_offsetof"] = Napi::Function::New(env, VkSpecializationMapEntry_size_offsetof);
    exports["VkSpecializationInfo_mapEntryCount_offsetof"] = Napi::Function::New(env, VkSpecializationInfo_mapEntryCount_offsetof);
    exports["VkSpecializationInfo_pMapEntries_offsetof"] = Napi::Function::New(env, VkSpecializationInfo_pMapEntries_offsetof);
    exports["VkSpecializationInfo_dataSize_offsetof"] = Napi::Function::New(env, VkSpecializationInfo_dataSize_offsetof);
    exports["VkSpecializationInfo_pData_offsetof"] = Napi::Function::New(env, VkSpecializationInfo_pData_offsetof);
    exports["VkPipelineShaderStageCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageCreateInfo_sType_offsetof);
    exports["VkPipelineShaderStageCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageCreateInfo_pNext_offsetof);
    exports["VkPipelineShaderStageCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageCreateInfo_flags_offsetof);
    exports["VkPipelineShaderStageCreateInfo_stage_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageCreateInfo_stage_offsetof);
    exports["VkPipelineShaderStageCreateInfo_module_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageCreateInfo_module_offsetof);
    exports["VkPipelineShaderStageCreateInfo_pName_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageCreateInfo_pName_offsetof);
    exports["VkPipelineShaderStageCreateInfo_pSpecializationInfo_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageCreateInfo_pSpecializationInfo_offsetof);
    exports["VkComputePipelineCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkComputePipelineCreateInfo_sType_offsetof);
    exports["VkComputePipelineCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkComputePipelineCreateInfo_pNext_offsetof);
    exports["VkComputePipelineCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkComputePipelineCreateInfo_flags_offsetof);
    exports["VkComputePipelineCreateInfo_stage_offsetof"] = Napi::Function::New(env, VkComputePipelineCreateInfo_stage_offsetof);
    exports["VkComputePipelineCreateInfo_layout_offsetof"] = Napi::Function::New(env, VkComputePipelineCreateInfo_layout_offsetof);
    exports["VkComputePipelineCreateInfo_basePipelineHandle_offsetof"] = Napi::Function::New(env, VkComputePipelineCreateInfo_basePipelineHandle_offsetof);
    exports["VkComputePipelineCreateInfo_basePipelineIndex_offsetof"] = Napi::Function::New(env, VkComputePipelineCreateInfo_basePipelineIndex_offsetof);
    exports["VkVertexInputBindingDescription_binding_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDescription_binding_offsetof);
    exports["VkVertexInputBindingDescription_stride_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDescription_stride_offsetof);
    exports["VkVertexInputBindingDescription_inputRate_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDescription_inputRate_offsetof);
    exports["VkVertexInputAttributeDescription_location_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription_location_offsetof);
    exports["VkVertexInputAttributeDescription_binding_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription_binding_offsetof);
    exports["VkVertexInputAttributeDescription_format_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription_format_offsetof);
    exports["VkVertexInputAttributeDescription_offset_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription_offset_offsetof);
    exports["VkPipelineVertexInputStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputStateCreateInfo_sType_offsetof);
    exports["VkPipelineVertexInputStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputStateCreateInfo_pNext_offsetof);
    exports["VkPipelineVertexInputStateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputStateCreateInfo_flags_offsetof);
    exports["VkPipelineVertexInputStateCreateInfo_vertexBindingDescriptionCount_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputStateCreateInfo_vertexBindingDescriptionCount_offsetof);
    exports["VkPipelineVertexInputStateCreateInfo_pVertexBindingDescriptions_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputStateCreateInfo_pVertexBindingDescriptions_offsetof);
    exports["VkPipelineVertexInputStateCreateInfo_vertexAttributeDescriptionCount_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputStateCreateInfo_vertexAttributeDescriptionCount_offsetof);
    exports["VkPipelineVertexInputStateCreateInfo_pVertexAttributeDescriptions_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputStateCreateInfo_pVertexAttributeDescriptions_offsetof);
    exports["VkPipelineInputAssemblyStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineInputAssemblyStateCreateInfo_sType_offsetof);
    exports["VkPipelineInputAssemblyStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineInputAssemblyStateCreateInfo_pNext_offsetof);
    exports["VkPipelineInputAssemblyStateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineInputAssemblyStateCreateInfo_flags_offsetof);
    exports["VkPipelineInputAssemblyStateCreateInfo_topology_offsetof"] = Napi::Function::New(env, VkPipelineInputAssemblyStateCreateInfo_topology_offsetof);
    exports["VkPipelineInputAssemblyStateCreateInfo_primitiveRestartEnable_offsetof"] = Napi::Function::New(env, VkPipelineInputAssemblyStateCreateInfo_primitiveRestartEnable_offsetof);
    exports["VkPipelineTessellationStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineTessellationStateCreateInfo_sType_offsetof);
    exports["VkPipelineTessellationStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineTessellationStateCreateInfo_pNext_offsetof);
    exports["VkPipelineTessellationStateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineTessellationStateCreateInfo_flags_offsetof);
    exports["VkPipelineTessellationStateCreateInfo_patchControlPoints_offsetof"] = Napi::Function::New(env, VkPipelineTessellationStateCreateInfo_patchControlPoints_offsetof);
    exports["VkPipelineViewportStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineViewportStateCreateInfo_sType_offsetof);
    exports["VkPipelineViewportStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineViewportStateCreateInfo_pNext_offsetof);
    exports["VkPipelineViewportStateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineViewportStateCreateInfo_flags_offsetof);
    exports["VkPipelineViewportStateCreateInfo_viewportCount_offsetof"] = Napi::Function::New(env, VkPipelineViewportStateCreateInfo_viewportCount_offsetof);
    exports["VkPipelineViewportStateCreateInfo_pViewports_offsetof"] = Napi::Function::New(env, VkPipelineViewportStateCreateInfo_pViewports_offsetof);
    exports["VkPipelineViewportStateCreateInfo_scissorCount_offsetof"] = Napi::Function::New(env, VkPipelineViewportStateCreateInfo_scissorCount_offsetof);
    exports["VkPipelineViewportStateCreateInfo_pScissors_offsetof"] = Napi::Function::New(env, VkPipelineViewportStateCreateInfo_pScissors_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_sType_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_pNext_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_flags_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_depthClampEnable_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_depthClampEnable_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_rasterizerDiscardEnable_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_rasterizerDiscardEnable_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_polygonMode_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_polygonMode_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_cullMode_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_cullMode_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_frontFace_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_frontFace_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_depthBiasEnable_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_depthBiasEnable_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_depthBiasConstantFactor_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_depthBiasConstantFactor_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_depthBiasClamp_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_depthBiasClamp_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_depthBiasSlopeFactor_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_depthBiasSlopeFactor_offsetof);
    exports["VkPipelineRasterizationStateCreateInfo_lineWidth_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateCreateInfo_lineWidth_offsetof);
    exports["VkPipelineMultisampleStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineMultisampleStateCreateInfo_sType_offsetof);
    exports["VkPipelineMultisampleStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineMultisampleStateCreateInfo_pNext_offsetof);
    exports["VkPipelineMultisampleStateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineMultisampleStateCreateInfo_flags_offsetof);
    exports["VkPipelineMultisampleStateCreateInfo_rasterizationSamples_offsetof"] = Napi::Function::New(env, VkPipelineMultisampleStateCreateInfo_rasterizationSamples_offsetof);
    exports["VkPipelineMultisampleStateCreateInfo_sampleShadingEnable_offsetof"] = Napi::Function::New(env, VkPipelineMultisampleStateCreateInfo_sampleShadingEnable_offsetof);
    exports["VkPipelineMultisampleStateCreateInfo_minSampleShading_offsetof"] = Napi::Function::New(env, VkPipelineMultisampleStateCreateInfo_minSampleShading_offsetof);
    exports["VkPipelineMultisampleStateCreateInfo_pSampleMask_offsetof"] = Napi::Function::New(env, VkPipelineMultisampleStateCreateInfo_pSampleMask_offsetof);
    exports["VkPipelineMultisampleStateCreateInfo_alphaToCoverageEnable_offsetof"] = Napi::Function::New(env, VkPipelineMultisampleStateCreateInfo_alphaToCoverageEnable_offsetof);
    exports["VkPipelineMultisampleStateCreateInfo_alphaToOneEnable_offsetof"] = Napi::Function::New(env, VkPipelineMultisampleStateCreateInfo_alphaToOneEnable_offsetof);
    exports["VkPipelineColorBlendAttachmentState_blendEnable_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAttachmentState_blendEnable_offsetof);
    exports["VkPipelineColorBlendAttachmentState_srcColorBlendFactor_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAttachmentState_srcColorBlendFactor_offsetof);
    exports["VkPipelineColorBlendAttachmentState_dstColorBlendFactor_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAttachmentState_dstColorBlendFactor_offsetof);
    exports["VkPipelineColorBlendAttachmentState_colorBlendOp_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAttachmentState_colorBlendOp_offsetof);
    exports["VkPipelineColorBlendAttachmentState_srcAlphaBlendFactor_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAttachmentState_srcAlphaBlendFactor_offsetof);
    exports["VkPipelineColorBlendAttachmentState_dstAlphaBlendFactor_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAttachmentState_dstAlphaBlendFactor_offsetof);
    exports["VkPipelineColorBlendAttachmentState_alphaBlendOp_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAttachmentState_alphaBlendOp_offsetof);
    exports["VkPipelineColorBlendAttachmentState_colorWriteMask_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAttachmentState_colorWriteMask_offsetof);
    exports["VkPipelineColorBlendStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendStateCreateInfo_sType_offsetof);
    exports["VkPipelineColorBlendStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendStateCreateInfo_pNext_offsetof);
    exports["VkPipelineColorBlendStateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendStateCreateInfo_flags_offsetof);
    exports["VkPipelineColorBlendStateCreateInfo_logicOpEnable_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendStateCreateInfo_logicOpEnable_offsetof);
    exports["VkPipelineColorBlendStateCreateInfo_logicOp_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendStateCreateInfo_logicOp_offsetof);
    exports["VkPipelineColorBlendStateCreateInfo_attachmentCount_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendStateCreateInfo_attachmentCount_offsetof);
    exports["VkPipelineColorBlendStateCreateInfo_pAttachments_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendStateCreateInfo_pAttachments_offsetof);
    exports["VkPipelineColorBlendStateCreateInfo_blendConstants_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendStateCreateInfo_blendConstants_offsetof);
    exports["VkPipelineDynamicStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineDynamicStateCreateInfo_sType_offsetof);
    exports["VkPipelineDynamicStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineDynamicStateCreateInfo_pNext_offsetof);
    exports["VkPipelineDynamicStateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineDynamicStateCreateInfo_flags_offsetof);
    exports["VkPipelineDynamicStateCreateInfo_dynamicStateCount_offsetof"] = Napi::Function::New(env, VkPipelineDynamicStateCreateInfo_dynamicStateCount_offsetof);
    exports["VkPipelineDynamicStateCreateInfo_pDynamicStates_offsetof"] = Napi::Function::New(env, VkPipelineDynamicStateCreateInfo_pDynamicStates_offsetof);
    exports["VkStencilOpState_failOp_offsetof"] = Napi::Function::New(env, VkStencilOpState_failOp_offsetof);
    exports["VkStencilOpState_passOp_offsetof"] = Napi::Function::New(env, VkStencilOpState_passOp_offsetof);
    exports["VkStencilOpState_depthFailOp_offsetof"] = Napi::Function::New(env, VkStencilOpState_depthFailOp_offsetof);
    exports["VkStencilOpState_compareOp_offsetof"] = Napi::Function::New(env, VkStencilOpState_compareOp_offsetof);
    exports["VkStencilOpState_compareMask_offsetof"] = Napi::Function::New(env, VkStencilOpState_compareMask_offsetof);
    exports["VkStencilOpState_writeMask_offsetof"] = Napi::Function::New(env, VkStencilOpState_writeMask_offsetof);
    exports["VkStencilOpState_reference_offsetof"] = Napi::Function::New(env, VkStencilOpState_reference_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_sType_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_pNext_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_flags_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_depthTestEnable_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_depthTestEnable_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_depthWriteEnable_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_depthWriteEnable_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_depthCompareOp_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_depthCompareOp_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_depthBoundsTestEnable_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_depthBoundsTestEnable_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_stencilTestEnable_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_stencilTestEnable_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_front_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_front_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_back_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_back_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_minDepthBounds_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_minDepthBounds_offsetof);
    exports["VkPipelineDepthStencilStateCreateInfo_maxDepthBounds_offsetof"] = Napi::Function::New(env, VkPipelineDepthStencilStateCreateInfo_maxDepthBounds_offsetof);
    exports["VkGraphicsPipelineCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_sType_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pNext_offsetof);
    exports["VkGraphicsPipelineCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_flags_offsetof);
    exports["VkGraphicsPipelineCreateInfo_stageCount_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_stageCount_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pStages_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pStages_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pVertexInputState_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pVertexInputState_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pInputAssemblyState_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pInputAssemblyState_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pTessellationState_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pTessellationState_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pViewportState_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pViewportState_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pRasterizationState_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pRasterizationState_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pMultisampleState_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pMultisampleState_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pDepthStencilState_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pDepthStencilState_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pColorBlendState_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pColorBlendState_offsetof);
    exports["VkGraphicsPipelineCreateInfo_pDynamicState_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_pDynamicState_offsetof);
    exports["VkGraphicsPipelineCreateInfo_layout_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_layout_offsetof);
    exports["VkGraphicsPipelineCreateInfo_renderPass_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_renderPass_offsetof);
    exports["VkGraphicsPipelineCreateInfo_subpass_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_subpass_offsetof);
    exports["VkGraphicsPipelineCreateInfo_basePipelineHandle_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_basePipelineHandle_offsetof);
    exports["VkGraphicsPipelineCreateInfo_basePipelineIndex_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineCreateInfo_basePipelineIndex_offsetof);
    exports["VkPipelineCacheCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineCacheCreateInfo_sType_offsetof);
    exports["VkPipelineCacheCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineCacheCreateInfo_pNext_offsetof);
    exports["VkPipelineCacheCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineCacheCreateInfo_flags_offsetof);
    exports["VkPipelineCacheCreateInfo_initialDataSize_offsetof"] = Napi::Function::New(env, VkPipelineCacheCreateInfo_initialDataSize_offsetof);
    exports["VkPipelineCacheCreateInfo_pInitialData_offsetof"] = Napi::Function::New(env, VkPipelineCacheCreateInfo_pInitialData_offsetof);
    exports["VkPipelineCacheHeaderVersionOne_headerSize_offsetof"] = Napi::Function::New(env, VkPipelineCacheHeaderVersionOne_headerSize_offsetof);
    exports["VkPipelineCacheHeaderVersionOne_headerVersion_offsetof"] = Napi::Function::New(env, VkPipelineCacheHeaderVersionOne_headerVersion_offsetof);
    exports["VkPipelineCacheHeaderVersionOne_vendorID_offsetof"] = Napi::Function::New(env, VkPipelineCacheHeaderVersionOne_vendorID_offsetof);
    exports["VkPipelineCacheHeaderVersionOne_deviceID_offsetof"] = Napi::Function::New(env, VkPipelineCacheHeaderVersionOne_deviceID_offsetof);
    exports["VkPipelineCacheHeaderVersionOne_pipelineCacheUUID_offsetof"] = Napi::Function::New(env, VkPipelineCacheHeaderVersionOne_pipelineCacheUUID_offsetof);
    exports["VkPushConstantRange_stageFlags_offsetof"] = Napi::Function::New(env, VkPushConstantRange_stageFlags_offsetof);
    exports["VkPushConstantRange_offset_offsetof"] = Napi::Function::New(env, VkPushConstantRange_offset_offsetof);
    exports["VkPushConstantRange_size_offsetof"] = Napi::Function::New(env, VkPushConstantRange_size_offsetof);
    exports["VkPipelineLayoutCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineLayoutCreateInfo_sType_offsetof);
    exports["VkPipelineLayoutCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineLayoutCreateInfo_pNext_offsetof);
    exports["VkPipelineLayoutCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPipelineLayoutCreateInfo_flags_offsetof);
    exports["VkPipelineLayoutCreateInfo_setLayoutCount_offsetof"] = Napi::Function::New(env, VkPipelineLayoutCreateInfo_setLayoutCount_offsetof);
    exports["VkPipelineLayoutCreateInfo_pSetLayouts_offsetof"] = Napi::Function::New(env, VkPipelineLayoutCreateInfo_pSetLayouts_offsetof);
    exports["VkPipelineLayoutCreateInfo_pushConstantRangeCount_offsetof"] = Napi::Function::New(env, VkPipelineLayoutCreateInfo_pushConstantRangeCount_offsetof);
    exports["VkPipelineLayoutCreateInfo_pPushConstantRanges_offsetof"] = Napi::Function::New(env, VkPipelineLayoutCreateInfo_pPushConstantRanges_offsetof);
    exports["VkSamplerCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_sType_offsetof);
    exports["VkSamplerCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_pNext_offsetof);
    exports["VkSamplerCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_flags_offsetof);
    exports["VkSamplerCreateInfo_magFilter_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_magFilter_offsetof);
    exports["VkSamplerCreateInfo_minFilter_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_minFilter_offsetof);
    exports["VkSamplerCreateInfo_mipmapMode_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_mipmapMode_offsetof);
    exports["VkSamplerCreateInfo_addressModeU_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_addressModeU_offsetof);
    exports["VkSamplerCreateInfo_addressModeV_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_addressModeV_offsetof);
    exports["VkSamplerCreateInfo_addressModeW_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_addressModeW_offsetof);
    exports["VkSamplerCreateInfo_mipLodBias_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_mipLodBias_offsetof);
    exports["VkSamplerCreateInfo_anisotropyEnable_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_anisotropyEnable_offsetof);
    exports["VkSamplerCreateInfo_maxAnisotropy_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_maxAnisotropy_offsetof);
    exports["VkSamplerCreateInfo_compareEnable_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_compareEnable_offsetof);
    exports["VkSamplerCreateInfo_compareOp_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_compareOp_offsetof);
    exports["VkSamplerCreateInfo_minLod_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_minLod_offsetof);
    exports["VkSamplerCreateInfo_maxLod_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_maxLod_offsetof);
    exports["VkSamplerCreateInfo_borderColor_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_borderColor_offsetof);
    exports["VkSamplerCreateInfo_unnormalizedCoordinates_offsetof"] = Napi::Function::New(env, VkSamplerCreateInfo_unnormalizedCoordinates_offsetof);
    exports["VkCommandPoolCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkCommandPoolCreateInfo_sType_offsetof);
    exports["VkCommandPoolCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkCommandPoolCreateInfo_pNext_offsetof);
    exports["VkCommandPoolCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkCommandPoolCreateInfo_flags_offsetof);
    exports["VkCommandPoolCreateInfo_queueFamilyIndex_offsetof"] = Napi::Function::New(env, VkCommandPoolCreateInfo_queueFamilyIndex_offsetof);
    exports["VkCommandBufferAllocateInfo_sType_offsetof"] = Napi::Function::New(env, VkCommandBufferAllocateInfo_sType_offsetof);
    exports["VkCommandBufferAllocateInfo_pNext_offsetof"] = Napi::Function::New(env, VkCommandBufferAllocateInfo_pNext_offsetof);
    exports["VkCommandBufferAllocateInfo_commandPool_offsetof"] = Napi::Function::New(env, VkCommandBufferAllocateInfo_commandPool_offsetof);
    exports["VkCommandBufferAllocateInfo_level_offsetof"] = Napi::Function::New(env, VkCommandBufferAllocateInfo_level_offsetof);
    exports["VkCommandBufferAllocateInfo_commandBufferCount_offsetof"] = Napi::Function::New(env, VkCommandBufferAllocateInfo_commandBufferCount_offsetof);
    exports["VkCommandBufferInheritanceInfo_sType_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceInfo_sType_offsetof);
    exports["VkCommandBufferInheritanceInfo_pNext_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceInfo_pNext_offsetof);
    exports["VkCommandBufferInheritanceInfo_renderPass_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceInfo_renderPass_offsetof);
    exports["VkCommandBufferInheritanceInfo_subpass_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceInfo_subpass_offsetof);
    exports["VkCommandBufferInheritanceInfo_framebuffer_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceInfo_framebuffer_offsetof);
    exports["VkCommandBufferInheritanceInfo_occlusionQueryEnable_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceInfo_occlusionQueryEnable_offsetof);
    exports["VkCommandBufferInheritanceInfo_queryFlags_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceInfo_queryFlags_offsetof);
    exports["VkCommandBufferInheritanceInfo_pipelineStatistics_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceInfo_pipelineStatistics_offsetof);
    exports["VkCommandBufferBeginInfo_sType_offsetof"] = Napi::Function::New(env, VkCommandBufferBeginInfo_sType_offsetof);
    exports["VkCommandBufferBeginInfo_pNext_offsetof"] = Napi::Function::New(env, VkCommandBufferBeginInfo_pNext_offsetof);
    exports["VkCommandBufferBeginInfo_flags_offsetof"] = Napi::Function::New(env, VkCommandBufferBeginInfo_flags_offsetof);
    exports["VkCommandBufferBeginInfo_pInheritanceInfo_offsetof"] = Napi::Function::New(env, VkCommandBufferBeginInfo_pInheritanceInfo_offsetof);
    exports["VkRenderPassBeginInfo_sType_offsetof"] = Napi::Function::New(env, VkRenderPassBeginInfo_sType_offsetof);
    exports["VkRenderPassBeginInfo_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassBeginInfo_pNext_offsetof);
    exports["VkRenderPassBeginInfo_renderPass_offsetof"] = Napi::Function::New(env, VkRenderPassBeginInfo_renderPass_offsetof);
    exports["VkRenderPassBeginInfo_framebuffer_offsetof"] = Napi::Function::New(env, VkRenderPassBeginInfo_framebuffer_offsetof);
    exports["VkRenderPassBeginInfo_renderArea_offsetof"] = Napi::Function::New(env, VkRenderPassBeginInfo_renderArea_offsetof);
    exports["VkRenderPassBeginInfo_clearValueCount_offsetof"] = Napi::Function::New(env, VkRenderPassBeginInfo_clearValueCount_offsetof);
    exports["VkRenderPassBeginInfo_pClearValues_offsetof"] = Napi::Function::New(env, VkRenderPassBeginInfo_pClearValues_offsetof);
    exports["VkClearDepthStencilValue_depth_offsetof"] = Napi::Function::New(env, VkClearDepthStencilValue_depth_offsetof);
    exports["VkClearDepthStencilValue_stencil_offsetof"] = Napi::Function::New(env, VkClearDepthStencilValue_stencil_offsetof);
    exports["VkClearAttachment_aspectMask_offsetof"] = Napi::Function::New(env, VkClearAttachment_aspectMask_offsetof);
    exports["VkClearAttachment_colorAttachment_offsetof"] = Napi::Function::New(env, VkClearAttachment_colorAttachment_offsetof);
    exports["VkClearAttachment_clearValue_offsetof"] = Napi::Function::New(env, VkClearAttachment_clearValue_offsetof);
    exports["VkAttachmentDescription_flags_offsetof"] = Napi::Function::New(env, VkAttachmentDescription_flags_offsetof);
    exports["VkAttachmentDescription_format_offsetof"] = Napi::Function::New(env, VkAttachmentDescription_format_offsetof);
    exports["VkAttachmentDescription_samples_offsetof"] = Napi::Function::New(env, VkAttachmentDescription_samples_offsetof);
    exports["VkAttachmentDescription_loadOp_offsetof"] = Napi::Function::New(env, VkAttachmentDescription_loadOp_offsetof);
    exports["VkAttachmentDescription_storeOp_offsetof"] = Napi::Function::New(env, VkAttachmentDescription_storeOp_offsetof);
    exports["VkAttachmentDescription_stencilLoadOp_offsetof"] = Napi::Function::New(env, VkAttachmentDescription_stencilLoadOp_offsetof);
    exports["VkAttachmentDescription_stencilStoreOp_offsetof"] = Napi::Function::New(env, VkAttachmentDescription_stencilStoreOp_offsetof);
    exports["VkAttachmentDescription_initialLayout_offsetof"] = Napi::Function::New(env, VkAttachmentDescription_initialLayout_offsetof);
    exports["VkAttachmentDescription_finalLayout_offsetof"] = Napi::Function::New(env, VkAttachmentDescription_finalLayout_offsetof);
    exports["VkAttachmentReference_attachment_offsetof"] = Napi::Function::New(env, VkAttachmentReference_attachment_offsetof);
    exports["VkAttachmentReference_layout_offsetof"] = Napi::Function::New(env, VkAttachmentReference_layout_offsetof);
    exports["VkSubpassDescription_flags_offsetof"] = Napi::Function::New(env, VkSubpassDescription_flags_offsetof);
    exports["VkSubpassDescription_pipelineBindPoint_offsetof"] = Napi::Function::New(env, VkSubpassDescription_pipelineBindPoint_offsetof);
    exports["VkSubpassDescription_inputAttachmentCount_offsetof"] = Napi::Function::New(env, VkSubpassDescription_inputAttachmentCount_offsetof);
    exports["VkSubpassDescription_pInputAttachments_offsetof"] = Napi::Function::New(env, VkSubpassDescription_pInputAttachments_offsetof);
    exports["VkSubpassDescription_colorAttachmentCount_offsetof"] = Napi::Function::New(env, VkSubpassDescription_colorAttachmentCount_offsetof);
    exports["VkSubpassDescription_pColorAttachments_offsetof"] = Napi::Function::New(env, VkSubpassDescription_pColorAttachments_offsetof);
    exports["VkSubpassDescription_pResolveAttachments_offsetof"] = Napi::Function::New(env, VkSubpassDescription_pResolveAttachments_offsetof);
    exports["VkSubpassDescription_pDepthStencilAttachment_offsetof"] = Napi::Function::New(env, VkSubpassDescription_pDepthStencilAttachment_offsetof);
    exports["VkSubpassDescription_preserveAttachmentCount_offsetof"] = Napi::Function::New(env, VkSubpassDescription_preserveAttachmentCount_offsetof);
    exports["VkSubpassDescription_pPreserveAttachments_offsetof"] = Napi::Function::New(env, VkSubpassDescription_pPreserveAttachments_offsetof);
    exports["VkSubpassDependency_srcSubpass_offsetof"] = Napi::Function::New(env, VkSubpassDependency_srcSubpass_offsetof);
    exports["VkSubpassDependency_dstSubpass_offsetof"] = Napi::Function::New(env, VkSubpassDependency_dstSubpass_offsetof);
    exports["VkSubpassDependency_srcStageMask_offsetof"] = Napi::Function::New(env, VkSubpassDependency_srcStageMask_offsetof);
    exports["VkSubpassDependency_dstStageMask_offsetof"] = Napi::Function::New(env, VkSubpassDependency_dstStageMask_offsetof);
    exports["VkSubpassDependency_srcAccessMask_offsetof"] = Napi::Function::New(env, VkSubpassDependency_srcAccessMask_offsetof);
    exports["VkSubpassDependency_dstAccessMask_offsetof"] = Napi::Function::New(env, VkSubpassDependency_dstAccessMask_offsetof);
    exports["VkSubpassDependency_dependencyFlags_offsetof"] = Napi::Function::New(env, VkSubpassDependency_dependencyFlags_offsetof);
    exports["VkRenderPassCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo_sType_offsetof);
    exports["VkRenderPassCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo_pNext_offsetof);
    exports["VkRenderPassCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo_flags_offsetof);
    exports["VkRenderPassCreateInfo_attachmentCount_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo_attachmentCount_offsetof);
    exports["VkRenderPassCreateInfo_pAttachments_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo_pAttachments_offsetof);
    exports["VkRenderPassCreateInfo_subpassCount_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo_subpassCount_offsetof);
    exports["VkRenderPassCreateInfo_pSubpasses_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo_pSubpasses_offsetof);
    exports["VkRenderPassCreateInfo_dependencyCount_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo_dependencyCount_offsetof);
    exports["VkRenderPassCreateInfo_pDependencies_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo_pDependencies_offsetof);
    exports["VkEventCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkEventCreateInfo_sType_offsetof);
    exports["VkEventCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkEventCreateInfo_pNext_offsetof);
    exports["VkEventCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkEventCreateInfo_flags_offsetof);
    exports["VkFenceCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkFenceCreateInfo_sType_offsetof);
    exports["VkFenceCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkFenceCreateInfo_pNext_offsetof);
    exports["VkFenceCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkFenceCreateInfo_flags_offsetof);
    exports["VkPhysicalDeviceFeatures_robustBufferAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_robustBufferAccess_offsetof);
    exports["VkPhysicalDeviceFeatures_fullDrawIndexUint32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_fullDrawIndexUint32_offsetof);
    exports["VkPhysicalDeviceFeatures_imageCubeArray_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_imageCubeArray_offsetof);
    exports["VkPhysicalDeviceFeatures_independentBlend_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_independentBlend_offsetof);
    exports["VkPhysicalDeviceFeatures_geometryShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_geometryShader_offsetof);
    exports["VkPhysicalDeviceFeatures_tessellationShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_tessellationShader_offsetof);
    exports["VkPhysicalDeviceFeatures_sampleRateShading_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sampleRateShading_offsetof);
    exports["VkPhysicalDeviceFeatures_dualSrcBlend_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_dualSrcBlend_offsetof);
    exports["VkPhysicalDeviceFeatures_logicOp_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_logicOp_offsetof);
    exports["VkPhysicalDeviceFeatures_multiDrawIndirect_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_multiDrawIndirect_offsetof);
    exports["VkPhysicalDeviceFeatures_drawIndirectFirstInstance_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_drawIndirectFirstInstance_offsetof);
    exports["VkPhysicalDeviceFeatures_depthClamp_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_depthClamp_offsetof);
    exports["VkPhysicalDeviceFeatures_depthBiasClamp_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_depthBiasClamp_offsetof);
    exports["VkPhysicalDeviceFeatures_fillModeNonSolid_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_fillModeNonSolid_offsetof);
    exports["VkPhysicalDeviceFeatures_depthBounds_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_depthBounds_offsetof);
    exports["VkPhysicalDeviceFeatures_wideLines_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_wideLines_offsetof);
    exports["VkPhysicalDeviceFeatures_largePoints_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_largePoints_offsetof);
    exports["VkPhysicalDeviceFeatures_alphaToOne_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_alphaToOne_offsetof);
    exports["VkPhysicalDeviceFeatures_multiViewport_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_multiViewport_offsetof);
    exports["VkPhysicalDeviceFeatures_samplerAnisotropy_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_samplerAnisotropy_offsetof);
    exports["VkPhysicalDeviceFeatures_textureCompressionETC2_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_textureCompressionETC2_offsetof);
    exports["VkPhysicalDeviceFeatures_textureCompressionASTC_LDR_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_textureCompressionASTC_LDR_offsetof);
    exports["VkPhysicalDeviceFeatures_textureCompressionBC_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_textureCompressionBC_offsetof);
    exports["VkPhysicalDeviceFeatures_occlusionQueryPrecise_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_occlusionQueryPrecise_offsetof);
    exports["VkPhysicalDeviceFeatures_pipelineStatisticsQuery_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_pipelineStatisticsQuery_offsetof);
    exports["VkPhysicalDeviceFeatures_vertexPipelineStoresAndAtomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_vertexPipelineStoresAndAtomics_offsetof);
    exports["VkPhysicalDeviceFeatures_fragmentStoresAndAtomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_fragmentStoresAndAtomics_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderTessellationAndGeometryPointSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderTessellationAndGeometryPointSize_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderImageGatherExtended_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderImageGatherExtended_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderStorageImageExtendedFormats_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderStorageImageExtendedFormats_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderStorageImageMultisample_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderStorageImageMultisample_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderStorageImageReadWithoutFormat_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderStorageImageReadWithoutFormat_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderStorageImageWriteWithoutFormat_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderStorageImageWriteWithoutFormat_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderUniformBufferArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderUniformBufferArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderSampledImageArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderSampledImageArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderStorageBufferArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderStorageBufferArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderStorageImageArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderStorageImageArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderClipDistance_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderClipDistance_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderCullDistance_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderCullDistance_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderFloat64_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderInt64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderInt64_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderInt16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderInt16_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderResourceResidency_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderResourceResidency_offsetof);
    exports["VkPhysicalDeviceFeatures_shaderResourceMinLod_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_shaderResourceMinLod_offsetof);
    exports["VkPhysicalDeviceFeatures_sparseBinding_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sparseBinding_offsetof);
    exports["VkPhysicalDeviceFeatures_sparseResidencyBuffer_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sparseResidencyBuffer_offsetof);
    exports["VkPhysicalDeviceFeatures_sparseResidencyImage2D_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sparseResidencyImage2D_offsetof);
    exports["VkPhysicalDeviceFeatures_sparseResidencyImage3D_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sparseResidencyImage3D_offsetof);
    exports["VkPhysicalDeviceFeatures_sparseResidency2Samples_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sparseResidency2Samples_offsetof);
    exports["VkPhysicalDeviceFeatures_sparseResidency4Samples_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sparseResidency4Samples_offsetof);
    exports["VkPhysicalDeviceFeatures_sparseResidency8Samples_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sparseResidency8Samples_offsetof);
    exports["VkPhysicalDeviceFeatures_sparseResidency16Samples_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sparseResidency16Samples_offsetof);
    exports["VkPhysicalDeviceFeatures_sparseResidencyAliased_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_sparseResidencyAliased_offsetof);
    exports["VkPhysicalDeviceFeatures_variableMultisampleRate_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_variableMultisampleRate_offsetof);
    exports["VkPhysicalDeviceFeatures_inheritedQueries_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures_inheritedQueries_offsetof);
    exports["VkPhysicalDeviceSparseProperties_residencyStandard2DBlockShape_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseProperties_residencyStandard2DBlockShape_offsetof);
    exports["VkPhysicalDeviceSparseProperties_residencyStandard2DMultisampleBlockShape_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseProperties_residencyStandard2DMultisampleBlockShape_offsetof);
    exports["VkPhysicalDeviceSparseProperties_residencyStandard3DBlockShape_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseProperties_residencyStandard3DBlockShape_offsetof);
    exports["VkPhysicalDeviceSparseProperties_residencyAlignedMipSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseProperties_residencyAlignedMipSize_offsetof);
    exports["VkPhysicalDeviceSparseProperties_residencyNonResidentStrict_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseProperties_residencyNonResidentStrict_offsetof);
    exports["VkPhysicalDeviceLimits_maxImageDimension1D_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxImageDimension1D_offsetof);
    exports["VkPhysicalDeviceLimits_maxImageDimension2D_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxImageDimension2D_offsetof);
    exports["VkPhysicalDeviceLimits_maxImageDimension3D_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxImageDimension3D_offsetof);
    exports["VkPhysicalDeviceLimits_maxImageDimensionCube_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxImageDimensionCube_offsetof);
    exports["VkPhysicalDeviceLimits_maxImageArrayLayers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxImageArrayLayers_offsetof);
    exports["VkPhysicalDeviceLimits_maxTexelBufferElements_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTexelBufferElements_offsetof);
    exports["VkPhysicalDeviceLimits_maxUniformBufferRange_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxUniformBufferRange_offsetof);
    exports["VkPhysicalDeviceLimits_maxStorageBufferRange_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxStorageBufferRange_offsetof);
    exports["VkPhysicalDeviceLimits_maxPushConstantsSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxPushConstantsSize_offsetof);
    exports["VkPhysicalDeviceLimits_maxMemoryAllocationCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxMemoryAllocationCount_offsetof);
    exports["VkPhysicalDeviceLimits_maxSamplerAllocationCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxSamplerAllocationCount_offsetof);
    exports["VkPhysicalDeviceLimits_bufferImageGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_bufferImageGranularity_offsetof);
    exports["VkPhysicalDeviceLimits_sparseAddressSpaceSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_sparseAddressSpaceSize_offsetof);
    exports["VkPhysicalDeviceLimits_maxBoundDescriptorSets_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxBoundDescriptorSets_offsetof);
    exports["VkPhysicalDeviceLimits_maxPerStageDescriptorSamplers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxPerStageDescriptorSamplers_offsetof);
    exports["VkPhysicalDeviceLimits_maxPerStageDescriptorUniformBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxPerStageDescriptorUniformBuffers_offsetof);
    exports["VkPhysicalDeviceLimits_maxPerStageDescriptorStorageBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxPerStageDescriptorStorageBuffers_offsetof);
    exports["VkPhysicalDeviceLimits_maxPerStageDescriptorSampledImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxPerStageDescriptorSampledImages_offsetof);
    exports["VkPhysicalDeviceLimits_maxPerStageDescriptorStorageImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxPerStageDescriptorStorageImages_offsetof);
    exports["VkPhysicalDeviceLimits_maxPerStageDescriptorInputAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxPerStageDescriptorInputAttachments_offsetof);
    exports["VkPhysicalDeviceLimits_maxPerStageResources_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxPerStageResources_offsetof);
    exports["VkPhysicalDeviceLimits_maxDescriptorSetSamplers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDescriptorSetSamplers_offsetof);
    exports["VkPhysicalDeviceLimits_maxDescriptorSetUniformBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDescriptorSetUniformBuffers_offsetof);
    exports["VkPhysicalDeviceLimits_maxDescriptorSetUniformBuffersDynamic_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDescriptorSetUniformBuffersDynamic_offsetof);
    exports["VkPhysicalDeviceLimits_maxDescriptorSetStorageBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDescriptorSetStorageBuffers_offsetof);
    exports["VkPhysicalDeviceLimits_maxDescriptorSetStorageBuffersDynamic_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDescriptorSetStorageBuffersDynamic_offsetof);
    exports["VkPhysicalDeviceLimits_maxDescriptorSetSampledImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDescriptorSetSampledImages_offsetof);
    exports["VkPhysicalDeviceLimits_maxDescriptorSetStorageImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDescriptorSetStorageImages_offsetof);
    exports["VkPhysicalDeviceLimits_maxDescriptorSetInputAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDescriptorSetInputAttachments_offsetof);
    exports["VkPhysicalDeviceLimits_maxVertexInputAttributes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxVertexInputAttributes_offsetof);
    exports["VkPhysicalDeviceLimits_maxVertexInputBindings_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxVertexInputBindings_offsetof);
    exports["VkPhysicalDeviceLimits_maxVertexInputAttributeOffset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxVertexInputAttributeOffset_offsetof);
    exports["VkPhysicalDeviceLimits_maxVertexInputBindingStride_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxVertexInputBindingStride_offsetof);
    exports["VkPhysicalDeviceLimits_maxVertexOutputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxVertexOutputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxTessellationGenerationLevel_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTessellationGenerationLevel_offsetof);
    exports["VkPhysicalDeviceLimits_maxTessellationPatchSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTessellationPatchSize_offsetof);
    exports["VkPhysicalDeviceLimits_maxTessellationControlPerVertexInputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTessellationControlPerVertexInputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxTessellationControlPerVertexOutputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTessellationControlPerVertexOutputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxTessellationControlPerPatchOutputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTessellationControlPerPatchOutputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxTessellationControlTotalOutputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTessellationControlTotalOutputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxTessellationEvaluationInputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTessellationEvaluationInputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxTessellationEvaluationOutputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTessellationEvaluationOutputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxGeometryShaderInvocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxGeometryShaderInvocations_offsetof);
    exports["VkPhysicalDeviceLimits_maxGeometryInputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxGeometryInputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxGeometryOutputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxGeometryOutputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxGeometryOutputVertices_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxGeometryOutputVertices_offsetof);
    exports["VkPhysicalDeviceLimits_maxGeometryTotalOutputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxGeometryTotalOutputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxFragmentInputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxFragmentInputComponents_offsetof);
    exports["VkPhysicalDeviceLimits_maxFragmentOutputAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxFragmentOutputAttachments_offsetof);
    exports["VkPhysicalDeviceLimits_maxFragmentDualSrcAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxFragmentDualSrcAttachments_offsetof);
    exports["VkPhysicalDeviceLimits_maxFragmentCombinedOutputResources_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxFragmentCombinedOutputResources_offsetof);
    exports["VkPhysicalDeviceLimits_maxComputeSharedMemorySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxComputeSharedMemorySize_offsetof);
    exports["VkPhysicalDeviceLimits_maxComputeWorkGroupCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxComputeWorkGroupCount_offsetof);
    exports["VkPhysicalDeviceLimits_maxComputeWorkGroupInvocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxComputeWorkGroupInvocations_offsetof);
    exports["VkPhysicalDeviceLimits_maxComputeWorkGroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxComputeWorkGroupSize_offsetof);
    exports["VkPhysicalDeviceLimits_subPixelPrecisionBits_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_subPixelPrecisionBits_offsetof);
    exports["VkPhysicalDeviceLimits_subTexelPrecisionBits_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_subTexelPrecisionBits_offsetof);
    exports["VkPhysicalDeviceLimits_mipmapPrecisionBits_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_mipmapPrecisionBits_offsetof);
    exports["VkPhysicalDeviceLimits_maxDrawIndexedIndexValue_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDrawIndexedIndexValue_offsetof);
    exports["VkPhysicalDeviceLimits_maxDrawIndirectCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxDrawIndirectCount_offsetof);
    exports["VkPhysicalDeviceLimits_maxSamplerLodBias_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxSamplerLodBias_offsetof);
    exports["VkPhysicalDeviceLimits_maxSamplerAnisotropy_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxSamplerAnisotropy_offsetof);
    exports["VkPhysicalDeviceLimits_maxViewports_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxViewports_offsetof);
    exports["VkPhysicalDeviceLimits_maxViewportDimensions_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxViewportDimensions_offsetof);
    exports["VkPhysicalDeviceLimits_viewportBoundsRange_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_viewportBoundsRange_offsetof);
    exports["VkPhysicalDeviceLimits_viewportSubPixelBits_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_viewportSubPixelBits_offsetof);
    exports["VkPhysicalDeviceLimits_minMemoryMapAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_minMemoryMapAlignment_offsetof);
    exports["VkPhysicalDeviceLimits_minTexelBufferOffsetAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_minTexelBufferOffsetAlignment_offsetof);
    exports["VkPhysicalDeviceLimits_minUniformBufferOffsetAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_minUniformBufferOffsetAlignment_offsetof);
    exports["VkPhysicalDeviceLimits_minStorageBufferOffsetAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_minStorageBufferOffsetAlignment_offsetof);
    exports["VkPhysicalDeviceLimits_minTexelOffset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_minTexelOffset_offsetof);
    exports["VkPhysicalDeviceLimits_maxTexelOffset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTexelOffset_offsetof);
    exports["VkPhysicalDeviceLimits_minTexelGatherOffset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_minTexelGatherOffset_offsetof);
    exports["VkPhysicalDeviceLimits_maxTexelGatherOffset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxTexelGatherOffset_offsetof);
    exports["VkPhysicalDeviceLimits_minInterpolationOffset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_minInterpolationOffset_offsetof);
    exports["VkPhysicalDeviceLimits_maxInterpolationOffset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxInterpolationOffset_offsetof);
    exports["VkPhysicalDeviceLimits_subPixelInterpolationOffsetBits_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_subPixelInterpolationOffsetBits_offsetof);
    exports["VkPhysicalDeviceLimits_maxFramebufferWidth_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxFramebufferWidth_offsetof);
    exports["VkPhysicalDeviceLimits_maxFramebufferHeight_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxFramebufferHeight_offsetof);
    exports["VkPhysicalDeviceLimits_maxFramebufferLayers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxFramebufferLayers_offsetof);
    exports["VkPhysicalDeviceLimits_framebufferColorSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_framebufferColorSampleCounts_offsetof);
    exports["VkPhysicalDeviceLimits_framebufferDepthSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_framebufferDepthSampleCounts_offsetof);
    exports["VkPhysicalDeviceLimits_framebufferStencilSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_framebufferStencilSampleCounts_offsetof);
    exports["VkPhysicalDeviceLimits_framebufferNoAttachmentsSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_framebufferNoAttachmentsSampleCounts_offsetof);
    exports["VkPhysicalDeviceLimits_maxColorAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxColorAttachments_offsetof);
    exports["VkPhysicalDeviceLimits_sampledImageColorSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_sampledImageColorSampleCounts_offsetof);
    exports["VkPhysicalDeviceLimits_sampledImageIntegerSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_sampledImageIntegerSampleCounts_offsetof);
    exports["VkPhysicalDeviceLimits_sampledImageDepthSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_sampledImageDepthSampleCounts_offsetof);
    exports["VkPhysicalDeviceLimits_sampledImageStencilSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_sampledImageStencilSampleCounts_offsetof);
    exports["VkPhysicalDeviceLimits_storageImageSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_storageImageSampleCounts_offsetof);
    exports["VkPhysicalDeviceLimits_maxSampleMaskWords_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxSampleMaskWords_offsetof);
    exports["VkPhysicalDeviceLimits_timestampComputeAndGraphics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_timestampComputeAndGraphics_offsetof);
    exports["VkPhysicalDeviceLimits_timestampPeriod_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_timestampPeriod_offsetof);
    exports["VkPhysicalDeviceLimits_maxClipDistances_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxClipDistances_offsetof);
    exports["VkPhysicalDeviceLimits_maxCullDistances_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxCullDistances_offsetof);
    exports["VkPhysicalDeviceLimits_maxCombinedClipAndCullDistances_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_maxCombinedClipAndCullDistances_offsetof);
    exports["VkPhysicalDeviceLimits_discreteQueuePriorities_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_discreteQueuePriorities_offsetof);
    exports["VkPhysicalDeviceLimits_pointSizeRange_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_pointSizeRange_offsetof);
    exports["VkPhysicalDeviceLimits_lineWidthRange_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_lineWidthRange_offsetof);
    exports["VkPhysicalDeviceLimits_pointSizeGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_pointSizeGranularity_offsetof);
    exports["VkPhysicalDeviceLimits_lineWidthGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_lineWidthGranularity_offsetof);
    exports["VkPhysicalDeviceLimits_strictLines_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_strictLines_offsetof);
    exports["VkPhysicalDeviceLimits_standardSampleLocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_standardSampleLocations_offsetof);
    exports["VkPhysicalDeviceLimits_optimalBufferCopyOffsetAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_optimalBufferCopyOffsetAlignment_offsetof);
    exports["VkPhysicalDeviceLimits_optimalBufferCopyRowPitchAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_optimalBufferCopyRowPitchAlignment_offsetof);
    exports["VkPhysicalDeviceLimits_nonCoherentAtomSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLimits_nonCoherentAtomSize_offsetof);
    exports["VkSemaphoreCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkSemaphoreCreateInfo_sType_offsetof);
    exports["VkSemaphoreCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkSemaphoreCreateInfo_pNext_offsetof);
    exports["VkSemaphoreCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkSemaphoreCreateInfo_flags_offsetof);
    exports["VkQueryPoolCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkQueryPoolCreateInfo_sType_offsetof);
    exports["VkQueryPoolCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkQueryPoolCreateInfo_pNext_offsetof);
    exports["VkQueryPoolCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkQueryPoolCreateInfo_flags_offsetof);
    exports["VkQueryPoolCreateInfo_queryType_offsetof"] = Napi::Function::New(env, VkQueryPoolCreateInfo_queryType_offsetof);
    exports["VkQueryPoolCreateInfo_queryCount_offsetof"] = Napi::Function::New(env, VkQueryPoolCreateInfo_queryCount_offsetof);
    exports["VkQueryPoolCreateInfo_pipelineStatistics_offsetof"] = Napi::Function::New(env, VkQueryPoolCreateInfo_pipelineStatistics_offsetof);
    exports["VkFramebufferCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkFramebufferCreateInfo_sType_offsetof);
    exports["VkFramebufferCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkFramebufferCreateInfo_pNext_offsetof);
    exports["VkFramebufferCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkFramebufferCreateInfo_flags_offsetof);
    exports["VkFramebufferCreateInfo_renderPass_offsetof"] = Napi::Function::New(env, VkFramebufferCreateInfo_renderPass_offsetof);
    exports["VkFramebufferCreateInfo_attachmentCount_offsetof"] = Napi::Function::New(env, VkFramebufferCreateInfo_attachmentCount_offsetof);
    exports["VkFramebufferCreateInfo_pAttachments_offsetof"] = Napi::Function::New(env, VkFramebufferCreateInfo_pAttachments_offsetof);
    exports["VkFramebufferCreateInfo_width_offsetof"] = Napi::Function::New(env, VkFramebufferCreateInfo_width_offsetof);
    exports["VkFramebufferCreateInfo_height_offsetof"] = Napi::Function::New(env, VkFramebufferCreateInfo_height_offsetof);
    exports["VkFramebufferCreateInfo_layers_offsetof"] = Napi::Function::New(env, VkFramebufferCreateInfo_layers_offsetof);
    exports["VkDrawIndirectCommand_vertexCount_offsetof"] = Napi::Function::New(env, VkDrawIndirectCommand_vertexCount_offsetof);
    exports["VkDrawIndirectCommand_instanceCount_offsetof"] = Napi::Function::New(env, VkDrawIndirectCommand_instanceCount_offsetof);
    exports["VkDrawIndirectCommand_firstVertex_offsetof"] = Napi::Function::New(env, VkDrawIndirectCommand_firstVertex_offsetof);
    exports["VkDrawIndirectCommand_firstInstance_offsetof"] = Napi::Function::New(env, VkDrawIndirectCommand_firstInstance_offsetof);
    exports["VkDrawIndexedIndirectCommand_indexCount_offsetof"] = Napi::Function::New(env, VkDrawIndexedIndirectCommand_indexCount_offsetof);
    exports["VkDrawIndexedIndirectCommand_instanceCount_offsetof"] = Napi::Function::New(env, VkDrawIndexedIndirectCommand_instanceCount_offsetof);
    exports["VkDrawIndexedIndirectCommand_firstIndex_offsetof"] = Napi::Function::New(env, VkDrawIndexedIndirectCommand_firstIndex_offsetof);
    exports["VkDrawIndexedIndirectCommand_vertexOffset_offsetof"] = Napi::Function::New(env, VkDrawIndexedIndirectCommand_vertexOffset_offsetof);
    exports["VkDrawIndexedIndirectCommand_firstInstance_offsetof"] = Napi::Function::New(env, VkDrawIndexedIndirectCommand_firstInstance_offsetof);
    exports["VkDispatchIndirectCommand_x_offsetof"] = Napi::Function::New(env, VkDispatchIndirectCommand_x_offsetof);
    exports["VkDispatchIndirectCommand_y_offsetof"] = Napi::Function::New(env, VkDispatchIndirectCommand_y_offsetof);
    exports["VkDispatchIndirectCommand_z_offsetof"] = Napi::Function::New(env, VkDispatchIndirectCommand_z_offsetof);
#ifdef VK_EXT_multi_draw
    exports["VkMultiDrawInfoEXT_firstVertex_offsetof"] = Napi::Function::New(env, VkMultiDrawInfoEXT_firstVertex_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkMultiDrawInfoEXT_vertexCount_offsetof"] = Napi::Function::New(env, VkMultiDrawInfoEXT_vertexCount_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkMultiDrawIndexedInfoEXT_firstIndex_offsetof"] = Napi::Function::New(env, VkMultiDrawIndexedInfoEXT_firstIndex_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkMultiDrawIndexedInfoEXT_indexCount_offsetof"] = Napi::Function::New(env, VkMultiDrawIndexedInfoEXT_indexCount_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkMultiDrawIndexedInfoEXT_vertexOffset_offsetof"] = Napi::Function::New(env, VkMultiDrawIndexedInfoEXT_vertexOffset_offsetof);
#endif
    exports["VkSubmitInfo_sType_offsetof"] = Napi::Function::New(env, VkSubmitInfo_sType_offsetof);
    exports["VkSubmitInfo_pNext_offsetof"] = Napi::Function::New(env, VkSubmitInfo_pNext_offsetof);
    exports["VkSubmitInfo_waitSemaphoreCount_offsetof"] = Napi::Function::New(env, VkSubmitInfo_waitSemaphoreCount_offsetof);
    exports["VkSubmitInfo_pWaitSemaphores_offsetof"] = Napi::Function::New(env, VkSubmitInfo_pWaitSemaphores_offsetof);
    exports["VkSubmitInfo_pWaitDstStageMask_offsetof"] = Napi::Function::New(env, VkSubmitInfo_pWaitDstStageMask_offsetof);
    exports["VkSubmitInfo_commandBufferCount_offsetof"] = Napi::Function::New(env, VkSubmitInfo_commandBufferCount_offsetof);
    exports["VkSubmitInfo_pCommandBuffers_offsetof"] = Napi::Function::New(env, VkSubmitInfo_pCommandBuffers_offsetof);
    exports["VkSubmitInfo_signalSemaphoreCount_offsetof"] = Napi::Function::New(env, VkSubmitInfo_signalSemaphoreCount_offsetof);
    exports["VkSubmitInfo_pSignalSemaphores_offsetof"] = Napi::Function::New(env, VkSubmitInfo_pSignalSemaphores_offsetof);
#ifdef VK_KHR_display
    exports["VkDisplayPropertiesKHR_display_offsetof"] = Napi::Function::New(env, VkDisplayPropertiesKHR_display_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPropertiesKHR_displayName_offsetof"] = Napi::Function::New(env, VkDisplayPropertiesKHR_displayName_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPropertiesKHR_physicalDimensions_offsetof"] = Napi::Function::New(env, VkDisplayPropertiesKHR_physicalDimensions_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPropertiesKHR_physicalResolution_offsetof"] = Napi::Function::New(env, VkDisplayPropertiesKHR_physicalResolution_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPropertiesKHR_supportedTransforms_offsetof"] = Napi::Function::New(env, VkDisplayPropertiesKHR_supportedTransforms_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPropertiesKHR_planeReorderPossible_offsetof"] = Napi::Function::New(env, VkDisplayPropertiesKHR_planeReorderPossible_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPropertiesKHR_persistentContent_offsetof"] = Napi::Function::New(env, VkDisplayPropertiesKHR_persistentContent_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlanePropertiesKHR_currentDisplay_offsetof"] = Napi::Function::New(env, VkDisplayPlanePropertiesKHR_currentDisplay_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlanePropertiesKHR_currentStackIndex_offsetof"] = Napi::Function::New(env, VkDisplayPlanePropertiesKHR_currentStackIndex_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayModeParametersKHR_visibleRegion_offsetof"] = Napi::Function::New(env, VkDisplayModeParametersKHR_visibleRegion_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayModeParametersKHR_refreshRate_offsetof"] = Napi::Function::New(env, VkDisplayModeParametersKHR_refreshRate_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayModePropertiesKHR_displayMode_offsetof"] = Napi::Function::New(env, VkDisplayModePropertiesKHR_displayMode_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayModePropertiesKHR_parameters_offsetof"] = Napi::Function::New(env, VkDisplayModePropertiesKHR_parameters_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayModeCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkDisplayModeCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayModeCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkDisplayModeCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayModeCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkDisplayModeCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayModeCreateInfoKHR_parameters_offsetof"] = Napi::Function::New(env, VkDisplayModeCreateInfoKHR_parameters_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlaneCapabilitiesKHR_supportedAlpha_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilitiesKHR_supportedAlpha_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlaneCapabilitiesKHR_minSrcPosition_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilitiesKHR_minSrcPosition_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlaneCapabilitiesKHR_maxSrcPosition_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilitiesKHR_maxSrcPosition_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlaneCapabilitiesKHR_minSrcExtent_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilitiesKHR_minSrcExtent_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlaneCapabilitiesKHR_maxSrcExtent_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilitiesKHR_maxSrcExtent_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlaneCapabilitiesKHR_minDstPosition_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilitiesKHR_minDstPosition_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlaneCapabilitiesKHR_maxDstPosition_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilitiesKHR_maxDstPosition_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlaneCapabilitiesKHR_minDstExtent_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilitiesKHR_minDstExtent_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplayPlaneCapabilitiesKHR_maxDstExtent_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilitiesKHR_maxDstExtent_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_displayMode_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_displayMode_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_planeIndex_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_planeIndex_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_planeStackIndex_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_planeStackIndex_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_transform_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_transform_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_globalAlpha_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_globalAlpha_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_alphaMode_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_alphaMode_offsetof);
#endif
#ifdef VK_KHR_display
    exports["VkDisplaySurfaceCreateInfoKHR_imageExtent_offsetof"] = Napi::Function::New(env, VkDisplaySurfaceCreateInfoKHR_imageExtent_offsetof);
#endif
#ifdef VK_KHR_display_swapchain
    exports["VkDisplayPresentInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkDisplayPresentInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_display_swapchain
    exports["VkDisplayPresentInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkDisplayPresentInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_display_swapchain
    exports["VkDisplayPresentInfoKHR_srcRect_offsetof"] = Napi::Function::New(env, VkDisplayPresentInfoKHR_srcRect_offsetof);
#endif
#ifdef VK_KHR_display_swapchain
    exports["VkDisplayPresentInfoKHR_dstRect_offsetof"] = Napi::Function::New(env, VkDisplayPresentInfoKHR_dstRect_offsetof);
#endif
#ifdef VK_KHR_display_swapchain
    exports["VkDisplayPresentInfoKHR_persistent_offsetof"] = Napi::Function::New(env, VkDisplayPresentInfoKHR_persistent_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_minImageCount_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_minImageCount_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_maxImageCount_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_maxImageCount_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_currentExtent_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_currentExtent_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_minImageExtent_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_minImageExtent_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_maxImageExtent_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_maxImageExtent_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_maxImageArrayLayers_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_maxImageArrayLayers_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_supportedTransforms_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_supportedTransforms_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_currentTransform_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_currentTransform_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_supportedCompositeAlpha_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_supportedCompositeAlpha_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceCapabilitiesKHR_supportedUsageFlags_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesKHR_supportedUsageFlags_offsetof);
#endif
#ifdef VK_KHR_android_surface
    exports["VkAndroidSurfaceCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkAndroidSurfaceCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_android_surface
    exports["VkAndroidSurfaceCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkAndroidSurfaceCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_android_surface
    exports["VkAndroidSurfaceCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkAndroidSurfaceCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_android_surface
    exports["VkAndroidSurfaceCreateInfoKHR_window_offsetof"] = Napi::Function::New(env, VkAndroidSurfaceCreateInfoKHR_window_offsetof);
#endif
#ifdef VK_NN_vi_surface
    exports["VkViSurfaceCreateInfoNN_sType_offsetof"] = Napi::Function::New(env, VkViSurfaceCreateInfoNN_sType_offsetof);
#endif
#ifdef VK_NN_vi_surface
    exports["VkViSurfaceCreateInfoNN_pNext_offsetof"] = Napi::Function::New(env, VkViSurfaceCreateInfoNN_pNext_offsetof);
#endif
#ifdef VK_NN_vi_surface
    exports["VkViSurfaceCreateInfoNN_flags_offsetof"] = Napi::Function::New(env, VkViSurfaceCreateInfoNN_flags_offsetof);
#endif
#ifdef VK_NN_vi_surface
    exports["VkViSurfaceCreateInfoNN_window_offsetof"] = Napi::Function::New(env, VkViSurfaceCreateInfoNN_window_offsetof);
#endif
#ifdef VK_KHR_wayland_surface
    exports["VkWaylandSurfaceCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkWaylandSurfaceCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_wayland_surface
    exports["VkWaylandSurfaceCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkWaylandSurfaceCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_wayland_surface
    exports["VkWaylandSurfaceCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkWaylandSurfaceCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_wayland_surface
    exports["VkWaylandSurfaceCreateInfoKHR_display_offsetof"] = Napi::Function::New(env, VkWaylandSurfaceCreateInfoKHR_display_offsetof);
#endif
#ifdef VK_KHR_wayland_surface
    exports["VkWaylandSurfaceCreateInfoKHR_surface_offsetof"] = Napi::Function::New(env, VkWaylandSurfaceCreateInfoKHR_surface_offsetof);
#endif
#ifdef VK_KHR_win32_surface
    exports["VkWin32SurfaceCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkWin32SurfaceCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_win32_surface
    exports["VkWin32SurfaceCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkWin32SurfaceCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_win32_surface
    exports["VkWin32SurfaceCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkWin32SurfaceCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_win32_surface
    exports["VkWin32SurfaceCreateInfoKHR_hinstance_offsetof"] = Napi::Function::New(env, VkWin32SurfaceCreateInfoKHR_hinstance_offsetof);
#endif
#ifdef VK_KHR_win32_surface
    exports["VkWin32SurfaceCreateInfoKHR_hwnd_offsetof"] = Napi::Function::New(env, VkWin32SurfaceCreateInfoKHR_hwnd_offsetof);
#endif
#ifdef VK_KHR_xlib_surface
    exports["VkXlibSurfaceCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkXlibSurfaceCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_xlib_surface
    exports["VkXlibSurfaceCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkXlibSurfaceCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_xlib_surface
    exports["VkXlibSurfaceCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkXlibSurfaceCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_xlib_surface
    exports["VkXlibSurfaceCreateInfoKHR_dpy_offsetof"] = Napi::Function::New(env, VkXlibSurfaceCreateInfoKHR_dpy_offsetof);
#endif
#ifdef VK_KHR_xlib_surface
    exports["VkXlibSurfaceCreateInfoKHR_window_offsetof"] = Napi::Function::New(env, VkXlibSurfaceCreateInfoKHR_window_offsetof);
#endif
#ifdef VK_KHR_xcb_surface
    exports["VkXcbSurfaceCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkXcbSurfaceCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_xcb_surface
    exports["VkXcbSurfaceCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkXcbSurfaceCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_xcb_surface
    exports["VkXcbSurfaceCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkXcbSurfaceCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_xcb_surface
    exports["VkXcbSurfaceCreateInfoKHR_connection_offsetof"] = Napi::Function::New(env, VkXcbSurfaceCreateInfoKHR_connection_offsetof);
#endif
#ifdef VK_KHR_xcb_surface
    exports["VkXcbSurfaceCreateInfoKHR_window_offsetof"] = Napi::Function::New(env, VkXcbSurfaceCreateInfoKHR_window_offsetof);
#endif
#ifdef VK_EXT_directfb_surface
    exports["VkDirectFBSurfaceCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDirectFBSurfaceCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_directfb_surface
    exports["VkDirectFBSurfaceCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDirectFBSurfaceCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_directfb_surface
    exports["VkDirectFBSurfaceCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkDirectFBSurfaceCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_directfb_surface
    exports["VkDirectFBSurfaceCreateInfoEXT_dfb_offsetof"] = Napi::Function::New(env, VkDirectFBSurfaceCreateInfoEXT_dfb_offsetof);
#endif
#ifdef VK_EXT_directfb_surface
    exports["VkDirectFBSurfaceCreateInfoEXT_surface_offsetof"] = Napi::Function::New(env, VkDirectFBSurfaceCreateInfoEXT_surface_offsetof);
#endif
#ifdef VK_FUCHSIA_imagepipe_surface
    exports["VkImagePipeSurfaceCreateInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkImagePipeSurfaceCreateInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_imagepipe_surface
    exports["VkImagePipeSurfaceCreateInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkImagePipeSurfaceCreateInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_imagepipe_surface
    exports["VkImagePipeSurfaceCreateInfoFUCHSIA_flags_offsetof"] = Napi::Function::New(env, VkImagePipeSurfaceCreateInfoFUCHSIA_flags_offsetof);
#endif
#ifdef VK_FUCHSIA_imagepipe_surface
    exports["VkImagePipeSurfaceCreateInfoFUCHSIA_imagePipeHandle_offsetof"] = Napi::Function::New(env, VkImagePipeSurfaceCreateInfoFUCHSIA_imagePipeHandle_offsetof);
#endif
#ifdef VK_GGP_stream_descriptor_surface
    exports["VkStreamDescriptorSurfaceCreateInfoGGP_sType_offsetof"] = Napi::Function::New(env, VkStreamDescriptorSurfaceCreateInfoGGP_sType_offsetof);
#endif
#ifdef VK_GGP_stream_descriptor_surface
    exports["VkStreamDescriptorSurfaceCreateInfoGGP_pNext_offsetof"] = Napi::Function::New(env, VkStreamDescriptorSurfaceCreateInfoGGP_pNext_offsetof);
#endif
#ifdef VK_GGP_stream_descriptor_surface
    exports["VkStreamDescriptorSurfaceCreateInfoGGP_flags_offsetof"] = Napi::Function::New(env, VkStreamDescriptorSurfaceCreateInfoGGP_flags_offsetof);
#endif
#ifdef VK_GGP_stream_descriptor_surface
    exports["VkStreamDescriptorSurfaceCreateInfoGGP_streamDescriptor_offsetof"] = Napi::Function::New(env, VkStreamDescriptorSurfaceCreateInfoGGP_streamDescriptor_offsetof);
#endif
#ifdef VK_QNX_screen_surface
    exports["VkScreenSurfaceCreateInfoQNX_sType_offsetof"] = Napi::Function::New(env, VkScreenSurfaceCreateInfoQNX_sType_offsetof);
#endif
#ifdef VK_QNX_screen_surface
    exports["VkScreenSurfaceCreateInfoQNX_pNext_offsetof"] = Napi::Function::New(env, VkScreenSurfaceCreateInfoQNX_pNext_offsetof);
#endif
#ifdef VK_QNX_screen_surface
    exports["VkScreenSurfaceCreateInfoQNX_flags_offsetof"] = Napi::Function::New(env, VkScreenSurfaceCreateInfoQNX_flags_offsetof);
#endif
#ifdef VK_QNX_screen_surface
    exports["VkScreenSurfaceCreateInfoQNX_context_offsetof"] = Napi::Function::New(env, VkScreenSurfaceCreateInfoQNX_context_offsetof);
#endif
#ifdef VK_QNX_screen_surface
    exports["VkScreenSurfaceCreateInfoQNX_window_offsetof"] = Napi::Function::New(env, VkScreenSurfaceCreateInfoQNX_window_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceFormatKHR_format_offsetof"] = Napi::Function::New(env, VkSurfaceFormatKHR_format_offsetof);
#endif
#ifdef VK_KHR_surface
    exports["VkSurfaceFormatKHR_colorSpace_offsetof"] = Napi::Function::New(env, VkSurfaceFormatKHR_colorSpace_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_surface_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_surface_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_minImageCount_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_minImageCount_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_imageFormat_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_imageFormat_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_imageColorSpace_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_imageColorSpace_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_imageExtent_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_imageExtent_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_imageArrayLayers_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_imageArrayLayers_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_imageUsage_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_imageUsage_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_imageSharingMode_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_imageSharingMode_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_queueFamilyIndexCount_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_queueFamilyIndexCount_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_pQueueFamilyIndices_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_pQueueFamilyIndices_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_preTransform_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_preTransform_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_compositeAlpha_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_compositeAlpha_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_presentMode_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_presentMode_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_clipped_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_clipped_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkSwapchainCreateInfoKHR_oldSwapchain_offsetof"] = Napi::Function::New(env, VkSwapchainCreateInfoKHR_oldSwapchain_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkPresentInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkPresentInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkPresentInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkPresentInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkPresentInfoKHR_waitSemaphoreCount_offsetof"] = Napi::Function::New(env, VkPresentInfoKHR_waitSemaphoreCount_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkPresentInfoKHR_pWaitSemaphores_offsetof"] = Napi::Function::New(env, VkPresentInfoKHR_pWaitSemaphores_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkPresentInfoKHR_swapchainCount_offsetof"] = Napi::Function::New(env, VkPresentInfoKHR_swapchainCount_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkPresentInfoKHR_pSwapchains_offsetof"] = Napi::Function::New(env, VkPresentInfoKHR_pSwapchains_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkPresentInfoKHR_pImageIndices_offsetof"] = Napi::Function::New(env, VkPresentInfoKHR_pImageIndices_offsetof);
#endif
#ifdef VK_KHR_swapchain
    exports["VkPresentInfoKHR_pResults_offsetof"] = Napi::Function::New(env, VkPresentInfoKHR_pResults_offsetof);
#endif
#ifdef VK_EXT_debug_report
    exports["VkDebugReportCallbackCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDebugReportCallbackCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_debug_report
    exports["VkDebugReportCallbackCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDebugReportCallbackCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_debug_report
    exports["VkDebugReportCallbackCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkDebugReportCallbackCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_debug_report
    exports["VkDebugReportCallbackCreateInfoEXT_pfnCallback_offsetof"] = Napi::Function::New(env, VkDebugReportCallbackCreateInfoEXT_pfnCallback_offsetof);
#endif
#ifdef VK_EXT_debug_report
    exports["VkDebugReportCallbackCreateInfoEXT_pUserData_offsetof"] = Napi::Function::New(env, VkDebugReportCallbackCreateInfoEXT_pUserData_offsetof);
#endif
#ifdef VK_EXT_validation_flags
    exports["VkValidationFlagsEXT_sType_offsetof"] = Napi::Function::New(env, VkValidationFlagsEXT_sType_offsetof);
#endif
#ifdef VK_EXT_validation_flags
    exports["VkValidationFlagsEXT_pNext_offsetof"] = Napi::Function::New(env, VkValidationFlagsEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_validation_flags
    exports["VkValidationFlagsEXT_disabledValidationCheckCount_offsetof"] = Napi::Function::New(env, VkValidationFlagsEXT_disabledValidationCheckCount_offsetof);
#endif
#ifdef VK_EXT_validation_flags
    exports["VkValidationFlagsEXT_pDisabledValidationChecks_offsetof"] = Napi::Function::New(env, VkValidationFlagsEXT_pDisabledValidationChecks_offsetof);
#endif
#ifdef VK_EXT_validation_features
    exports["VkValidationFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkValidationFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_validation_features
    exports["VkValidationFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkValidationFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_validation_features
    exports["VkValidationFeaturesEXT_enabledValidationFeatureCount_offsetof"] = Napi::Function::New(env, VkValidationFeaturesEXT_enabledValidationFeatureCount_offsetof);
#endif
#ifdef VK_EXT_validation_features
    exports["VkValidationFeaturesEXT_pEnabledValidationFeatures_offsetof"] = Napi::Function::New(env, VkValidationFeaturesEXT_pEnabledValidationFeatures_offsetof);
#endif
#ifdef VK_EXT_validation_features
    exports["VkValidationFeaturesEXT_disabledValidationFeatureCount_offsetof"] = Napi::Function::New(env, VkValidationFeaturesEXT_disabledValidationFeatureCount_offsetof);
#endif
#ifdef VK_EXT_validation_features
    exports["VkValidationFeaturesEXT_pDisabledValidationFeatures_offsetof"] = Napi::Function::New(env, VkValidationFeaturesEXT_pDisabledValidationFeatures_offsetof);
#endif
#ifdef VK_AMD_rasterization_order
    exports["VkPipelineRasterizationStateRasterizationOrderAMD_sType_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateRasterizationOrderAMD_sType_offsetof);
#endif
#ifdef VK_AMD_rasterization_order
    exports["VkPipelineRasterizationStateRasterizationOrderAMD_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateRasterizationOrderAMD_pNext_offsetof);
#endif
#ifdef VK_AMD_rasterization_order
    exports["VkPipelineRasterizationStateRasterizationOrderAMD_rasterizationOrder_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateRasterizationOrderAMD_rasterizationOrder_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectNameInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectNameInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectNameInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectNameInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectNameInfoEXT_objectType_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectNameInfoEXT_objectType_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectNameInfoEXT_object_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectNameInfoEXT_object_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectNameInfoEXT_pObjectName_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectNameInfoEXT_pObjectName_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectTagInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectTagInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectTagInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectTagInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectTagInfoEXT_objectType_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectTagInfoEXT_objectType_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectTagInfoEXT_object_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectTagInfoEXT_object_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectTagInfoEXT_tagName_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectTagInfoEXT_tagName_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectTagInfoEXT_tagSize_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectTagInfoEXT_tagSize_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerObjectTagInfoEXT_pTag_offsetof"] = Napi::Function::New(env, VkDebugMarkerObjectTagInfoEXT_pTag_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerMarkerInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDebugMarkerMarkerInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerMarkerInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDebugMarkerMarkerInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerMarkerInfoEXT_pMarkerName_offsetof"] = Napi::Function::New(env, VkDebugMarkerMarkerInfoEXT_pMarkerName_offsetof);
#endif
#ifdef VK_EXT_debug_marker
    exports["VkDebugMarkerMarkerInfoEXT_color_offsetof"] = Napi::Function::New(env, VkDebugMarkerMarkerInfoEXT_color_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationImageCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationImageCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationImageCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationImageCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationImageCreateInfoNV_dedicatedAllocation_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationImageCreateInfoNV_dedicatedAllocation_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationBufferCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationBufferCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationBufferCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationBufferCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationBufferCreateInfoNV_dedicatedAllocation_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationBufferCreateInfoNV_dedicatedAllocation_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationMemoryAllocateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationMemoryAllocateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationMemoryAllocateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationMemoryAllocateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationMemoryAllocateInfoNV_image_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationMemoryAllocateInfoNV_image_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation
    exports["VkDedicatedAllocationMemoryAllocateInfoNV_buffer_offsetof"] = Napi::Function::New(env, VkDedicatedAllocationMemoryAllocateInfoNV_buffer_offsetof);
#endif
#ifdef VK_NV_external_memory_capabilities
    exports["VkExternalImageFormatPropertiesNV_imageFormatProperties_offsetof"] = Napi::Function::New(env, VkExternalImageFormatPropertiesNV_imageFormatProperties_offsetof);
#endif
#ifdef VK_NV_external_memory_capabilities
    exports["VkExternalImageFormatPropertiesNV_externalMemoryFeatures_offsetof"] = Napi::Function::New(env, VkExternalImageFormatPropertiesNV_externalMemoryFeatures_offsetof);
#endif
#ifdef VK_NV_external_memory_capabilities
    exports["VkExternalImageFormatPropertiesNV_exportFromImportedHandleTypes_offsetof"] = Napi::Function::New(env, VkExternalImageFormatPropertiesNV_exportFromImportedHandleTypes_offsetof);
#endif
#ifdef VK_NV_external_memory_capabilities
    exports["VkExternalImageFormatPropertiesNV_compatibleHandleTypes_offsetof"] = Napi::Function::New(env, VkExternalImageFormatPropertiesNV_compatibleHandleTypes_offsetof);
#endif
#ifdef VK_NV_external_memory
    exports["VkExternalMemoryImageCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkExternalMemoryImageCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_external_memory
    exports["VkExternalMemoryImageCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkExternalMemoryImageCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_external_memory
    exports["VkExternalMemoryImageCreateInfoNV_handleTypes_offsetof"] = Napi::Function::New(env, VkExternalMemoryImageCreateInfoNV_handleTypes_offsetof);
#endif
#ifdef VK_NV_external_memory
    exports["VkExportMemoryAllocateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkExportMemoryAllocateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_external_memory
    exports["VkExportMemoryAllocateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkExportMemoryAllocateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_external_memory
    exports["VkExportMemoryAllocateInfoNV_handleTypes_offsetof"] = Napi::Function::New(env, VkExportMemoryAllocateInfoNV_handleTypes_offsetof);
#endif
#ifdef VK_NV_external_memory_win32
    exports["VkImportMemoryWin32HandleInfoNV_sType_offsetof"] = Napi::Function::New(env, VkImportMemoryWin32HandleInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_external_memory_win32
    exports["VkImportMemoryWin32HandleInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkImportMemoryWin32HandleInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_external_memory_win32
    exports["VkImportMemoryWin32HandleInfoNV_handleType_offsetof"] = Napi::Function::New(env, VkImportMemoryWin32HandleInfoNV_handleType_offsetof);
#endif
#ifdef VK_NV_external_memory_win32
    exports["VkImportMemoryWin32HandleInfoNV_handle_offsetof"] = Napi::Function::New(env, VkImportMemoryWin32HandleInfoNV_handle_offsetof);
#endif
#ifdef VK_NV_external_memory_win32
    exports["VkExportMemoryWin32HandleInfoNV_sType_offsetof"] = Napi::Function::New(env, VkExportMemoryWin32HandleInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_external_memory_win32
    exports["VkExportMemoryWin32HandleInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkExportMemoryWin32HandleInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_external_memory_win32
    exports["VkExportMemoryWin32HandleInfoNV_pAttributes_offsetof"] = Napi::Function::New(env, VkExportMemoryWin32HandleInfoNV_pAttributes_offsetof);
#endif
#ifdef VK_NV_external_memory_win32
    exports["VkExportMemoryWin32HandleInfoNV_dwAccess_offsetof"] = Napi::Function::New(env, VkExportMemoryWin32HandleInfoNV_dwAccess_offsetof);
#endif
#ifdef VK_NV_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoNV_sType_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoNV_acquireCount_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoNV_acquireCount_offsetof);
#endif
#ifdef VK_NV_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoNV_pAcquireSyncs_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoNV_pAcquireSyncs_offsetof);
#endif
#ifdef VK_NV_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoNV_pAcquireKeys_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoNV_pAcquireKeys_offsetof);
#endif
#ifdef VK_NV_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoNV_pAcquireTimeoutMilliseconds_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoNV_pAcquireTimeoutMilliseconds_offsetof);
#endif
#ifdef VK_NV_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoNV_releaseCount_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoNV_releaseCount_offsetof);
#endif
#ifdef VK_NV_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoNV_pReleaseSyncs_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoNV_pReleaseSyncs_offsetof);
#endif
#ifdef VK_NV_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoNV_pReleaseKeys_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoNV_pReleaseKeys_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_deviceGeneratedCommands_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_deviceGeneratedCommands_offsetof);
#endif
    exports["VkDevicePrivateDataCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkDevicePrivateDataCreateInfo_sType_offsetof);
    exports["VkDevicePrivateDataCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDevicePrivateDataCreateInfo_pNext_offsetof);
    exports["VkDevicePrivateDataCreateInfo_privateDataSlotRequestCount_offsetof"] = Napi::Function::New(env, VkDevicePrivateDataCreateInfo_privateDataSlotRequestCount_offsetof);

    exports["VkPrivateDataSlotCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPrivateDataSlotCreateInfo_sType_offsetof);
    exports["VkPrivateDataSlotCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPrivateDataSlotCreateInfo_pNext_offsetof);
    exports["VkPrivateDataSlotCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkPrivateDataSlotCreateInfo_flags_offsetof);

    exports["VkPhysicalDevicePrivateDataFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrivateDataFeatures_sType_offsetof);
    exports["VkPhysicalDevicePrivateDataFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrivateDataFeatures_pNext_offsetof);
    exports["VkPhysicalDevicePrivateDataFeatures_privateData_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrivateDataFeatures_privateData_offsetof);

#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxGraphicsShaderGroupCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxGraphicsShaderGroupCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectSequenceCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectSequenceCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsTokenCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsTokenCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsStreamCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsStreamCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsTokenOffset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsTokenOffset_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsStreamStride_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_maxIndirectCommandsStreamStride_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_minSequencesCountBufferOffsetAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_minSequencesCountBufferOffsetAlignment_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_minSequencesIndexBufferOffsetAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_minSequencesIndexBufferOffsetAlignment_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_minIndirectCommandsBufferOffsetAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_minIndirectCommandsBufferOffsetAlignment_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkPhysicalDeviceMultiDrawPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiDrawPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkPhysicalDeviceMultiDrawPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiDrawPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkPhysicalDeviceMultiDrawPropertiesEXT_maxMultiDrawCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiDrawPropertiesEXT_maxMultiDrawCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsShaderGroupCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkGraphicsShaderGroupCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsShaderGroupCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkGraphicsShaderGroupCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsShaderGroupCreateInfoNV_stageCount_offsetof"] = Napi::Function::New(env, VkGraphicsShaderGroupCreateInfoNV_stageCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsShaderGroupCreateInfoNV_pStages_offsetof"] = Napi::Function::New(env, VkGraphicsShaderGroupCreateInfoNV_pStages_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsShaderGroupCreateInfoNV_pVertexInputState_offsetof"] = Napi::Function::New(env, VkGraphicsShaderGroupCreateInfoNV_pVertexInputState_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsShaderGroupCreateInfoNV_pTessellationState_offsetof"] = Napi::Function::New(env, VkGraphicsShaderGroupCreateInfoNV_pTessellationState_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsPipelineShaderGroupsCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineShaderGroupsCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsPipelineShaderGroupsCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineShaderGroupsCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsPipelineShaderGroupsCreateInfoNV_groupCount_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineShaderGroupsCreateInfoNV_groupCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsPipelineShaderGroupsCreateInfoNV_pGroups_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineShaderGroupsCreateInfoNV_pGroups_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsPipelineShaderGroupsCreateInfoNV_pipelineCount_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineShaderGroupsCreateInfoNV_pipelineCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGraphicsPipelineShaderGroupsCreateInfoNV_pPipelines_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineShaderGroupsCreateInfoNV_pPipelines_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkBindShaderGroupIndirectCommandNV_groupIndex_offsetof"] = Napi::Function::New(env, VkBindShaderGroupIndirectCommandNV_groupIndex_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkBindIndexBufferIndirectCommandNV_bufferAddress_offsetof"] = Napi::Function::New(env, VkBindIndexBufferIndirectCommandNV_bufferAddress_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkBindIndexBufferIndirectCommandNV_size_offsetof"] = Napi::Function::New(env, VkBindIndexBufferIndirectCommandNV_size_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkBindIndexBufferIndirectCommandNV_indexType_offsetof"] = Napi::Function::New(env, VkBindIndexBufferIndirectCommandNV_indexType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkBindVertexBufferIndirectCommandNV_bufferAddress_offsetof"] = Napi::Function::New(env, VkBindVertexBufferIndirectCommandNV_bufferAddress_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkBindVertexBufferIndirectCommandNV_size_offsetof"] = Napi::Function::New(env, VkBindVertexBufferIndirectCommandNV_size_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkBindVertexBufferIndirectCommandNV_stride_offsetof"] = Napi::Function::New(env, VkBindVertexBufferIndirectCommandNV_stride_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkSetStateFlagsIndirectCommandNV_data_offsetof"] = Napi::Function::New(env, VkSetStateFlagsIndirectCommandNV_data_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsStreamNV_buffer_offsetof"] = Napi::Function::New(env, VkIndirectCommandsStreamNV_buffer_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsStreamNV_offset_offsetof"] = Napi::Function::New(env, VkIndirectCommandsStreamNV_offset_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_sType_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_sType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_pNext_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_tokenType_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_tokenType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_stream_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_stream_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_offset_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_offset_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_vertexBindingUnit_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_vertexBindingUnit_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_vertexDynamicStride_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_vertexDynamicStride_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_pushconstantPipelineLayout_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_pushconstantPipelineLayout_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_pushconstantShaderStageFlags_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_pushconstantShaderStageFlags_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_pushconstantOffset_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_pushconstantOffset_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_pushconstantSize_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_pushconstantSize_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_indirectStateFlags_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_indirectStateFlags_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_indexTypeCount_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_indexTypeCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_pIndexTypes_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_pIndexTypes_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutTokenNV_pIndexTypeValues_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutTokenNV_pIndexTypeValues_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutCreateInfoNV_flags_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutCreateInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutCreateInfoNV_pipelineBindPoint_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutCreateInfoNV_pipelineBindPoint_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutCreateInfoNV_tokenCount_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutCreateInfoNV_tokenCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutCreateInfoNV_pTokens_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutCreateInfoNV_pTokens_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutCreateInfoNV_streamCount_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutCreateInfoNV_streamCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkIndirectCommandsLayoutCreateInfoNV_pStreamStrides_offsetof"] = Napi::Function::New(env, VkIndirectCommandsLayoutCreateInfoNV_pStreamStrides_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_sType_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_pipelineBindPoint_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_pipelineBindPoint_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_pipeline_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_pipeline_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_indirectCommandsLayout_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_indirectCommandsLayout_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_streamCount_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_streamCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_pStreams_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_pStreams_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_sequencesCount_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_sequencesCount_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_preprocessBuffer_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_preprocessBuffer_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_preprocessOffset_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_preprocessOffset_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_preprocessSize_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_preprocessSize_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_sequencesCountBuffer_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_sequencesCountBuffer_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_sequencesCountOffset_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_sequencesCountOffset_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_sequencesIndexBuffer_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_sequencesIndexBuffer_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsInfoNV_sequencesIndexOffset_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsInfoNV_sequencesIndexOffset_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsMemoryRequirementsInfoNV_sType_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsMemoryRequirementsInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsMemoryRequirementsInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsMemoryRequirementsInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsMemoryRequirementsInfoNV_pipelineBindPoint_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsMemoryRequirementsInfoNV_pipelineBindPoint_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsMemoryRequirementsInfoNV_pipeline_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsMemoryRequirementsInfoNV_pipeline_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsMemoryRequirementsInfoNV_indirectCommandsLayout_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsMemoryRequirementsInfoNV_indirectCommandsLayout_offsetof);
#endif
#ifdef VK_NV_device_generated_commands
    exports["VkGeneratedCommandsMemoryRequirementsInfoNV_maxSequencesCount_offsetof"] = Napi::Function::New(env, VkGeneratedCommandsMemoryRequirementsInfoNV_maxSequencesCount_offsetof);
#endif
    exports["VkPhysicalDeviceFeatures2_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures2_sType_offsetof);
    exports["VkPhysicalDeviceFeatures2_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures2_pNext_offsetof);
    exports["VkPhysicalDeviceFeatures2_features_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFeatures2_features_offsetof);

    exports["VkPhysicalDeviceProperties2_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties2_sType_offsetof);
    exports["VkPhysicalDeviceProperties2_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties2_pNext_offsetof);
    exports["VkPhysicalDeviceProperties2_properties_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProperties2_properties_offsetof);

    exports["VkFormatProperties2_sType_offsetof"] = Napi::Function::New(env, VkFormatProperties2_sType_offsetof);
    exports["VkFormatProperties2_pNext_offsetof"] = Napi::Function::New(env, VkFormatProperties2_pNext_offsetof);
    exports["VkFormatProperties2_formatProperties_offsetof"] = Napi::Function::New(env, VkFormatProperties2_formatProperties_offsetof);

    exports["VkImageFormatProperties2_sType_offsetof"] = Napi::Function::New(env, VkImageFormatProperties2_sType_offsetof);
    exports["VkImageFormatProperties2_pNext_offsetof"] = Napi::Function::New(env, VkImageFormatProperties2_pNext_offsetof);
    exports["VkImageFormatProperties2_imageFormatProperties_offsetof"] = Napi::Function::New(env, VkImageFormatProperties2_imageFormatProperties_offsetof);

    exports["VkPhysicalDeviceImageFormatInfo2_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageFormatInfo2_sType_offsetof);
    exports["VkPhysicalDeviceImageFormatInfo2_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageFormatInfo2_pNext_offsetof);
    exports["VkPhysicalDeviceImageFormatInfo2_format_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageFormatInfo2_format_offsetof);
    exports["VkPhysicalDeviceImageFormatInfo2_type_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageFormatInfo2_type_offsetof);
    exports["VkPhysicalDeviceImageFormatInfo2_tiling_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageFormatInfo2_tiling_offsetof);
    exports["VkPhysicalDeviceImageFormatInfo2_usage_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageFormatInfo2_usage_offsetof);
    exports["VkPhysicalDeviceImageFormatInfo2_flags_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageFormatInfo2_flags_offsetof);

    exports["VkQueueFamilyProperties2_sType_offsetof"] = Napi::Function::New(env, VkQueueFamilyProperties2_sType_offsetof);
    exports["VkQueueFamilyProperties2_pNext_offsetof"] = Napi::Function::New(env, VkQueueFamilyProperties2_pNext_offsetof);
    exports["VkQueueFamilyProperties2_queueFamilyProperties_offsetof"] = Napi::Function::New(env, VkQueueFamilyProperties2_queueFamilyProperties_offsetof);

    exports["VkPhysicalDeviceMemoryProperties2_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryProperties2_sType_offsetof);
    exports["VkPhysicalDeviceMemoryProperties2_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryProperties2_pNext_offsetof);
    exports["VkPhysicalDeviceMemoryProperties2_memoryProperties_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryProperties2_memoryProperties_offsetof);

    exports["VkSparseImageFormatProperties2_sType_offsetof"] = Napi::Function::New(env, VkSparseImageFormatProperties2_sType_offsetof);
    exports["VkSparseImageFormatProperties2_pNext_offsetof"] = Napi::Function::New(env, VkSparseImageFormatProperties2_pNext_offsetof);
    exports["VkSparseImageFormatProperties2_properties_offsetof"] = Napi::Function::New(env, VkSparseImageFormatProperties2_properties_offsetof);

    exports["VkPhysicalDeviceSparseImageFormatInfo2_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseImageFormatInfo2_sType_offsetof);
    exports["VkPhysicalDeviceSparseImageFormatInfo2_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseImageFormatInfo2_pNext_offsetof);
    exports["VkPhysicalDeviceSparseImageFormatInfo2_format_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseImageFormatInfo2_format_offsetof);
    exports["VkPhysicalDeviceSparseImageFormatInfo2_type_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseImageFormatInfo2_type_offsetof);
    exports["VkPhysicalDeviceSparseImageFormatInfo2_samples_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseImageFormatInfo2_samples_offsetof);
    exports["VkPhysicalDeviceSparseImageFormatInfo2_usage_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseImageFormatInfo2_usage_offsetof);
    exports["VkPhysicalDeviceSparseImageFormatInfo2_tiling_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSparseImageFormatInfo2_tiling_offsetof);

#ifdef VK_KHR_push_descriptor
    exports["VkPhysicalDevicePushDescriptorPropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePushDescriptorPropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_push_descriptor
    exports["VkPhysicalDevicePushDescriptorPropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePushDescriptorPropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_push_descriptor
    exports["VkPhysicalDevicePushDescriptorPropertiesKHR_maxPushDescriptors_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePushDescriptorPropertiesKHR_maxPushDescriptors_offsetof);
#endif
    exports["VkConformanceVersion_major_offsetof"] = Napi::Function::New(env, VkConformanceVersion_major_offsetof);
    exports["VkConformanceVersion_minor_offsetof"] = Napi::Function::New(env, VkConformanceVersion_minor_offsetof);
    exports["VkConformanceVersion_subminor_offsetof"] = Napi::Function::New(env, VkConformanceVersion_subminor_offsetof);
    exports["VkConformanceVersion_patch_offsetof"] = Napi::Function::New(env, VkConformanceVersion_patch_offsetof);

    exports["VkPhysicalDeviceDriverProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDriverProperties_sType_offsetof);
    exports["VkPhysicalDeviceDriverProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDriverProperties_pNext_offsetof);
    exports["VkPhysicalDeviceDriverProperties_driverID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDriverProperties_driverID_offsetof);
    exports["VkPhysicalDeviceDriverProperties_driverName_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDriverProperties_driverName_offsetof);
    exports["VkPhysicalDeviceDriverProperties_driverInfo_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDriverProperties_driverInfo_offsetof);
    exports["VkPhysicalDeviceDriverProperties_conformanceVersion_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDriverProperties_conformanceVersion_offsetof);

#ifdef VK_KHR_incremental_present
    exports["VkPresentRegionsKHR_sType_offsetof"] = Napi::Function::New(env, VkPresentRegionsKHR_sType_offsetof);
#endif
#ifdef VK_KHR_incremental_present
    exports["VkPresentRegionsKHR_pNext_offsetof"] = Napi::Function::New(env, VkPresentRegionsKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_incremental_present
    exports["VkPresentRegionsKHR_swapchainCount_offsetof"] = Napi::Function::New(env, VkPresentRegionsKHR_swapchainCount_offsetof);
#endif
#ifdef VK_KHR_incremental_present
    exports["VkPresentRegionsKHR_pRegions_offsetof"] = Napi::Function::New(env, VkPresentRegionsKHR_pRegions_offsetof);
#endif
#ifdef VK_KHR_incremental_present
    exports["VkPresentRegionKHR_rectangleCount_offsetof"] = Napi::Function::New(env, VkPresentRegionKHR_rectangleCount_offsetof);
#endif
#ifdef VK_KHR_incremental_present
    exports["VkPresentRegionKHR_pRectangles_offsetof"] = Napi::Function::New(env, VkPresentRegionKHR_pRectangles_offsetof);
#endif
#ifdef VK_KHR_incremental_present
    exports["VkRectLayerKHR_offset_offsetof"] = Napi::Function::New(env, VkRectLayerKHR_offset_offsetof);
#endif
#ifdef VK_KHR_incremental_present
    exports["VkRectLayerKHR_extent_offsetof"] = Napi::Function::New(env, VkRectLayerKHR_extent_offsetof);
#endif
#ifdef VK_KHR_incremental_present
    exports["VkRectLayerKHR_layer_offsetof"] = Napi::Function::New(env, VkRectLayerKHR_layer_offsetof);
#endif
    exports["VkPhysicalDeviceVariablePointersFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVariablePointersFeatures_sType_offsetof);
    exports["VkPhysicalDeviceVariablePointersFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVariablePointersFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceVariablePointersFeatures_variablePointersStorageBuffer_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVariablePointersFeatures_variablePointersStorageBuffer_offsetof);
    exports["VkPhysicalDeviceVariablePointersFeatures_variablePointers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVariablePointersFeatures_variablePointers_offsetof);



    exports["VkExternalMemoryProperties_externalMemoryFeatures_offsetof"] = Napi::Function::New(env, VkExternalMemoryProperties_externalMemoryFeatures_offsetof);
    exports["VkExternalMemoryProperties_exportFromImportedHandleTypes_offsetof"] = Napi::Function::New(env, VkExternalMemoryProperties_exportFromImportedHandleTypes_offsetof);
    exports["VkExternalMemoryProperties_compatibleHandleTypes_offsetof"] = Napi::Function::New(env, VkExternalMemoryProperties_compatibleHandleTypes_offsetof);

    exports["VkPhysicalDeviceExternalImageFormatInfo_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalImageFormatInfo_sType_offsetof);
    exports["VkPhysicalDeviceExternalImageFormatInfo_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalImageFormatInfo_pNext_offsetof);
    exports["VkPhysicalDeviceExternalImageFormatInfo_handleType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalImageFormatInfo_handleType_offsetof);

    exports["VkExternalImageFormatProperties_sType_offsetof"] = Napi::Function::New(env, VkExternalImageFormatProperties_sType_offsetof);
    exports["VkExternalImageFormatProperties_pNext_offsetof"] = Napi::Function::New(env, VkExternalImageFormatProperties_pNext_offsetof);
    exports["VkExternalImageFormatProperties_externalMemoryProperties_offsetof"] = Napi::Function::New(env, VkExternalImageFormatProperties_externalMemoryProperties_offsetof);

    exports["VkPhysicalDeviceExternalBufferInfo_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalBufferInfo_sType_offsetof);
    exports["VkPhysicalDeviceExternalBufferInfo_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalBufferInfo_pNext_offsetof);
    exports["VkPhysicalDeviceExternalBufferInfo_flags_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalBufferInfo_flags_offsetof);
    exports["VkPhysicalDeviceExternalBufferInfo_usage_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalBufferInfo_usage_offsetof);
    exports["VkPhysicalDeviceExternalBufferInfo_handleType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalBufferInfo_handleType_offsetof);

    exports["VkExternalBufferProperties_sType_offsetof"] = Napi::Function::New(env, VkExternalBufferProperties_sType_offsetof);
    exports["VkExternalBufferProperties_pNext_offsetof"] = Napi::Function::New(env, VkExternalBufferProperties_pNext_offsetof);
    exports["VkExternalBufferProperties_externalMemoryProperties_offsetof"] = Napi::Function::New(env, VkExternalBufferProperties_externalMemoryProperties_offsetof);

    exports["VkPhysicalDeviceIDProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIDProperties_sType_offsetof);
    exports["VkPhysicalDeviceIDProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIDProperties_pNext_offsetof);
    exports["VkPhysicalDeviceIDProperties_deviceUUID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIDProperties_deviceUUID_offsetof);
    exports["VkPhysicalDeviceIDProperties_driverUUID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIDProperties_driverUUID_offsetof);
    exports["VkPhysicalDeviceIDProperties_deviceLUID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIDProperties_deviceLUID_offsetof);
    exports["VkPhysicalDeviceIDProperties_deviceNodeMask_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIDProperties_deviceNodeMask_offsetof);
    exports["VkPhysicalDeviceIDProperties_deviceLUIDValid_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIDProperties_deviceLUIDValid_offsetof);

    exports["VkExternalMemoryImageCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkExternalMemoryImageCreateInfo_sType_offsetof);
    exports["VkExternalMemoryImageCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkExternalMemoryImageCreateInfo_pNext_offsetof);
    exports["VkExternalMemoryImageCreateInfo_handleTypes_offsetof"] = Napi::Function::New(env, VkExternalMemoryImageCreateInfo_handleTypes_offsetof);

    exports["VkExternalMemoryBufferCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkExternalMemoryBufferCreateInfo_sType_offsetof);
    exports["VkExternalMemoryBufferCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkExternalMemoryBufferCreateInfo_pNext_offsetof);
    exports["VkExternalMemoryBufferCreateInfo_handleTypes_offsetof"] = Napi::Function::New(env, VkExternalMemoryBufferCreateInfo_handleTypes_offsetof);

    exports["VkExportMemoryAllocateInfo_sType_offsetof"] = Napi::Function::New(env, VkExportMemoryAllocateInfo_sType_offsetof);
    exports["VkExportMemoryAllocateInfo_pNext_offsetof"] = Napi::Function::New(env, VkExportMemoryAllocateInfo_pNext_offsetof);
    exports["VkExportMemoryAllocateInfo_handleTypes_offsetof"] = Napi::Function::New(env, VkExportMemoryAllocateInfo_handleTypes_offsetof);

#ifdef VK_KHR_external_memory_win32
    exports["VkImportMemoryWin32HandleInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkImportMemoryWin32HandleInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkImportMemoryWin32HandleInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkImportMemoryWin32HandleInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkImportMemoryWin32HandleInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkImportMemoryWin32HandleInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkImportMemoryWin32HandleInfoKHR_handle_offsetof"] = Napi::Function::New(env, VkImportMemoryWin32HandleInfoKHR_handle_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkImportMemoryWin32HandleInfoKHR_name_offsetof"] = Napi::Function::New(env, VkImportMemoryWin32HandleInfoKHR_name_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkExportMemoryWin32HandleInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkExportMemoryWin32HandleInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkExportMemoryWin32HandleInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkExportMemoryWin32HandleInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkExportMemoryWin32HandleInfoKHR_pAttributes_offsetof"] = Napi::Function::New(env, VkExportMemoryWin32HandleInfoKHR_pAttributes_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkExportMemoryWin32HandleInfoKHR_dwAccess_offsetof"] = Napi::Function::New(env, VkExportMemoryWin32HandleInfoKHR_dwAccess_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkExportMemoryWin32HandleInfoKHR_name_offsetof"] = Napi::Function::New(env, VkExportMemoryWin32HandleInfoKHR_name_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkImportMemoryZirconHandleInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkImportMemoryZirconHandleInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkImportMemoryZirconHandleInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkImportMemoryZirconHandleInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkImportMemoryZirconHandleInfoFUCHSIA_handleType_offsetof"] = Napi::Function::New(env, VkImportMemoryZirconHandleInfoFUCHSIA_handleType_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkImportMemoryZirconHandleInfoFUCHSIA_handle_offsetof"] = Napi::Function::New(env, VkImportMemoryZirconHandleInfoFUCHSIA_handle_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkMemoryZirconHandlePropertiesFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkMemoryZirconHandlePropertiesFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkMemoryZirconHandlePropertiesFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkMemoryZirconHandlePropertiesFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkMemoryZirconHandlePropertiesFUCHSIA_memoryTypeBits_offsetof"] = Napi::Function::New(env, VkMemoryZirconHandlePropertiesFUCHSIA_memoryTypeBits_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkMemoryGetZirconHandleInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkMemoryGetZirconHandleInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkMemoryGetZirconHandleInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkMemoryGetZirconHandleInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkMemoryGetZirconHandleInfoFUCHSIA_memory_offsetof"] = Napi::Function::New(env, VkMemoryGetZirconHandleInfoFUCHSIA_memory_offsetof);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["VkMemoryGetZirconHandleInfoFUCHSIA_handleType_offsetof"] = Napi::Function::New(env, VkMemoryGetZirconHandleInfoFUCHSIA_handleType_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkMemoryWin32HandlePropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkMemoryWin32HandlePropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkMemoryWin32HandlePropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkMemoryWin32HandlePropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkMemoryWin32HandlePropertiesKHR_memoryTypeBits_offsetof"] = Napi::Function::New(env, VkMemoryWin32HandlePropertiesKHR_memoryTypeBits_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkMemoryGetWin32HandleInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkMemoryGetWin32HandleInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkMemoryGetWin32HandleInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkMemoryGetWin32HandleInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkMemoryGetWin32HandleInfoKHR_memory_offsetof"] = Napi::Function::New(env, VkMemoryGetWin32HandleInfoKHR_memory_offsetof);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["VkMemoryGetWin32HandleInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkMemoryGetWin32HandleInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkImportMemoryFdInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkImportMemoryFdInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkImportMemoryFdInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkImportMemoryFdInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkImportMemoryFdInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkImportMemoryFdInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkImportMemoryFdInfoKHR_fd_offsetof"] = Napi::Function::New(env, VkImportMemoryFdInfoKHR_fd_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkMemoryFdPropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkMemoryFdPropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkMemoryFdPropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkMemoryFdPropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkMemoryFdPropertiesKHR_memoryTypeBits_offsetof"] = Napi::Function::New(env, VkMemoryFdPropertiesKHR_memoryTypeBits_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkMemoryGetFdInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkMemoryGetFdInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkMemoryGetFdInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkMemoryGetFdInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkMemoryGetFdInfoKHR_memory_offsetof"] = Napi::Function::New(env, VkMemoryGetFdInfoKHR_memory_offsetof);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["VkMemoryGetFdInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkMemoryGetFdInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoKHR_acquireCount_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoKHR_acquireCount_offsetof);
#endif
#ifdef VK_KHR_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoKHR_pAcquireSyncs_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoKHR_pAcquireSyncs_offsetof);
#endif
#ifdef VK_KHR_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoKHR_pAcquireKeys_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoKHR_pAcquireKeys_offsetof);
#endif
#ifdef VK_KHR_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoKHR_pAcquireTimeouts_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoKHR_pAcquireTimeouts_offsetof);
#endif
#ifdef VK_KHR_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoKHR_releaseCount_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoKHR_releaseCount_offsetof);
#endif
#ifdef VK_KHR_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoKHR_pReleaseSyncs_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoKHR_pReleaseSyncs_offsetof);
#endif
#ifdef VK_KHR_win32_keyed_mutex
    exports["VkWin32KeyedMutexAcquireReleaseInfoKHR_pReleaseKeys_offsetof"] = Napi::Function::New(env, VkWin32KeyedMutexAcquireReleaseInfoKHR_pReleaseKeys_offsetof);
#endif
    exports["VkPhysicalDeviceExternalSemaphoreInfo_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalSemaphoreInfo_sType_offsetof);
    exports["VkPhysicalDeviceExternalSemaphoreInfo_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalSemaphoreInfo_pNext_offsetof);
    exports["VkPhysicalDeviceExternalSemaphoreInfo_handleType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalSemaphoreInfo_handleType_offsetof);

    exports["VkExternalSemaphoreProperties_sType_offsetof"] = Napi::Function::New(env, VkExternalSemaphoreProperties_sType_offsetof);
    exports["VkExternalSemaphoreProperties_pNext_offsetof"] = Napi::Function::New(env, VkExternalSemaphoreProperties_pNext_offsetof);
    exports["VkExternalSemaphoreProperties_exportFromImportedHandleTypes_offsetof"] = Napi::Function::New(env, VkExternalSemaphoreProperties_exportFromImportedHandleTypes_offsetof);
    exports["VkExternalSemaphoreProperties_compatibleHandleTypes_offsetof"] = Napi::Function::New(env, VkExternalSemaphoreProperties_compatibleHandleTypes_offsetof);
    exports["VkExternalSemaphoreProperties_externalSemaphoreFeatures_offsetof"] = Napi::Function::New(env, VkExternalSemaphoreProperties_externalSemaphoreFeatures_offsetof);

    exports["VkExportSemaphoreCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkExportSemaphoreCreateInfo_sType_offsetof);
    exports["VkExportSemaphoreCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkExportSemaphoreCreateInfo_pNext_offsetof);
    exports["VkExportSemaphoreCreateInfo_handleTypes_offsetof"] = Napi::Function::New(env, VkExportSemaphoreCreateInfo_handleTypes_offsetof);

#ifdef VK_KHR_external_semaphore_win32
    exports["VkImportSemaphoreWin32HandleInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkImportSemaphoreWin32HandleInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkImportSemaphoreWin32HandleInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkImportSemaphoreWin32HandleInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkImportSemaphoreWin32HandleInfoKHR_semaphore_offsetof"] = Napi::Function::New(env, VkImportSemaphoreWin32HandleInfoKHR_semaphore_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkImportSemaphoreWin32HandleInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkImportSemaphoreWin32HandleInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkImportSemaphoreWin32HandleInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkImportSemaphoreWin32HandleInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkImportSemaphoreWin32HandleInfoKHR_handle_offsetof"] = Napi::Function::New(env, VkImportSemaphoreWin32HandleInfoKHR_handle_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkImportSemaphoreWin32HandleInfoKHR_name_offsetof"] = Napi::Function::New(env, VkImportSemaphoreWin32HandleInfoKHR_name_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkExportSemaphoreWin32HandleInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkExportSemaphoreWin32HandleInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkExportSemaphoreWin32HandleInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkExportSemaphoreWin32HandleInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkExportSemaphoreWin32HandleInfoKHR_pAttributes_offsetof"] = Napi::Function::New(env, VkExportSemaphoreWin32HandleInfoKHR_pAttributes_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkExportSemaphoreWin32HandleInfoKHR_dwAccess_offsetof"] = Napi::Function::New(env, VkExportSemaphoreWin32HandleInfoKHR_dwAccess_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkExportSemaphoreWin32HandleInfoKHR_name_offsetof"] = Napi::Function::New(env, VkExportSemaphoreWin32HandleInfoKHR_name_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkD3D12FenceSubmitInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkD3D12FenceSubmitInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkD3D12FenceSubmitInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkD3D12FenceSubmitInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkD3D12FenceSubmitInfoKHR_waitSemaphoreValuesCount_offsetof"] = Napi::Function::New(env, VkD3D12FenceSubmitInfoKHR_waitSemaphoreValuesCount_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkD3D12FenceSubmitInfoKHR_pWaitSemaphoreValues_offsetof"] = Napi::Function::New(env, VkD3D12FenceSubmitInfoKHR_pWaitSemaphoreValues_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkD3D12FenceSubmitInfoKHR_signalSemaphoreValuesCount_offsetof"] = Napi::Function::New(env, VkD3D12FenceSubmitInfoKHR_signalSemaphoreValuesCount_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkD3D12FenceSubmitInfoKHR_pSignalSemaphoreValues_offsetof"] = Napi::Function::New(env, VkD3D12FenceSubmitInfoKHR_pSignalSemaphoreValues_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkSemaphoreGetWin32HandleInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkSemaphoreGetWin32HandleInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkSemaphoreGetWin32HandleInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkSemaphoreGetWin32HandleInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkSemaphoreGetWin32HandleInfoKHR_semaphore_offsetof"] = Napi::Function::New(env, VkSemaphoreGetWin32HandleInfoKHR_semaphore_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["VkSemaphoreGetWin32HandleInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkSemaphoreGetWin32HandleInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkImportSemaphoreFdInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkImportSemaphoreFdInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkImportSemaphoreFdInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkImportSemaphoreFdInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkImportSemaphoreFdInfoKHR_semaphore_offsetof"] = Napi::Function::New(env, VkImportSemaphoreFdInfoKHR_semaphore_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkImportSemaphoreFdInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkImportSemaphoreFdInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkImportSemaphoreFdInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkImportSemaphoreFdInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkImportSemaphoreFdInfoKHR_fd_offsetof"] = Napi::Function::New(env, VkImportSemaphoreFdInfoKHR_fd_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkSemaphoreGetFdInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkSemaphoreGetFdInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkSemaphoreGetFdInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkSemaphoreGetFdInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkSemaphoreGetFdInfoKHR_semaphore_offsetof"] = Napi::Function::New(env, VkSemaphoreGetFdInfoKHR_semaphore_offsetof);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["VkSemaphoreGetFdInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkSemaphoreGetFdInfoKHR_handleType_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkImportSemaphoreZirconHandleInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkImportSemaphoreZirconHandleInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkImportSemaphoreZirconHandleInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkImportSemaphoreZirconHandleInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkImportSemaphoreZirconHandleInfoFUCHSIA_semaphore_offsetof"] = Napi::Function::New(env, VkImportSemaphoreZirconHandleInfoFUCHSIA_semaphore_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkImportSemaphoreZirconHandleInfoFUCHSIA_flags_offsetof"] = Napi::Function::New(env, VkImportSemaphoreZirconHandleInfoFUCHSIA_flags_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkImportSemaphoreZirconHandleInfoFUCHSIA_handleType_offsetof"] = Napi::Function::New(env, VkImportSemaphoreZirconHandleInfoFUCHSIA_handleType_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkImportSemaphoreZirconHandleInfoFUCHSIA_zirconHandle_offsetof"] = Napi::Function::New(env, VkImportSemaphoreZirconHandleInfoFUCHSIA_zirconHandle_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkSemaphoreGetZirconHandleInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkSemaphoreGetZirconHandleInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkSemaphoreGetZirconHandleInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkSemaphoreGetZirconHandleInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkSemaphoreGetZirconHandleInfoFUCHSIA_semaphore_offsetof"] = Napi::Function::New(env, VkSemaphoreGetZirconHandleInfoFUCHSIA_semaphore_offsetof);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["VkSemaphoreGetZirconHandleInfoFUCHSIA_handleType_offsetof"] = Napi::Function::New(env, VkSemaphoreGetZirconHandleInfoFUCHSIA_handleType_offsetof);
#endif
    exports["VkPhysicalDeviceExternalFenceInfo_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalFenceInfo_sType_offsetof);
    exports["VkPhysicalDeviceExternalFenceInfo_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalFenceInfo_pNext_offsetof);
    exports["VkPhysicalDeviceExternalFenceInfo_handleType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalFenceInfo_handleType_offsetof);

    exports["VkExternalFenceProperties_sType_offsetof"] = Napi::Function::New(env, VkExternalFenceProperties_sType_offsetof);
    exports["VkExternalFenceProperties_pNext_offsetof"] = Napi::Function::New(env, VkExternalFenceProperties_pNext_offsetof);
    exports["VkExternalFenceProperties_exportFromImportedHandleTypes_offsetof"] = Napi::Function::New(env, VkExternalFenceProperties_exportFromImportedHandleTypes_offsetof);
    exports["VkExternalFenceProperties_compatibleHandleTypes_offsetof"] = Napi::Function::New(env, VkExternalFenceProperties_compatibleHandleTypes_offsetof);
    exports["VkExternalFenceProperties_externalFenceFeatures_offsetof"] = Napi::Function::New(env, VkExternalFenceProperties_externalFenceFeatures_offsetof);

    exports["VkExportFenceCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkExportFenceCreateInfo_sType_offsetof);
    exports["VkExportFenceCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkExportFenceCreateInfo_pNext_offsetof);
    exports["VkExportFenceCreateInfo_handleTypes_offsetof"] = Napi::Function::New(env, VkExportFenceCreateInfo_handleTypes_offsetof);

#ifdef VK_KHR_external_fence_win32
    exports["VkImportFenceWin32HandleInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkImportFenceWin32HandleInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkImportFenceWin32HandleInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkImportFenceWin32HandleInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkImportFenceWin32HandleInfoKHR_fence_offsetof"] = Napi::Function::New(env, VkImportFenceWin32HandleInfoKHR_fence_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkImportFenceWin32HandleInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkImportFenceWin32HandleInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkImportFenceWin32HandleInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkImportFenceWin32HandleInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkImportFenceWin32HandleInfoKHR_handle_offsetof"] = Napi::Function::New(env, VkImportFenceWin32HandleInfoKHR_handle_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkImportFenceWin32HandleInfoKHR_name_offsetof"] = Napi::Function::New(env, VkImportFenceWin32HandleInfoKHR_name_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkExportFenceWin32HandleInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkExportFenceWin32HandleInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkExportFenceWin32HandleInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkExportFenceWin32HandleInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkExportFenceWin32HandleInfoKHR_pAttributes_offsetof"] = Napi::Function::New(env, VkExportFenceWin32HandleInfoKHR_pAttributes_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkExportFenceWin32HandleInfoKHR_dwAccess_offsetof"] = Napi::Function::New(env, VkExportFenceWin32HandleInfoKHR_dwAccess_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkExportFenceWin32HandleInfoKHR_name_offsetof"] = Napi::Function::New(env, VkExportFenceWin32HandleInfoKHR_name_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkFenceGetWin32HandleInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkFenceGetWin32HandleInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkFenceGetWin32HandleInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkFenceGetWin32HandleInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkFenceGetWin32HandleInfoKHR_fence_offsetof"] = Napi::Function::New(env, VkFenceGetWin32HandleInfoKHR_fence_offsetof);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["VkFenceGetWin32HandleInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkFenceGetWin32HandleInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkImportFenceFdInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkImportFenceFdInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkImportFenceFdInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkImportFenceFdInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkImportFenceFdInfoKHR_fence_offsetof"] = Napi::Function::New(env, VkImportFenceFdInfoKHR_fence_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkImportFenceFdInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkImportFenceFdInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkImportFenceFdInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkImportFenceFdInfoKHR_handleType_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkImportFenceFdInfoKHR_fd_offsetof"] = Napi::Function::New(env, VkImportFenceFdInfoKHR_fd_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkFenceGetFdInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkFenceGetFdInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkFenceGetFdInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkFenceGetFdInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkFenceGetFdInfoKHR_fence_offsetof"] = Napi::Function::New(env, VkFenceGetFdInfoKHR_fence_offsetof);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["VkFenceGetFdInfoKHR_handleType_offsetof"] = Napi::Function::New(env, VkFenceGetFdInfoKHR_handleType_offsetof);
#endif
    exports["VkPhysicalDeviceMultiviewFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewFeatures_sType_offsetof);
    exports["VkPhysicalDeviceMultiviewFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceMultiviewFeatures_multiview_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewFeatures_multiview_offsetof);
    exports["VkPhysicalDeviceMultiviewFeatures_multiviewGeometryShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewFeatures_multiviewGeometryShader_offsetof);
    exports["VkPhysicalDeviceMultiviewFeatures_multiviewTessellationShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewFeatures_multiviewTessellationShader_offsetof);

    exports["VkPhysicalDeviceMultiviewProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewProperties_sType_offsetof);
    exports["VkPhysicalDeviceMultiviewProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewProperties_pNext_offsetof);
    exports["VkPhysicalDeviceMultiviewProperties_maxMultiviewViewCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewProperties_maxMultiviewViewCount_offsetof);
    exports["VkPhysicalDeviceMultiviewProperties_maxMultiviewInstanceIndex_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewProperties_maxMultiviewInstanceIndex_offsetof);

    exports["VkRenderPassMultiviewCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkRenderPassMultiviewCreateInfo_sType_offsetof);
    exports["VkRenderPassMultiviewCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassMultiviewCreateInfo_pNext_offsetof);
    exports["VkRenderPassMultiviewCreateInfo_subpassCount_offsetof"] = Napi::Function::New(env, VkRenderPassMultiviewCreateInfo_subpassCount_offsetof);
    exports["VkRenderPassMultiviewCreateInfo_pViewMasks_offsetof"] = Napi::Function::New(env, VkRenderPassMultiviewCreateInfo_pViewMasks_offsetof);
    exports["VkRenderPassMultiviewCreateInfo_dependencyCount_offsetof"] = Napi::Function::New(env, VkRenderPassMultiviewCreateInfo_dependencyCount_offsetof);
    exports["VkRenderPassMultiviewCreateInfo_pViewOffsets_offsetof"] = Napi::Function::New(env, VkRenderPassMultiviewCreateInfo_pViewOffsets_offsetof);
    exports["VkRenderPassMultiviewCreateInfo_correlationMaskCount_offsetof"] = Napi::Function::New(env, VkRenderPassMultiviewCreateInfo_correlationMaskCount_offsetof);
    exports["VkRenderPassMultiviewCreateInfo_pCorrelationMasks_offsetof"] = Napi::Function::New(env, VkRenderPassMultiviewCreateInfo_pCorrelationMasks_offsetof);

#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_sType_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_sType_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_pNext_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_pNext_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_minImageCount_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_minImageCount_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_maxImageCount_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_maxImageCount_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_currentExtent_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_currentExtent_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_minImageExtent_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_minImageExtent_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_maxImageExtent_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_maxImageExtent_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_maxImageArrayLayers_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_maxImageArrayLayers_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_supportedTransforms_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_supportedTransforms_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_currentTransform_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_currentTransform_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_supportedCompositeAlpha_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_supportedCompositeAlpha_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_supportedUsageFlags_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_supportedUsageFlags_offsetof);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["VkSurfaceCapabilities2EXT_supportedSurfaceCounters_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2EXT_supportedSurfaceCounters_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkDisplayPowerInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDisplayPowerInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkDisplayPowerInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDisplayPowerInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkDisplayPowerInfoEXT_powerState_offsetof"] = Napi::Function::New(env, VkDisplayPowerInfoEXT_powerState_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkDeviceEventInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDeviceEventInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkDeviceEventInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDeviceEventInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkDeviceEventInfoEXT_deviceEvent_offsetof"] = Napi::Function::New(env, VkDeviceEventInfoEXT_deviceEvent_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkDisplayEventInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDisplayEventInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkDisplayEventInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDisplayEventInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkDisplayEventInfoEXT_displayEvent_offsetof"] = Napi::Function::New(env, VkDisplayEventInfoEXT_displayEvent_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkSwapchainCounterCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkSwapchainCounterCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkSwapchainCounterCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkSwapchainCounterCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_display_control
    exports["VkSwapchainCounterCreateInfoEXT_surfaceCounters_offsetof"] = Napi::Function::New(env, VkSwapchainCounterCreateInfoEXT_surfaceCounters_offsetof);
#endif
    exports["VkPhysicalDeviceGroupProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGroupProperties_sType_offsetof);
    exports["VkPhysicalDeviceGroupProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGroupProperties_pNext_offsetof);
    exports["VkPhysicalDeviceGroupProperties_physicalDeviceCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGroupProperties_physicalDeviceCount_offsetof);
    exports["VkPhysicalDeviceGroupProperties_physicalDevices_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGroupProperties_physicalDevices_offsetof);
    exports["VkPhysicalDeviceGroupProperties_subsetAllocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGroupProperties_subsetAllocation_offsetof);

    exports["VkMemoryAllocateFlagsInfo_sType_offsetof"] = Napi::Function::New(env, VkMemoryAllocateFlagsInfo_sType_offsetof);
    exports["VkMemoryAllocateFlagsInfo_pNext_offsetof"] = Napi::Function::New(env, VkMemoryAllocateFlagsInfo_pNext_offsetof);
    exports["VkMemoryAllocateFlagsInfo_flags_offsetof"] = Napi::Function::New(env, VkMemoryAllocateFlagsInfo_flags_offsetof);
    exports["VkMemoryAllocateFlagsInfo_deviceMask_offsetof"] = Napi::Function::New(env, VkMemoryAllocateFlagsInfo_deviceMask_offsetof);

    exports["VkBindBufferMemoryInfo_sType_offsetof"] = Napi::Function::New(env, VkBindBufferMemoryInfo_sType_offsetof);
    exports["VkBindBufferMemoryInfo_pNext_offsetof"] = Napi::Function::New(env, VkBindBufferMemoryInfo_pNext_offsetof);
    exports["VkBindBufferMemoryInfo_buffer_offsetof"] = Napi::Function::New(env, VkBindBufferMemoryInfo_buffer_offsetof);
    exports["VkBindBufferMemoryInfo_memory_offsetof"] = Napi::Function::New(env, VkBindBufferMemoryInfo_memory_offsetof);
    exports["VkBindBufferMemoryInfo_memoryOffset_offsetof"] = Napi::Function::New(env, VkBindBufferMemoryInfo_memoryOffset_offsetof);

    exports["VkBindBufferMemoryDeviceGroupInfo_sType_offsetof"] = Napi::Function::New(env, VkBindBufferMemoryDeviceGroupInfo_sType_offsetof);
    exports["VkBindBufferMemoryDeviceGroupInfo_pNext_offsetof"] = Napi::Function::New(env, VkBindBufferMemoryDeviceGroupInfo_pNext_offsetof);
    exports["VkBindBufferMemoryDeviceGroupInfo_deviceIndexCount_offsetof"] = Napi::Function::New(env, VkBindBufferMemoryDeviceGroupInfo_deviceIndexCount_offsetof);
    exports["VkBindBufferMemoryDeviceGroupInfo_pDeviceIndices_offsetof"] = Napi::Function::New(env, VkBindBufferMemoryDeviceGroupInfo_pDeviceIndices_offsetof);

    exports["VkBindImageMemoryInfo_sType_offsetof"] = Napi::Function::New(env, VkBindImageMemoryInfo_sType_offsetof);
    exports["VkBindImageMemoryInfo_pNext_offsetof"] = Napi::Function::New(env, VkBindImageMemoryInfo_pNext_offsetof);
    exports["VkBindImageMemoryInfo_image_offsetof"] = Napi::Function::New(env, VkBindImageMemoryInfo_image_offsetof);
    exports["VkBindImageMemoryInfo_memory_offsetof"] = Napi::Function::New(env, VkBindImageMemoryInfo_memory_offsetof);
    exports["VkBindImageMemoryInfo_memoryOffset_offsetof"] = Napi::Function::New(env, VkBindImageMemoryInfo_memoryOffset_offsetof);

    exports["VkBindImageMemoryDeviceGroupInfo_sType_offsetof"] = Napi::Function::New(env, VkBindImageMemoryDeviceGroupInfo_sType_offsetof);
    exports["VkBindImageMemoryDeviceGroupInfo_pNext_offsetof"] = Napi::Function::New(env, VkBindImageMemoryDeviceGroupInfo_pNext_offsetof);
    exports["VkBindImageMemoryDeviceGroupInfo_deviceIndexCount_offsetof"] = Napi::Function::New(env, VkBindImageMemoryDeviceGroupInfo_deviceIndexCount_offsetof);
    exports["VkBindImageMemoryDeviceGroupInfo_pDeviceIndices_offsetof"] = Napi::Function::New(env, VkBindImageMemoryDeviceGroupInfo_pDeviceIndices_offsetof);
    exports["VkBindImageMemoryDeviceGroupInfo_splitInstanceBindRegionCount_offsetof"] = Napi::Function::New(env, VkBindImageMemoryDeviceGroupInfo_splitInstanceBindRegionCount_offsetof);
    exports["VkBindImageMemoryDeviceGroupInfo_pSplitInstanceBindRegions_offsetof"] = Napi::Function::New(env, VkBindImageMemoryDeviceGroupInfo_pSplitInstanceBindRegions_offsetof);

    exports["VkDeviceGroupRenderPassBeginInfo_sType_offsetof"] = Napi::Function::New(env, VkDeviceGroupRenderPassBeginInfo_sType_offsetof);
    exports["VkDeviceGroupRenderPassBeginInfo_pNext_offsetof"] = Napi::Function::New(env, VkDeviceGroupRenderPassBeginInfo_pNext_offsetof);
    exports["VkDeviceGroupRenderPassBeginInfo_deviceMask_offsetof"] = Napi::Function::New(env, VkDeviceGroupRenderPassBeginInfo_deviceMask_offsetof);
    exports["VkDeviceGroupRenderPassBeginInfo_deviceRenderAreaCount_offsetof"] = Napi::Function::New(env, VkDeviceGroupRenderPassBeginInfo_deviceRenderAreaCount_offsetof);
    exports["VkDeviceGroupRenderPassBeginInfo_pDeviceRenderAreas_offsetof"] = Napi::Function::New(env, VkDeviceGroupRenderPassBeginInfo_pDeviceRenderAreas_offsetof);

    exports["VkDeviceGroupCommandBufferBeginInfo_sType_offsetof"] = Napi::Function::New(env, VkDeviceGroupCommandBufferBeginInfo_sType_offsetof);
    exports["VkDeviceGroupCommandBufferBeginInfo_pNext_offsetof"] = Napi::Function::New(env, VkDeviceGroupCommandBufferBeginInfo_pNext_offsetof);
    exports["VkDeviceGroupCommandBufferBeginInfo_deviceMask_offsetof"] = Napi::Function::New(env, VkDeviceGroupCommandBufferBeginInfo_deviceMask_offsetof);

    exports["VkDeviceGroupSubmitInfo_sType_offsetof"] = Napi::Function::New(env, VkDeviceGroupSubmitInfo_sType_offsetof);
    exports["VkDeviceGroupSubmitInfo_pNext_offsetof"] = Napi::Function::New(env, VkDeviceGroupSubmitInfo_pNext_offsetof);
    exports["VkDeviceGroupSubmitInfo_waitSemaphoreCount_offsetof"] = Napi::Function::New(env, VkDeviceGroupSubmitInfo_waitSemaphoreCount_offsetof);
    exports["VkDeviceGroupSubmitInfo_pWaitSemaphoreDeviceIndices_offsetof"] = Napi::Function::New(env, VkDeviceGroupSubmitInfo_pWaitSemaphoreDeviceIndices_offsetof);
    exports["VkDeviceGroupSubmitInfo_commandBufferCount_offsetof"] = Napi::Function::New(env, VkDeviceGroupSubmitInfo_commandBufferCount_offsetof);
    exports["VkDeviceGroupSubmitInfo_pCommandBufferDeviceMasks_offsetof"] = Napi::Function::New(env, VkDeviceGroupSubmitInfo_pCommandBufferDeviceMasks_offsetof);
    exports["VkDeviceGroupSubmitInfo_signalSemaphoreCount_offsetof"] = Napi::Function::New(env, VkDeviceGroupSubmitInfo_signalSemaphoreCount_offsetof);
    exports["VkDeviceGroupSubmitInfo_pSignalSemaphoreDeviceIndices_offsetof"] = Napi::Function::New(env, VkDeviceGroupSubmitInfo_pSignalSemaphoreDeviceIndices_offsetof);

    exports["VkDeviceGroupBindSparseInfo_sType_offsetof"] = Napi::Function::New(env, VkDeviceGroupBindSparseInfo_sType_offsetof);
    exports["VkDeviceGroupBindSparseInfo_pNext_offsetof"] = Napi::Function::New(env, VkDeviceGroupBindSparseInfo_pNext_offsetof);
    exports["VkDeviceGroupBindSparseInfo_resourceDeviceIndex_offsetof"] = Napi::Function::New(env, VkDeviceGroupBindSparseInfo_resourceDeviceIndex_offsetof);
    exports["VkDeviceGroupBindSparseInfo_memoryDeviceIndex_offsetof"] = Napi::Function::New(env, VkDeviceGroupBindSparseInfo_memoryDeviceIndex_offsetof);

#ifdef VK_KHR_device_group
    exports["VkDeviceGroupPresentCapabilitiesKHR_sType_offsetof"] = Napi::Function::New(env, VkDeviceGroupPresentCapabilitiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupPresentCapabilitiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkDeviceGroupPresentCapabilitiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupPresentCapabilitiesKHR_presentMask_offsetof"] = Napi::Function::New(env, VkDeviceGroupPresentCapabilitiesKHR_presentMask_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupPresentCapabilitiesKHR_modes_offsetof"] = Napi::Function::New(env, VkDeviceGroupPresentCapabilitiesKHR_modes_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkImageSwapchainCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkImageSwapchainCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkImageSwapchainCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkImageSwapchainCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkImageSwapchainCreateInfoKHR_swapchain_offsetof"] = Napi::Function::New(env, VkImageSwapchainCreateInfoKHR_swapchain_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkBindImageMemorySwapchainInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkBindImageMemorySwapchainInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkBindImageMemorySwapchainInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkBindImageMemorySwapchainInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkBindImageMemorySwapchainInfoKHR_swapchain_offsetof"] = Napi::Function::New(env, VkBindImageMemorySwapchainInfoKHR_swapchain_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkBindImageMemorySwapchainInfoKHR_imageIndex_offsetof"] = Napi::Function::New(env, VkBindImageMemorySwapchainInfoKHR_imageIndex_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkAcquireNextImageInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkAcquireNextImageInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkAcquireNextImageInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkAcquireNextImageInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkAcquireNextImageInfoKHR_swapchain_offsetof"] = Napi::Function::New(env, VkAcquireNextImageInfoKHR_swapchain_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkAcquireNextImageInfoKHR_timeout_offsetof"] = Napi::Function::New(env, VkAcquireNextImageInfoKHR_timeout_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkAcquireNextImageInfoKHR_semaphore_offsetof"] = Napi::Function::New(env, VkAcquireNextImageInfoKHR_semaphore_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkAcquireNextImageInfoKHR_fence_offsetof"] = Napi::Function::New(env, VkAcquireNextImageInfoKHR_fence_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkAcquireNextImageInfoKHR_deviceMask_offsetof"] = Napi::Function::New(env, VkAcquireNextImageInfoKHR_deviceMask_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupPresentInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkDeviceGroupPresentInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupPresentInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkDeviceGroupPresentInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupPresentInfoKHR_swapchainCount_offsetof"] = Napi::Function::New(env, VkDeviceGroupPresentInfoKHR_swapchainCount_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupPresentInfoKHR_pDeviceMasks_offsetof"] = Napi::Function::New(env, VkDeviceGroupPresentInfoKHR_pDeviceMasks_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupPresentInfoKHR_mode_offsetof"] = Napi::Function::New(env, VkDeviceGroupPresentInfoKHR_mode_offsetof);
#endif
    exports["VkDeviceGroupDeviceCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkDeviceGroupDeviceCreateInfo_sType_offsetof);
    exports["VkDeviceGroupDeviceCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDeviceGroupDeviceCreateInfo_pNext_offsetof);
    exports["VkDeviceGroupDeviceCreateInfo_physicalDeviceCount_offsetof"] = Napi::Function::New(env, VkDeviceGroupDeviceCreateInfo_physicalDeviceCount_offsetof);
    exports["VkDeviceGroupDeviceCreateInfo_pPhysicalDevices_offsetof"] = Napi::Function::New(env, VkDeviceGroupDeviceCreateInfo_pPhysicalDevices_offsetof);

#ifdef VK_KHR_device_group
    exports["VkDeviceGroupSwapchainCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkDeviceGroupSwapchainCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupSwapchainCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkDeviceGroupSwapchainCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_device_group
    exports["VkDeviceGroupSwapchainCreateInfoKHR_modes_offsetof"] = Napi::Function::New(env, VkDeviceGroupSwapchainCreateInfoKHR_modes_offsetof);
#endif
    exports["VkDescriptorUpdateTemplateEntry_dstBinding_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateEntry_dstBinding_offsetof);
    exports["VkDescriptorUpdateTemplateEntry_dstArrayElement_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateEntry_dstArrayElement_offsetof);
    exports["VkDescriptorUpdateTemplateEntry_descriptorCount_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateEntry_descriptorCount_offsetof);
    exports["VkDescriptorUpdateTemplateEntry_descriptorType_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateEntry_descriptorType_offsetof);
    exports["VkDescriptorUpdateTemplateEntry_offset_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateEntry_offset_offsetof);
    exports["VkDescriptorUpdateTemplateEntry_stride_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateEntry_stride_offsetof);

    exports["VkDescriptorUpdateTemplateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_sType_offsetof);
    exports["VkDescriptorUpdateTemplateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_pNext_offsetof);
    exports["VkDescriptorUpdateTemplateCreateInfo_flags_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_flags_offsetof);
    exports["VkDescriptorUpdateTemplateCreateInfo_descriptorUpdateEntryCount_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_descriptorUpdateEntryCount_offsetof);
    exports["VkDescriptorUpdateTemplateCreateInfo_pDescriptorUpdateEntries_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_pDescriptorUpdateEntries_offsetof);
    exports["VkDescriptorUpdateTemplateCreateInfo_templateType_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_templateType_offsetof);
    exports["VkDescriptorUpdateTemplateCreateInfo_descriptorSetLayout_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_descriptorSetLayout_offsetof);
    exports["VkDescriptorUpdateTemplateCreateInfo_pipelineBindPoint_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_pipelineBindPoint_offsetof);
    exports["VkDescriptorUpdateTemplateCreateInfo_pipelineLayout_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_pipelineLayout_offsetof);
    exports["VkDescriptorUpdateTemplateCreateInfo_set_offsetof"] = Napi::Function::New(env, VkDescriptorUpdateTemplateCreateInfo_set_offsetof);

#ifdef VK_EXT_hdr_metadata
    exports["VkXYColorEXT_x_offsetof"] = Napi::Function::New(env, VkXYColorEXT_x_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkXYColorEXT_y_offsetof"] = Napi::Function::New(env, VkXYColorEXT_y_offsetof);
#endif
#ifdef VK_KHR_present_id
    exports["VkPhysicalDevicePresentIdFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentIdFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_present_id
    exports["VkPhysicalDevicePresentIdFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentIdFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_present_id
    exports["VkPhysicalDevicePresentIdFeaturesKHR_presentId_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentIdFeaturesKHR_presentId_offsetof);
#endif
#ifdef VK_KHR_present_id
    exports["VkPresentIdKHR_sType_offsetof"] = Napi::Function::New(env, VkPresentIdKHR_sType_offsetof);
#endif
#ifdef VK_KHR_present_id
    exports["VkPresentIdKHR_pNext_offsetof"] = Napi::Function::New(env, VkPresentIdKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_present_id
    exports["VkPresentIdKHR_swapchainCount_offsetof"] = Napi::Function::New(env, VkPresentIdKHR_swapchainCount_offsetof);
#endif
#ifdef VK_KHR_present_id
    exports["VkPresentIdKHR_pPresentIds_offsetof"] = Napi::Function::New(env, VkPresentIdKHR_pPresentIds_offsetof);
#endif
#ifdef VK_KHR_present_wait
    exports["VkPhysicalDevicePresentWaitFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentWaitFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_present_wait
    exports["VkPhysicalDevicePresentWaitFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentWaitFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_present_wait
    exports["VkPhysicalDevicePresentWaitFeaturesKHR_presentWait_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentWaitFeaturesKHR_presentWait_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_sType_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_sType_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_pNext_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_displayPrimaryRed_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_displayPrimaryRed_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_displayPrimaryGreen_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_displayPrimaryGreen_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_displayPrimaryBlue_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_displayPrimaryBlue_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_whitePoint_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_whitePoint_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_maxLuminance_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_maxLuminance_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_minLuminance_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_minLuminance_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_maxContentLightLevel_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_maxContentLightLevel_offsetof);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["VkHdrMetadataEXT_maxFrameAverageLightLevel_offsetof"] = Napi::Function::New(env, VkHdrMetadataEXT_maxFrameAverageLightLevel_offsetof);
#endif
#ifdef VK_AMD_display_native_hdr
    exports["VkDisplayNativeHdrSurfaceCapabilitiesAMD_sType_offsetof"] = Napi::Function::New(env, VkDisplayNativeHdrSurfaceCapabilitiesAMD_sType_offsetof);
#endif
#ifdef VK_AMD_display_native_hdr
    exports["VkDisplayNativeHdrSurfaceCapabilitiesAMD_pNext_offsetof"] = Napi::Function::New(env, VkDisplayNativeHdrSurfaceCapabilitiesAMD_pNext_offsetof);
#endif
#ifdef VK_AMD_display_native_hdr
    exports["VkDisplayNativeHdrSurfaceCapabilitiesAMD_localDimmingSupport_offsetof"] = Napi::Function::New(env, VkDisplayNativeHdrSurfaceCapabilitiesAMD_localDimmingSupport_offsetof);
#endif
#ifdef VK_AMD_display_native_hdr
    exports["VkSwapchainDisplayNativeHdrCreateInfoAMD_sType_offsetof"] = Napi::Function::New(env, VkSwapchainDisplayNativeHdrCreateInfoAMD_sType_offsetof);
#endif
#ifdef VK_AMD_display_native_hdr
    exports["VkSwapchainDisplayNativeHdrCreateInfoAMD_pNext_offsetof"] = Napi::Function::New(env, VkSwapchainDisplayNativeHdrCreateInfoAMD_pNext_offsetof);
#endif
#ifdef VK_AMD_display_native_hdr
    exports["VkSwapchainDisplayNativeHdrCreateInfoAMD_localDimmingEnable_offsetof"] = Napi::Function::New(env, VkSwapchainDisplayNativeHdrCreateInfoAMD_localDimmingEnable_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkRefreshCycleDurationGOOGLE_refreshDuration_offsetof"] = Napi::Function::New(env, VkRefreshCycleDurationGOOGLE_refreshDuration_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPastPresentationTimingGOOGLE_presentID_offsetof"] = Napi::Function::New(env, VkPastPresentationTimingGOOGLE_presentID_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPastPresentationTimingGOOGLE_desiredPresentTime_offsetof"] = Napi::Function::New(env, VkPastPresentationTimingGOOGLE_desiredPresentTime_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPastPresentationTimingGOOGLE_actualPresentTime_offsetof"] = Napi::Function::New(env, VkPastPresentationTimingGOOGLE_actualPresentTime_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPastPresentationTimingGOOGLE_earliestPresentTime_offsetof"] = Napi::Function::New(env, VkPastPresentationTimingGOOGLE_earliestPresentTime_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPastPresentationTimingGOOGLE_presentMargin_offsetof"] = Napi::Function::New(env, VkPastPresentationTimingGOOGLE_presentMargin_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPresentTimesInfoGOOGLE_sType_offsetof"] = Napi::Function::New(env, VkPresentTimesInfoGOOGLE_sType_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPresentTimesInfoGOOGLE_pNext_offsetof"] = Napi::Function::New(env, VkPresentTimesInfoGOOGLE_pNext_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPresentTimesInfoGOOGLE_swapchainCount_offsetof"] = Napi::Function::New(env, VkPresentTimesInfoGOOGLE_swapchainCount_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPresentTimesInfoGOOGLE_pTimes_offsetof"] = Napi::Function::New(env, VkPresentTimesInfoGOOGLE_pTimes_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPresentTimeGOOGLE_presentID_offsetof"] = Napi::Function::New(env, VkPresentTimeGOOGLE_presentID_offsetof);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["VkPresentTimeGOOGLE_desiredPresentTime_offsetof"] = Napi::Function::New(env, VkPresentTimeGOOGLE_desiredPresentTime_offsetof);
#endif
#ifdef VK_MVK_ios_surface
    exports["VkIOSSurfaceCreateInfoMVK_sType_offsetof"] = Napi::Function::New(env, VkIOSSurfaceCreateInfoMVK_sType_offsetof);
#endif
#ifdef VK_MVK_ios_surface
    exports["VkIOSSurfaceCreateInfoMVK_pNext_offsetof"] = Napi::Function::New(env, VkIOSSurfaceCreateInfoMVK_pNext_offsetof);
#endif
#ifdef VK_MVK_ios_surface
    exports["VkIOSSurfaceCreateInfoMVK_flags_offsetof"] = Napi::Function::New(env, VkIOSSurfaceCreateInfoMVK_flags_offsetof);
#endif
#ifdef VK_MVK_ios_surface
    exports["VkIOSSurfaceCreateInfoMVK_pView_offsetof"] = Napi::Function::New(env, VkIOSSurfaceCreateInfoMVK_pView_offsetof);
#endif
#ifdef VK_MVK_macos_surface
    exports["VkMacOSSurfaceCreateInfoMVK_sType_offsetof"] = Napi::Function::New(env, VkMacOSSurfaceCreateInfoMVK_sType_offsetof);
#endif
#ifdef VK_MVK_macos_surface
    exports["VkMacOSSurfaceCreateInfoMVK_pNext_offsetof"] = Napi::Function::New(env, VkMacOSSurfaceCreateInfoMVK_pNext_offsetof);
#endif
#ifdef VK_MVK_macos_surface
    exports["VkMacOSSurfaceCreateInfoMVK_flags_offsetof"] = Napi::Function::New(env, VkMacOSSurfaceCreateInfoMVK_flags_offsetof);
#endif
#ifdef VK_MVK_macos_surface
    exports["VkMacOSSurfaceCreateInfoMVK_pView_offsetof"] = Napi::Function::New(env, VkMacOSSurfaceCreateInfoMVK_pView_offsetof);
#endif
#ifdef VK_EXT_metal_surface
    exports["VkMetalSurfaceCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkMetalSurfaceCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_surface
    exports["VkMetalSurfaceCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkMetalSurfaceCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_surface
    exports["VkMetalSurfaceCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkMetalSurfaceCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_metal_surface
    exports["VkMetalSurfaceCreateInfoEXT_pLayer_offsetof"] = Napi::Function::New(env, VkMetalSurfaceCreateInfoEXT_pLayer_offsetof);
#endif
#ifdef VK_NV_clip_space_w_scaling
    exports["VkViewportWScalingNV_xcoeff_offsetof"] = Napi::Function::New(env, VkViewportWScalingNV_xcoeff_offsetof);
#endif
#ifdef VK_NV_clip_space_w_scaling
    exports["VkViewportWScalingNV_ycoeff_offsetof"] = Napi::Function::New(env, VkViewportWScalingNV_ycoeff_offsetof);
#endif
#ifdef VK_NV_clip_space_w_scaling
    exports["VkPipelineViewportWScalingStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineViewportWScalingStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_clip_space_w_scaling
    exports["VkPipelineViewportWScalingStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineViewportWScalingStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_clip_space_w_scaling
    exports["VkPipelineViewportWScalingStateCreateInfoNV_viewportWScalingEnable_offsetof"] = Napi::Function::New(env, VkPipelineViewportWScalingStateCreateInfoNV_viewportWScalingEnable_offsetof);
#endif
#ifdef VK_NV_clip_space_w_scaling
    exports["VkPipelineViewportWScalingStateCreateInfoNV_viewportCount_offsetof"] = Napi::Function::New(env, VkPipelineViewportWScalingStateCreateInfoNV_viewportCount_offsetof);
#endif
#ifdef VK_NV_clip_space_w_scaling
    exports["VkPipelineViewportWScalingStateCreateInfoNV_pViewportWScalings_offsetof"] = Napi::Function::New(env, VkPipelineViewportWScalingStateCreateInfoNV_pViewportWScalings_offsetof);
#endif
#ifdef VK_NV_viewport_swizzle
    exports["VkViewportSwizzleNV_x_offsetof"] = Napi::Function::New(env, VkViewportSwizzleNV_x_offsetof);
#endif
#ifdef VK_NV_viewport_swizzle
    exports["VkViewportSwizzleNV_y_offsetof"] = Napi::Function::New(env, VkViewportSwizzleNV_y_offsetof);
#endif
#ifdef VK_NV_viewport_swizzle
    exports["VkViewportSwizzleNV_z_offsetof"] = Napi::Function::New(env, VkViewportSwizzleNV_z_offsetof);
#endif
#ifdef VK_NV_viewport_swizzle
    exports["VkViewportSwizzleNV_w_offsetof"] = Napi::Function::New(env, VkViewportSwizzleNV_w_offsetof);
#endif
#ifdef VK_NV_viewport_swizzle
    exports["VkPipelineViewportSwizzleStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineViewportSwizzleStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_viewport_swizzle
    exports["VkPipelineViewportSwizzleStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineViewportSwizzleStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_viewport_swizzle
    exports["VkPipelineViewportSwizzleStateCreateInfoNV_flags_offsetof"] = Napi::Function::New(env, VkPipelineViewportSwizzleStateCreateInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_viewport_swizzle
    exports["VkPipelineViewportSwizzleStateCreateInfoNV_viewportCount_offsetof"] = Napi::Function::New(env, VkPipelineViewportSwizzleStateCreateInfoNV_viewportCount_offsetof);
#endif
#ifdef VK_NV_viewport_swizzle
    exports["VkPipelineViewportSwizzleStateCreateInfoNV_pViewportSwizzles_offsetof"] = Napi::Function::New(env, VkPipelineViewportSwizzleStateCreateInfoNV_pViewportSwizzles_offsetof);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["VkPhysicalDeviceDiscardRectanglePropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDiscardRectanglePropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["VkPhysicalDeviceDiscardRectanglePropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDiscardRectanglePropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["VkPhysicalDeviceDiscardRectanglePropertiesEXT_maxDiscardRectangles_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDiscardRectanglePropertiesEXT_maxDiscardRectangles_offsetof);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["VkPipelineDiscardRectangleStateCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineDiscardRectangleStateCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["VkPipelineDiscardRectangleStateCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineDiscardRectangleStateCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["VkPipelineDiscardRectangleStateCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkPipelineDiscardRectangleStateCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["VkPipelineDiscardRectangleStateCreateInfoEXT_discardRectangleMode_offsetof"] = Napi::Function::New(env, VkPipelineDiscardRectangleStateCreateInfoEXT_discardRectangleMode_offsetof);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["VkPipelineDiscardRectangleStateCreateInfoEXT_discardRectangleCount_offsetof"] = Napi::Function::New(env, VkPipelineDiscardRectangleStateCreateInfoEXT_discardRectangleCount_offsetof);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["VkPipelineDiscardRectangleStateCreateInfoEXT_pDiscardRectangles_offsetof"] = Napi::Function::New(env, VkPipelineDiscardRectangleStateCreateInfoEXT_pDiscardRectangles_offsetof);
#endif
#ifdef VK_NVX_multiview_per_view_attributes
    exports["VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_sType_offsetof);
#endif
#ifdef VK_NVX_multiview_per_view_attributes
    exports["VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_pNext_offsetof);
#endif
#ifdef VK_NVX_multiview_per_view_attributes
    exports["VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_perViewPositionAllComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_perViewPositionAllComponents_offsetof);
#endif
    exports["VkInputAttachmentAspectReference_subpass_offsetof"] = Napi::Function::New(env, VkInputAttachmentAspectReference_subpass_offsetof);
    exports["VkInputAttachmentAspectReference_inputAttachmentIndex_offsetof"] = Napi::Function::New(env, VkInputAttachmentAspectReference_inputAttachmentIndex_offsetof);
    exports["VkInputAttachmentAspectReference_aspectMask_offsetof"] = Napi::Function::New(env, VkInputAttachmentAspectReference_aspectMask_offsetof);

    exports["VkRenderPassInputAttachmentAspectCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkRenderPassInputAttachmentAspectCreateInfo_sType_offsetof);
    exports["VkRenderPassInputAttachmentAspectCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassInputAttachmentAspectCreateInfo_pNext_offsetof);
    exports["VkRenderPassInputAttachmentAspectCreateInfo_aspectReferenceCount_offsetof"] = Napi::Function::New(env, VkRenderPassInputAttachmentAspectCreateInfo_aspectReferenceCount_offsetof);
    exports["VkRenderPassInputAttachmentAspectCreateInfo_pAspectReferences_offsetof"] = Napi::Function::New(env, VkRenderPassInputAttachmentAspectCreateInfo_pAspectReferences_offsetof);

#ifdef VK_KHR_get_surface_capabilities2
    exports["VkPhysicalDeviceSurfaceInfo2KHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSurfaceInfo2KHR_sType_offsetof);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["VkPhysicalDeviceSurfaceInfo2KHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSurfaceInfo2KHR_pNext_offsetof);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["VkPhysicalDeviceSurfaceInfo2KHR_surface_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSurfaceInfo2KHR_surface_offsetof);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["VkSurfaceCapabilities2KHR_sType_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2KHR_sType_offsetof);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["VkSurfaceCapabilities2KHR_pNext_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2KHR_pNext_offsetof);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["VkSurfaceCapabilities2KHR_surfaceCapabilities_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilities2KHR_surfaceCapabilities_offsetof);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["VkSurfaceFormat2KHR_sType_offsetof"] = Napi::Function::New(env, VkSurfaceFormat2KHR_sType_offsetof);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["VkSurfaceFormat2KHR_pNext_offsetof"] = Napi::Function::New(env, VkSurfaceFormat2KHR_pNext_offsetof);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["VkSurfaceFormat2KHR_surfaceFormat_offsetof"] = Napi::Function::New(env, VkSurfaceFormat2KHR_surfaceFormat_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayProperties2KHR_sType_offsetof"] = Napi::Function::New(env, VkDisplayProperties2KHR_sType_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayProperties2KHR_pNext_offsetof"] = Napi::Function::New(env, VkDisplayProperties2KHR_pNext_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayProperties2KHR_displayProperties_offsetof"] = Napi::Function::New(env, VkDisplayProperties2KHR_displayProperties_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneProperties2KHR_sType_offsetof"] = Napi::Function::New(env, VkDisplayPlaneProperties2KHR_sType_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneProperties2KHR_pNext_offsetof"] = Napi::Function::New(env, VkDisplayPlaneProperties2KHR_pNext_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneProperties2KHR_displayPlaneProperties_offsetof"] = Napi::Function::New(env, VkDisplayPlaneProperties2KHR_displayPlaneProperties_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayModeProperties2KHR_sType_offsetof"] = Napi::Function::New(env, VkDisplayModeProperties2KHR_sType_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayModeProperties2KHR_pNext_offsetof"] = Napi::Function::New(env, VkDisplayModeProperties2KHR_pNext_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayModeProperties2KHR_displayModeProperties_offsetof"] = Napi::Function::New(env, VkDisplayModeProperties2KHR_displayModeProperties_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneInfo2KHR_sType_offsetof"] = Napi::Function::New(env, VkDisplayPlaneInfo2KHR_sType_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneInfo2KHR_pNext_offsetof"] = Napi::Function::New(env, VkDisplayPlaneInfo2KHR_pNext_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneInfo2KHR_mode_offsetof"] = Napi::Function::New(env, VkDisplayPlaneInfo2KHR_mode_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneInfo2KHR_planeIndex_offsetof"] = Napi::Function::New(env, VkDisplayPlaneInfo2KHR_planeIndex_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneCapabilities2KHR_sType_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilities2KHR_sType_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneCapabilities2KHR_pNext_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilities2KHR_pNext_offsetof);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["VkDisplayPlaneCapabilities2KHR_capabilities_offsetof"] = Napi::Function::New(env, VkDisplayPlaneCapabilities2KHR_capabilities_offsetof);
#endif
#ifdef VK_KHR_shared_presentable_image
    exports["VkSharedPresentSurfaceCapabilitiesKHR_sType_offsetof"] = Napi::Function::New(env, VkSharedPresentSurfaceCapabilitiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_shared_presentable_image
    exports["VkSharedPresentSurfaceCapabilitiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkSharedPresentSurfaceCapabilitiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_shared_presentable_image
    exports["VkSharedPresentSurfaceCapabilitiesKHR_sharedPresentSupportedUsageFlags_offsetof"] = Napi::Function::New(env, VkSharedPresentSurfaceCapabilitiesKHR_sharedPresentSupportedUsageFlags_offsetof);
#endif
    exports["VkPhysicalDevice16BitStorageFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevice16BitStorageFeatures_sType_offsetof);
    exports["VkPhysicalDevice16BitStorageFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevice16BitStorageFeatures_pNext_offsetof);
    exports["VkPhysicalDevice16BitStorageFeatures_storageBuffer16BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDevice16BitStorageFeatures_storageBuffer16BitAccess_offsetof);
    exports["VkPhysicalDevice16BitStorageFeatures_uniformAndStorageBuffer16BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDevice16BitStorageFeatures_uniformAndStorageBuffer16BitAccess_offsetof);
    exports["VkPhysicalDevice16BitStorageFeatures_storagePushConstant16_offsetof"] = Napi::Function::New(env, VkPhysicalDevice16BitStorageFeatures_storagePushConstant16_offsetof);
    exports["VkPhysicalDevice16BitStorageFeatures_storageInputOutput16_offsetof"] = Napi::Function::New(env, VkPhysicalDevice16BitStorageFeatures_storageInputOutput16_offsetof);

    exports["VkPhysicalDeviceSubgroupProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupProperties_sType_offsetof);
    exports["VkPhysicalDeviceSubgroupProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupProperties_pNext_offsetof);
    exports["VkPhysicalDeviceSubgroupProperties_subgroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupProperties_subgroupSize_offsetof);
    exports["VkPhysicalDeviceSubgroupProperties_supportedStages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupProperties_supportedStages_offsetof);
    exports["VkPhysicalDeviceSubgroupProperties_supportedOperations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupProperties_supportedOperations_offsetof);
    exports["VkPhysicalDeviceSubgroupProperties_quadOperationsInAllStages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupProperties_quadOperationsInAllStages_offsetof);
    exports["VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_sType_offsetof);
    exports["VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_shaderSubgroupExtendedTypes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_shaderSubgroupExtendedTypes_offsetof);

    exports["VkBufferMemoryRequirementsInfo2_sType_offsetof"] = Napi::Function::New(env, VkBufferMemoryRequirementsInfo2_sType_offsetof);
    exports["VkBufferMemoryRequirementsInfo2_pNext_offsetof"] = Napi::Function::New(env, VkBufferMemoryRequirementsInfo2_pNext_offsetof);
    exports["VkBufferMemoryRequirementsInfo2_buffer_offsetof"] = Napi::Function::New(env, VkBufferMemoryRequirementsInfo2_buffer_offsetof);

    exports["VkDeviceBufferMemoryRequirements_sType_offsetof"] = Napi::Function::New(env, VkDeviceBufferMemoryRequirements_sType_offsetof);
    exports["VkDeviceBufferMemoryRequirements_pNext_offsetof"] = Napi::Function::New(env, VkDeviceBufferMemoryRequirements_pNext_offsetof);
    exports["VkDeviceBufferMemoryRequirements_pCreateInfo_offsetof"] = Napi::Function::New(env, VkDeviceBufferMemoryRequirements_pCreateInfo_offsetof);

    exports["VkImageMemoryRequirementsInfo2_sType_offsetof"] = Napi::Function::New(env, VkImageMemoryRequirementsInfo2_sType_offsetof);
    exports["VkImageMemoryRequirementsInfo2_pNext_offsetof"] = Napi::Function::New(env, VkImageMemoryRequirementsInfo2_pNext_offsetof);
    exports["VkImageMemoryRequirementsInfo2_image_offsetof"] = Napi::Function::New(env, VkImageMemoryRequirementsInfo2_image_offsetof);

    exports["VkImageSparseMemoryRequirementsInfo2_sType_offsetof"] = Napi::Function::New(env, VkImageSparseMemoryRequirementsInfo2_sType_offsetof);
    exports["VkImageSparseMemoryRequirementsInfo2_pNext_offsetof"] = Napi::Function::New(env, VkImageSparseMemoryRequirementsInfo2_pNext_offsetof);
    exports["VkImageSparseMemoryRequirementsInfo2_image_offsetof"] = Napi::Function::New(env, VkImageSparseMemoryRequirementsInfo2_image_offsetof);

    exports["VkDeviceImageMemoryRequirements_sType_offsetof"] = Napi::Function::New(env, VkDeviceImageMemoryRequirements_sType_offsetof);
    exports["VkDeviceImageMemoryRequirements_pNext_offsetof"] = Napi::Function::New(env, VkDeviceImageMemoryRequirements_pNext_offsetof);
    exports["VkDeviceImageMemoryRequirements_pCreateInfo_offsetof"] = Napi::Function::New(env, VkDeviceImageMemoryRequirements_pCreateInfo_offsetof);
    exports["VkDeviceImageMemoryRequirements_planeAspect_offsetof"] = Napi::Function::New(env, VkDeviceImageMemoryRequirements_planeAspect_offsetof);

    exports["VkMemoryRequirements2_sType_offsetof"] = Napi::Function::New(env, VkMemoryRequirements2_sType_offsetof);
    exports["VkMemoryRequirements2_pNext_offsetof"] = Napi::Function::New(env, VkMemoryRequirements2_pNext_offsetof);
    exports["VkMemoryRequirements2_memoryRequirements_offsetof"] = Napi::Function::New(env, VkMemoryRequirements2_memoryRequirements_offsetof);

    exports["VkSparseImageMemoryRequirements2_sType_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryRequirements2_sType_offsetof);
    exports["VkSparseImageMemoryRequirements2_pNext_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryRequirements2_pNext_offsetof);
    exports["VkSparseImageMemoryRequirements2_memoryRequirements_offsetof"] = Napi::Function::New(env, VkSparseImageMemoryRequirements2_memoryRequirements_offsetof);

    exports["VkPhysicalDevicePointClippingProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePointClippingProperties_sType_offsetof);
    exports["VkPhysicalDevicePointClippingProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePointClippingProperties_pNext_offsetof);
    exports["VkPhysicalDevicePointClippingProperties_pointClippingBehavior_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePointClippingProperties_pointClippingBehavior_offsetof);

    exports["VkMemoryDedicatedRequirements_sType_offsetof"] = Napi::Function::New(env, VkMemoryDedicatedRequirements_sType_offsetof);
    exports["VkMemoryDedicatedRequirements_pNext_offsetof"] = Napi::Function::New(env, VkMemoryDedicatedRequirements_pNext_offsetof);
    exports["VkMemoryDedicatedRequirements_prefersDedicatedAllocation_offsetof"] = Napi::Function::New(env, VkMemoryDedicatedRequirements_prefersDedicatedAllocation_offsetof);
    exports["VkMemoryDedicatedRequirements_requiresDedicatedAllocation_offsetof"] = Napi::Function::New(env, VkMemoryDedicatedRequirements_requiresDedicatedAllocation_offsetof);

    exports["VkMemoryDedicatedAllocateInfo_sType_offsetof"] = Napi::Function::New(env, VkMemoryDedicatedAllocateInfo_sType_offsetof);
    exports["VkMemoryDedicatedAllocateInfo_pNext_offsetof"] = Napi::Function::New(env, VkMemoryDedicatedAllocateInfo_pNext_offsetof);
    exports["VkMemoryDedicatedAllocateInfo_image_offsetof"] = Napi::Function::New(env, VkMemoryDedicatedAllocateInfo_image_offsetof);
    exports["VkMemoryDedicatedAllocateInfo_buffer_offsetof"] = Napi::Function::New(env, VkMemoryDedicatedAllocateInfo_buffer_offsetof);

    exports["VkImageViewUsageCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkImageViewUsageCreateInfo_sType_offsetof);
    exports["VkImageViewUsageCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkImageViewUsageCreateInfo_pNext_offsetof);
    exports["VkImageViewUsageCreateInfo_usage_offsetof"] = Napi::Function::New(env, VkImageViewUsageCreateInfo_usage_offsetof);

    exports["VkPipelineTessellationDomainOriginStateCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineTessellationDomainOriginStateCreateInfo_sType_offsetof);
    exports["VkPipelineTessellationDomainOriginStateCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineTessellationDomainOriginStateCreateInfo_pNext_offsetof);
    exports["VkPipelineTessellationDomainOriginStateCreateInfo_domainOrigin_offsetof"] = Napi::Function::New(env, VkPipelineTessellationDomainOriginStateCreateInfo_domainOrigin_offsetof);

    exports["VkSamplerYcbcrConversionInfo_sType_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionInfo_sType_offsetof);
    exports["VkSamplerYcbcrConversionInfo_pNext_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionInfo_pNext_offsetof);
    exports["VkSamplerYcbcrConversionInfo_conversion_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionInfo_conversion_offsetof);

    exports["VkSamplerYcbcrConversionCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_sType_offsetof);
    exports["VkSamplerYcbcrConversionCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_pNext_offsetof);
    exports["VkSamplerYcbcrConversionCreateInfo_format_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_format_offsetof);
    exports["VkSamplerYcbcrConversionCreateInfo_ycbcrModel_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_ycbcrModel_offsetof);
    exports["VkSamplerYcbcrConversionCreateInfo_ycbcrRange_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_ycbcrRange_offsetof);
    exports["VkSamplerYcbcrConversionCreateInfo_components_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_components_offsetof);
    exports["VkSamplerYcbcrConversionCreateInfo_xChromaOffset_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_xChromaOffset_offsetof);
    exports["VkSamplerYcbcrConversionCreateInfo_yChromaOffset_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_yChromaOffset_offsetof);
    exports["VkSamplerYcbcrConversionCreateInfo_chromaFilter_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_chromaFilter_offsetof);
    exports["VkSamplerYcbcrConversionCreateInfo_forceExplicitReconstruction_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionCreateInfo_forceExplicitReconstruction_offsetof);

    exports["VkBindImagePlaneMemoryInfo_sType_offsetof"] = Napi::Function::New(env, VkBindImagePlaneMemoryInfo_sType_offsetof);
    exports["VkBindImagePlaneMemoryInfo_pNext_offsetof"] = Napi::Function::New(env, VkBindImagePlaneMemoryInfo_pNext_offsetof);
    exports["VkBindImagePlaneMemoryInfo_planeAspect_offsetof"] = Napi::Function::New(env, VkBindImagePlaneMemoryInfo_planeAspect_offsetof);

    exports["VkImagePlaneMemoryRequirementsInfo_sType_offsetof"] = Napi::Function::New(env, VkImagePlaneMemoryRequirementsInfo_sType_offsetof);
    exports["VkImagePlaneMemoryRequirementsInfo_pNext_offsetof"] = Napi::Function::New(env, VkImagePlaneMemoryRequirementsInfo_pNext_offsetof);
    exports["VkImagePlaneMemoryRequirementsInfo_planeAspect_offsetof"] = Napi::Function::New(env, VkImagePlaneMemoryRequirementsInfo_planeAspect_offsetof);

    exports["VkPhysicalDeviceSamplerYcbcrConversionFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSamplerYcbcrConversionFeatures_sType_offsetof);
    exports["VkPhysicalDeviceSamplerYcbcrConversionFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSamplerYcbcrConversionFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceSamplerYcbcrConversionFeatures_samplerYcbcrConversion_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSamplerYcbcrConversionFeatures_samplerYcbcrConversion_offsetof);

    exports["VkSamplerYcbcrConversionImageFormatProperties_sType_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionImageFormatProperties_sType_offsetof);
    exports["VkSamplerYcbcrConversionImageFormatProperties_pNext_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionImageFormatProperties_pNext_offsetof);
    exports["VkSamplerYcbcrConversionImageFormatProperties_combinedImageSamplerDescriptorCount_offsetof"] = Napi::Function::New(env, VkSamplerYcbcrConversionImageFormatProperties_combinedImageSamplerDescriptorCount_offsetof);

#ifdef VK_AMD_texture_gather_bias_lod
    exports["VkTextureLODGatherFormatPropertiesAMD_sType_offsetof"] = Napi::Function::New(env, VkTextureLODGatherFormatPropertiesAMD_sType_offsetof);
#endif
#ifdef VK_AMD_texture_gather_bias_lod
    exports["VkTextureLODGatherFormatPropertiesAMD_pNext_offsetof"] = Napi::Function::New(env, VkTextureLODGatherFormatPropertiesAMD_pNext_offsetof);
#endif
#ifdef VK_AMD_texture_gather_bias_lod
    exports["VkTextureLODGatherFormatPropertiesAMD_supportsTextureGatherLODBiasAMD_offsetof"] = Napi::Function::New(env, VkTextureLODGatherFormatPropertiesAMD_supportsTextureGatherLODBiasAMD_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkConditionalRenderingBeginInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkConditionalRenderingBeginInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkConditionalRenderingBeginInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkConditionalRenderingBeginInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkConditionalRenderingBeginInfoEXT_buffer_offsetof"] = Napi::Function::New(env, VkConditionalRenderingBeginInfoEXT_buffer_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkConditionalRenderingBeginInfoEXT_offset_offsetof"] = Napi::Function::New(env, VkConditionalRenderingBeginInfoEXT_offset_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkConditionalRenderingBeginInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkConditionalRenderingBeginInfoEXT_flags_offsetof);
#endif
    exports["VkProtectedSubmitInfo_sType_offsetof"] = Napi::Function::New(env, VkProtectedSubmitInfo_sType_offsetof);
    exports["VkProtectedSubmitInfo_pNext_offsetof"] = Napi::Function::New(env, VkProtectedSubmitInfo_pNext_offsetof);
    exports["VkProtectedSubmitInfo_protectedSubmit_offsetof"] = Napi::Function::New(env, VkProtectedSubmitInfo_protectedSubmit_offsetof);
    exports["VkPhysicalDeviceProtectedMemoryFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProtectedMemoryFeatures_sType_offsetof);
    exports["VkPhysicalDeviceProtectedMemoryFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProtectedMemoryFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceProtectedMemoryFeatures_protectedMemory_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProtectedMemoryFeatures_protectedMemory_offsetof);
    exports["VkPhysicalDeviceProtectedMemoryProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProtectedMemoryProperties_sType_offsetof);
    exports["VkPhysicalDeviceProtectedMemoryProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProtectedMemoryProperties_pNext_offsetof);
    exports["VkPhysicalDeviceProtectedMemoryProperties_protectedNoFault_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProtectedMemoryProperties_protectedNoFault_offsetof);
    exports["VkDeviceQueueInfo2_sType_offsetof"] = Napi::Function::New(env, VkDeviceQueueInfo2_sType_offsetof);
    exports["VkDeviceQueueInfo2_pNext_offsetof"] = Napi::Function::New(env, VkDeviceQueueInfo2_pNext_offsetof);
    exports["VkDeviceQueueInfo2_flags_offsetof"] = Napi::Function::New(env, VkDeviceQueueInfo2_flags_offsetof);
    exports["VkDeviceQueueInfo2_queueFamilyIndex_offsetof"] = Napi::Function::New(env, VkDeviceQueueInfo2_queueFamilyIndex_offsetof);
    exports["VkDeviceQueueInfo2_queueIndex_offsetof"] = Napi::Function::New(env, VkDeviceQueueInfo2_queueIndex_offsetof);
#ifdef VK_NV_fragment_coverage_to_color
    exports["VkPipelineCoverageToColorStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineCoverageToColorStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_fragment_coverage_to_color
    exports["VkPipelineCoverageToColorStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineCoverageToColorStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_fragment_coverage_to_color
    exports["VkPipelineCoverageToColorStateCreateInfoNV_flags_offsetof"] = Napi::Function::New(env, VkPipelineCoverageToColorStateCreateInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_fragment_coverage_to_color
    exports["VkPipelineCoverageToColorStateCreateInfoNV_coverageToColorEnable_offsetof"] = Napi::Function::New(env, VkPipelineCoverageToColorStateCreateInfoNV_coverageToColorEnable_offsetof);
#endif
#ifdef VK_NV_fragment_coverage_to_color
    exports["VkPipelineCoverageToColorStateCreateInfoNV_coverageToColorLocation_offsetof"] = Napi::Function::New(env, VkPipelineCoverageToColorStateCreateInfoNV_coverageToColorLocation_offsetof);
#endif
    exports["VkPhysicalDeviceSamplerFilterMinmaxProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSamplerFilterMinmaxProperties_sType_offsetof);
    exports["VkPhysicalDeviceSamplerFilterMinmaxProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSamplerFilterMinmaxProperties_pNext_offsetof);
    exports["VkPhysicalDeviceSamplerFilterMinmaxProperties_filterMinmaxSingleComponentFormats_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSamplerFilterMinmaxProperties_filterMinmaxSingleComponentFormats_offsetof);
    exports["VkPhysicalDeviceSamplerFilterMinmaxProperties_filterMinmaxImageComponentMapping_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSamplerFilterMinmaxProperties_filterMinmaxImageComponentMapping_offsetof);

#ifdef VK_EXT_sample_locations
    exports["VkSampleLocationEXT_x_offsetof"] = Napi::Function::New(env, VkSampleLocationEXT_x_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkSampleLocationEXT_y_offsetof"] = Napi::Function::New(env, VkSampleLocationEXT_y_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkSampleLocationsInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkSampleLocationsInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkSampleLocationsInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkSampleLocationsInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkSampleLocationsInfoEXT_sampleLocationsPerPixel_offsetof"] = Napi::Function::New(env, VkSampleLocationsInfoEXT_sampleLocationsPerPixel_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkSampleLocationsInfoEXT_sampleLocationGridSize_offsetof"] = Napi::Function::New(env, VkSampleLocationsInfoEXT_sampleLocationGridSize_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkSampleLocationsInfoEXT_sampleLocationsCount_offsetof"] = Napi::Function::New(env, VkSampleLocationsInfoEXT_sampleLocationsCount_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkSampleLocationsInfoEXT_pSampleLocations_offsetof"] = Napi::Function::New(env, VkSampleLocationsInfoEXT_pSampleLocations_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkAttachmentSampleLocationsEXT_attachmentIndex_offsetof"] = Napi::Function::New(env, VkAttachmentSampleLocationsEXT_attachmentIndex_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkAttachmentSampleLocationsEXT_sampleLocationsInfo_offsetof"] = Napi::Function::New(env, VkAttachmentSampleLocationsEXT_sampleLocationsInfo_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkSubpassSampleLocationsEXT_subpassIndex_offsetof"] = Napi::Function::New(env, VkSubpassSampleLocationsEXT_subpassIndex_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkSubpassSampleLocationsEXT_sampleLocationsInfo_offsetof"] = Napi::Function::New(env, VkSubpassSampleLocationsEXT_sampleLocationsInfo_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkRenderPassSampleLocationsBeginInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkRenderPassSampleLocationsBeginInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkRenderPassSampleLocationsBeginInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassSampleLocationsBeginInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkRenderPassSampleLocationsBeginInfoEXT_attachmentInitialSampleLocationsCount_offsetof"] = Napi::Function::New(env, VkRenderPassSampleLocationsBeginInfoEXT_attachmentInitialSampleLocationsCount_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkRenderPassSampleLocationsBeginInfoEXT_pAttachmentInitialSampleLocations_offsetof"] = Napi::Function::New(env, VkRenderPassSampleLocationsBeginInfoEXT_pAttachmentInitialSampleLocations_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkRenderPassSampleLocationsBeginInfoEXT_postSubpassSampleLocationsCount_offsetof"] = Napi::Function::New(env, VkRenderPassSampleLocationsBeginInfoEXT_postSubpassSampleLocationsCount_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkRenderPassSampleLocationsBeginInfoEXT_pPostSubpassSampleLocations_offsetof"] = Napi::Function::New(env, VkRenderPassSampleLocationsBeginInfoEXT_pPostSubpassSampleLocations_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPipelineSampleLocationsStateCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineSampleLocationsStateCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPipelineSampleLocationsStateCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineSampleLocationsStateCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPipelineSampleLocationsStateCreateInfoEXT_sampleLocationsEnable_offsetof"] = Napi::Function::New(env, VkPipelineSampleLocationsStateCreateInfoEXT_sampleLocationsEnable_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPipelineSampleLocationsStateCreateInfoEXT_sampleLocationsInfo_offsetof"] = Napi::Function::New(env, VkPipelineSampleLocationsStateCreateInfoEXT_sampleLocationsInfo_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPhysicalDeviceSampleLocationsPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSampleLocationsPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPhysicalDeviceSampleLocationsPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSampleLocationsPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPhysicalDeviceSampleLocationsPropertiesEXT_sampleLocationSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSampleLocationsPropertiesEXT_sampleLocationSampleCounts_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPhysicalDeviceSampleLocationsPropertiesEXT_maxSampleLocationGridSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSampleLocationsPropertiesEXT_maxSampleLocationGridSize_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPhysicalDeviceSampleLocationsPropertiesEXT_sampleLocationCoordinateRange_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSampleLocationsPropertiesEXT_sampleLocationCoordinateRange_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPhysicalDeviceSampleLocationsPropertiesEXT_sampleLocationSubPixelBits_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSampleLocationsPropertiesEXT_sampleLocationSubPixelBits_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkPhysicalDeviceSampleLocationsPropertiesEXT_variableSampleLocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSampleLocationsPropertiesEXT_variableSampleLocations_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkMultisamplePropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkMultisamplePropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkMultisamplePropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkMultisamplePropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_sample_locations
    exports["VkMultisamplePropertiesEXT_maxSampleLocationGridSize_offsetof"] = Napi::Function::New(env, VkMultisamplePropertiesEXT_maxSampleLocationGridSize_offsetof);
#endif
    exports["VkSamplerReductionModeCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkSamplerReductionModeCreateInfo_sType_offsetof);
    exports["VkSamplerReductionModeCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkSamplerReductionModeCreateInfo_pNext_offsetof);
    exports["VkSamplerReductionModeCreateInfo_reductionMode_offsetof"] = Napi::Function::New(env, VkSamplerReductionModeCreateInfo_reductionMode_offsetof);

#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_advancedBlendCoherentOperations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_advancedBlendCoherentOperations_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkPhysicalDeviceMultiDrawFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiDrawFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkPhysicalDeviceMultiDrawFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiDrawFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_multi_draw
    exports["VkPhysicalDeviceMultiDrawFeaturesEXT_multiDraw_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultiDrawFeaturesEXT_multiDraw_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendMaxColorAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendMaxColorAttachments_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendIndependentBlend_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendIndependentBlend_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendNonPremultipliedSrcColor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendNonPremultipliedSrcColor_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendNonPremultipliedDstColor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendNonPremultipliedDstColor_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendCorrelatedOverlap_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendCorrelatedOverlap_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendAllOperations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_advancedBlendAllOperations_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPipelineColorBlendAdvancedStateCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAdvancedStateCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPipelineColorBlendAdvancedStateCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAdvancedStateCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPipelineColorBlendAdvancedStateCreateInfoEXT_srcPremultiplied_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAdvancedStateCreateInfoEXT_srcPremultiplied_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPipelineColorBlendAdvancedStateCreateInfoEXT_dstPremultiplied_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAdvancedStateCreateInfoEXT_dstPremultiplied_offsetof);
#endif
#ifdef VK_EXT_blend_operation_advanced
    exports["VkPipelineColorBlendAdvancedStateCreateInfoEXT_blendOverlap_offsetof"] = Napi::Function::New(env, VkPipelineColorBlendAdvancedStateCreateInfoEXT_blendOverlap_offsetof);
#endif
    exports["VkPhysicalDeviceInlineUniformBlockFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockFeatures_sType_offsetof);
    exports["VkPhysicalDeviceInlineUniformBlockFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceInlineUniformBlockFeatures_inlineUniformBlock_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockFeatures_inlineUniformBlock_offsetof);
    exports["VkPhysicalDeviceInlineUniformBlockFeatures_descriptorBindingInlineUniformBlockUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockFeatures_descriptorBindingInlineUniformBlockUpdateAfterBind_offsetof);

    exports["VkPhysicalDeviceInlineUniformBlockProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockProperties_sType_offsetof);
    exports["VkPhysicalDeviceInlineUniformBlockProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockProperties_pNext_offsetof);
    exports["VkPhysicalDeviceInlineUniformBlockProperties_maxInlineUniformBlockSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockProperties_maxInlineUniformBlockSize_offsetof);
    exports["VkPhysicalDeviceInlineUniformBlockProperties_maxPerStageDescriptorInlineUniformBlocks_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockProperties_maxPerStageDescriptorInlineUniformBlocks_offsetof);
    exports["VkPhysicalDeviceInlineUniformBlockProperties_maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockProperties_maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks_offsetof);
    exports["VkPhysicalDeviceInlineUniformBlockProperties_maxDescriptorSetInlineUniformBlocks_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockProperties_maxDescriptorSetInlineUniformBlocks_offsetof);
    exports["VkPhysicalDeviceInlineUniformBlockProperties_maxDescriptorSetUpdateAfterBindInlineUniformBlocks_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInlineUniformBlockProperties_maxDescriptorSetUpdateAfterBindInlineUniformBlocks_offsetof);

    exports["VkWriteDescriptorSetInlineUniformBlock_sType_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetInlineUniformBlock_sType_offsetof);
    exports["VkWriteDescriptorSetInlineUniformBlock_pNext_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetInlineUniformBlock_pNext_offsetof);
    exports["VkWriteDescriptorSetInlineUniformBlock_dataSize_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetInlineUniformBlock_dataSize_offsetof);
    exports["VkWriteDescriptorSetInlineUniformBlock_pData_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetInlineUniformBlock_pData_offsetof);

    exports["VkDescriptorPoolInlineUniformBlockCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkDescriptorPoolInlineUniformBlockCreateInfo_sType_offsetof);
    exports["VkDescriptorPoolInlineUniformBlockCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorPoolInlineUniformBlockCreateInfo_pNext_offsetof);
    exports["VkDescriptorPoolInlineUniformBlockCreateInfo_maxInlineUniformBlockBindings_offsetof"] = Napi::Function::New(env, VkDescriptorPoolInlineUniformBlockCreateInfo_maxInlineUniformBlockBindings_offsetof);

#ifdef VK_NV_framebuffer_mixed_samples
    exports["VkPipelineCoverageModulationStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineCoverageModulationStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_framebuffer_mixed_samples
    exports["VkPipelineCoverageModulationStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineCoverageModulationStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_framebuffer_mixed_samples
    exports["VkPipelineCoverageModulationStateCreateInfoNV_flags_offsetof"] = Napi::Function::New(env, VkPipelineCoverageModulationStateCreateInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_framebuffer_mixed_samples
    exports["VkPipelineCoverageModulationStateCreateInfoNV_coverageModulationMode_offsetof"] = Napi::Function::New(env, VkPipelineCoverageModulationStateCreateInfoNV_coverageModulationMode_offsetof);
#endif
#ifdef VK_NV_framebuffer_mixed_samples
    exports["VkPipelineCoverageModulationStateCreateInfoNV_coverageModulationTableEnable_offsetof"] = Napi::Function::New(env, VkPipelineCoverageModulationStateCreateInfoNV_coverageModulationTableEnable_offsetof);
#endif
#ifdef VK_NV_framebuffer_mixed_samples
    exports["VkPipelineCoverageModulationStateCreateInfoNV_coverageModulationTableCount_offsetof"] = Napi::Function::New(env, VkPipelineCoverageModulationStateCreateInfoNV_coverageModulationTableCount_offsetof);
#endif
#ifdef VK_NV_framebuffer_mixed_samples
    exports["VkPipelineCoverageModulationStateCreateInfoNV_pCoverageModulationTable_offsetof"] = Napi::Function::New(env, VkPipelineCoverageModulationStateCreateInfoNV_pCoverageModulationTable_offsetof);
#endif
    exports["VkImageFormatListCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkImageFormatListCreateInfo_sType_offsetof);
    exports["VkImageFormatListCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkImageFormatListCreateInfo_pNext_offsetof);
    exports["VkImageFormatListCreateInfo_viewFormatCount_offsetof"] = Napi::Function::New(env, VkImageFormatListCreateInfo_viewFormatCount_offsetof);
    exports["VkImageFormatListCreateInfo_pViewFormats_offsetof"] = Napi::Function::New(env, VkImageFormatListCreateInfo_pViewFormats_offsetof);

#ifdef VK_EXT_validation_cache
    exports["VkValidationCacheCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkValidationCacheCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_validation_cache
    exports["VkValidationCacheCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkValidationCacheCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_validation_cache
    exports["VkValidationCacheCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkValidationCacheCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_validation_cache
    exports["VkValidationCacheCreateInfoEXT_initialDataSize_offsetof"] = Napi::Function::New(env, VkValidationCacheCreateInfoEXT_initialDataSize_offsetof);
#endif
#ifdef VK_EXT_validation_cache
    exports["VkValidationCacheCreateInfoEXT_pInitialData_offsetof"] = Napi::Function::New(env, VkValidationCacheCreateInfoEXT_pInitialData_offsetof);
#endif
#ifdef VK_EXT_validation_cache
    exports["VkShaderModuleValidationCacheCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkShaderModuleValidationCacheCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_validation_cache
    exports["VkShaderModuleValidationCacheCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkShaderModuleValidationCacheCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_validation_cache
    exports["VkShaderModuleValidationCacheCreateInfoEXT_validationCache_offsetof"] = Napi::Function::New(env, VkShaderModuleValidationCacheCreateInfoEXT_validationCache_offsetof);
#endif
    exports["VkPhysicalDeviceMaintenance3Properties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance3Properties_sType_offsetof);
    exports["VkPhysicalDeviceMaintenance3Properties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance3Properties_pNext_offsetof);
    exports["VkPhysicalDeviceMaintenance3Properties_maxPerSetDescriptors_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance3Properties_maxPerSetDescriptors_offsetof);
    exports["VkPhysicalDeviceMaintenance3Properties_maxMemoryAllocationSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance3Properties_maxMemoryAllocationSize_offsetof);

    exports["VkPhysicalDeviceMaintenance4Features_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance4Features_sType_offsetof);
    exports["VkPhysicalDeviceMaintenance4Features_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance4Features_pNext_offsetof);
    exports["VkPhysicalDeviceMaintenance4Features_maintenance4_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance4Features_maintenance4_offsetof);

    exports["VkPhysicalDeviceMaintenance4Properties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance4Properties_sType_offsetof);
    exports["VkPhysicalDeviceMaintenance4Properties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance4Properties_pNext_offsetof);
    exports["VkPhysicalDeviceMaintenance4Properties_maxBufferSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMaintenance4Properties_maxBufferSize_offsetof);

    exports["VkDescriptorSetLayoutSupport_sType_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutSupport_sType_offsetof);
    exports["VkDescriptorSetLayoutSupport_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutSupport_pNext_offsetof);
    exports["VkDescriptorSetLayoutSupport_supported_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutSupport_supported_offsetof);

    exports["VkPhysicalDeviceShaderDrawParametersFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderDrawParametersFeatures_sType_offsetof);
    exports["VkPhysicalDeviceShaderDrawParametersFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderDrawParametersFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceShaderDrawParametersFeatures_shaderDrawParameters_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderDrawParametersFeatures_shaderDrawParameters_offsetof);

    exports["VkPhysicalDeviceShaderFloat16Int8Features_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderFloat16Int8Features_sType_offsetof);
    exports["VkPhysicalDeviceShaderFloat16Int8Features_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderFloat16Int8Features_pNext_offsetof);
    exports["VkPhysicalDeviceShaderFloat16Int8Features_shaderFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderFloat16Int8Features_shaderFloat16_offsetof);
    exports["VkPhysicalDeviceShaderFloat16Int8Features_shaderInt8_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderFloat16Int8Features_shaderInt8_offsetof);


    exports["VkPhysicalDeviceFloatControlsProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_sType_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_pNext_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_denormBehaviorIndependence_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_denormBehaviorIndependence_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_roundingModeIndependence_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_roundingModeIndependence_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderSignedZeroInfNanPreserveFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderSignedZeroInfNanPreserveFloat16_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderSignedZeroInfNanPreserveFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderSignedZeroInfNanPreserveFloat32_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderSignedZeroInfNanPreserveFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderSignedZeroInfNanPreserveFloat64_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderDenormPreserveFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderDenormPreserveFloat16_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderDenormPreserveFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderDenormPreserveFloat32_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderDenormPreserveFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderDenormPreserveFloat64_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderDenormFlushToZeroFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderDenormFlushToZeroFloat16_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderDenormFlushToZeroFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderDenormFlushToZeroFloat32_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderDenormFlushToZeroFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderDenormFlushToZeroFloat64_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTEFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTEFloat16_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTEFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTEFloat32_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTEFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTEFloat64_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTZFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTZFloat16_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTZFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTZFloat32_offsetof);
    exports["VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTZFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFloatControlsProperties_shaderRoundingModeRTZFloat64_offsetof);

    exports["VkPhysicalDeviceHostQueryResetFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceHostQueryResetFeatures_sType_offsetof);
    exports["VkPhysicalDeviceHostQueryResetFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceHostQueryResetFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceHostQueryResetFeatures_hostQueryReset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceHostQueryResetFeatures_hostQueryReset_offsetof);

#ifdef VK_ANDROID_native_buffer
    exports["VkNativeBufferUsage2ANDROID_consumer_offsetof"] = Napi::Function::New(env, VkNativeBufferUsage2ANDROID_consumer_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkNativeBufferUsage2ANDROID_producer_offsetof"] = Napi::Function::New(env, VkNativeBufferUsage2ANDROID_producer_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkNativeBufferANDROID_sType_offsetof"] = Napi::Function::New(env, VkNativeBufferANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkNativeBufferANDROID_pNext_offsetof"] = Napi::Function::New(env, VkNativeBufferANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkNativeBufferANDROID_handle_offsetof"] = Napi::Function::New(env, VkNativeBufferANDROID_handle_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkNativeBufferANDROID_stride_offsetof"] = Napi::Function::New(env, VkNativeBufferANDROID_stride_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkNativeBufferANDROID_format_offsetof"] = Napi::Function::New(env, VkNativeBufferANDROID_format_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkNativeBufferANDROID_usage_offsetof"] = Napi::Function::New(env, VkNativeBufferANDROID_usage_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkNativeBufferANDROID_usage2_offsetof"] = Napi::Function::New(env, VkNativeBufferANDROID_usage2_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkSwapchainImageCreateInfoANDROID_sType_offsetof"] = Napi::Function::New(env, VkSwapchainImageCreateInfoANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkSwapchainImageCreateInfoANDROID_pNext_offsetof"] = Napi::Function::New(env, VkSwapchainImageCreateInfoANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkSwapchainImageCreateInfoANDROID_usage_offsetof"] = Napi::Function::New(env, VkSwapchainImageCreateInfoANDROID_usage_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkPhysicalDevicePresentationPropertiesANDROID_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentationPropertiesANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkPhysicalDevicePresentationPropertiesANDROID_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentationPropertiesANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["VkPhysicalDevicePresentationPropertiesANDROID_sharedImage_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentationPropertiesANDROID_sharedImage_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderResourceUsageAMD_numUsedVgprs_offsetof"] = Napi::Function::New(env, VkShaderResourceUsageAMD_numUsedVgprs_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderResourceUsageAMD_numUsedSgprs_offsetof"] = Napi::Function::New(env, VkShaderResourceUsageAMD_numUsedSgprs_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderResourceUsageAMD_ldsSizePerLocalWorkGroup_offsetof"] = Napi::Function::New(env, VkShaderResourceUsageAMD_ldsSizePerLocalWorkGroup_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderResourceUsageAMD_ldsUsageSizeInBytes_offsetof"] = Napi::Function::New(env, VkShaderResourceUsageAMD_ldsUsageSizeInBytes_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderResourceUsageAMD_scratchMemUsageInBytes_offsetof"] = Napi::Function::New(env, VkShaderResourceUsageAMD_scratchMemUsageInBytes_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderStatisticsInfoAMD_shaderStageMask_offsetof"] = Napi::Function::New(env, VkShaderStatisticsInfoAMD_shaderStageMask_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderStatisticsInfoAMD_resourceUsage_offsetof"] = Napi::Function::New(env, VkShaderStatisticsInfoAMD_resourceUsage_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderStatisticsInfoAMD_numPhysicalVgprs_offsetof"] = Napi::Function::New(env, VkShaderStatisticsInfoAMD_numPhysicalVgprs_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderStatisticsInfoAMD_numPhysicalSgprs_offsetof"] = Napi::Function::New(env, VkShaderStatisticsInfoAMD_numPhysicalSgprs_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderStatisticsInfoAMD_numAvailableVgprs_offsetof"] = Napi::Function::New(env, VkShaderStatisticsInfoAMD_numAvailableVgprs_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderStatisticsInfoAMD_numAvailableSgprs_offsetof"] = Napi::Function::New(env, VkShaderStatisticsInfoAMD_numAvailableSgprs_offsetof);
#endif
#ifdef VK_AMD_shader_info
    exports["VkShaderStatisticsInfoAMD_computeWorkGroupSize_offsetof"] = Napi::Function::New(env, VkShaderStatisticsInfoAMD_computeWorkGroupSize_offsetof);
#endif
#ifdef VK_KHR_global_priority
    exports["VkDeviceQueueGlobalPriorityCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkDeviceQueueGlobalPriorityCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_global_priority
    exports["VkDeviceQueueGlobalPriorityCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkDeviceQueueGlobalPriorityCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_global_priority
    exports["VkDeviceQueueGlobalPriorityCreateInfoKHR_globalPriority_offsetof"] = Napi::Function::New(env, VkDeviceQueueGlobalPriorityCreateInfoKHR_globalPriority_offsetof);
#endif

#ifdef VK_KHR_global_priority
    exports["VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_global_priority
    exports["VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_global_priority
    exports["VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_globalPriorityQuery_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_globalPriorityQuery_offsetof);
#endif

#ifdef VK_KHR_global_priority
    exports["VkQueueFamilyGlobalPriorityPropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkQueueFamilyGlobalPriorityPropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_global_priority
    exports["VkQueueFamilyGlobalPriorityPropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkQueueFamilyGlobalPriorityPropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_global_priority
    exports["VkQueueFamilyGlobalPriorityPropertiesKHR_priorityCount_offsetof"] = Napi::Function::New(env, VkQueueFamilyGlobalPriorityPropertiesKHR_priorityCount_offsetof);
#endif
#ifdef VK_KHR_global_priority
    exports["VkQueueFamilyGlobalPriorityPropertiesKHR_priorities_offsetof"] = Napi::Function::New(env, VkQueueFamilyGlobalPriorityPropertiesKHR_priorities_offsetof);
#endif

#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectNameInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectNameInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectNameInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectNameInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectNameInfoEXT_objectType_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectNameInfoEXT_objectType_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectNameInfoEXT_objectHandle_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectNameInfoEXT_objectHandle_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectNameInfoEXT_pObjectName_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectNameInfoEXT_pObjectName_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectTagInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectTagInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectTagInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectTagInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectTagInfoEXT_objectType_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectTagInfoEXT_objectType_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectTagInfoEXT_objectHandle_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectTagInfoEXT_objectHandle_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectTagInfoEXT_tagName_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectTagInfoEXT_tagName_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectTagInfoEXT_tagSize_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectTagInfoEXT_tagSize_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsObjectTagInfoEXT_pTag_offsetof"] = Napi::Function::New(env, VkDebugUtilsObjectTagInfoEXT_pTag_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsLabelEXT_sType_offsetof"] = Napi::Function::New(env, VkDebugUtilsLabelEXT_sType_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsLabelEXT_pNext_offsetof"] = Napi::Function::New(env, VkDebugUtilsLabelEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsLabelEXT_pLabelName_offsetof"] = Napi::Function::New(env, VkDebugUtilsLabelEXT_pLabelName_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsLabelEXT_color_offsetof"] = Napi::Function::New(env, VkDebugUtilsLabelEXT_color_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCreateInfoEXT_messageSeverity_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCreateInfoEXT_messageSeverity_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCreateInfoEXT_messageType_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCreateInfoEXT_messageType_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCreateInfoEXT_pfnUserCallback_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCreateInfoEXT_pfnUserCallback_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCreateInfoEXT_pUserData_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCreateInfoEXT_pUserData_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_sType_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_sType_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_pNext_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_flags_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_flags_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_pMessageIdName_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_pMessageIdName_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_messageIdNumber_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_messageIdNumber_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_pMessage_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_pMessage_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_queueLabelCount_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_queueLabelCount_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_pQueueLabels_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_pQueueLabels_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_cmdBufLabelCount_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_cmdBufLabelCount_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_pCmdBufLabels_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_pCmdBufLabels_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_objectCount_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_objectCount_offsetof);
#endif
#ifdef VK_EXT_debug_utils
    exports["VkDebugUtilsMessengerCallbackDataEXT_pObjects_offsetof"] = Napi::Function::New(env, VkDebugUtilsMessengerCallbackDataEXT_pObjects_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_deviceMemoryReport_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_deviceMemoryReport_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceDeviceMemoryReportCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDeviceDeviceMemoryReportCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceDeviceMemoryReportCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDeviceDeviceMemoryReportCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceDeviceMemoryReportCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkDeviceDeviceMemoryReportCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceDeviceMemoryReportCreateInfoEXT_pfnUserCallback_offsetof"] = Napi::Function::New(env, VkDeviceDeviceMemoryReportCreateInfoEXT_pfnUserCallback_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceDeviceMemoryReportCreateInfoEXT_pUserData_offsetof"] = Napi::Function::New(env, VkDeviceDeviceMemoryReportCreateInfoEXT_pUserData_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceMemoryReportCallbackDataEXT_sType_offsetof"] = Napi::Function::New(env, VkDeviceMemoryReportCallbackDataEXT_sType_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceMemoryReportCallbackDataEXT_pNext_offsetof"] = Napi::Function::New(env, VkDeviceMemoryReportCallbackDataEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceMemoryReportCallbackDataEXT_flags_offsetof"] = Napi::Function::New(env, VkDeviceMemoryReportCallbackDataEXT_flags_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceMemoryReportCallbackDataEXT_type_offsetof"] = Napi::Function::New(env, VkDeviceMemoryReportCallbackDataEXT_type_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceMemoryReportCallbackDataEXT_memoryObjectId_offsetof"] = Napi::Function::New(env, VkDeviceMemoryReportCallbackDataEXT_memoryObjectId_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceMemoryReportCallbackDataEXT_size_offsetof"] = Napi::Function::New(env, VkDeviceMemoryReportCallbackDataEXT_size_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceMemoryReportCallbackDataEXT_objectType_offsetof"] = Napi::Function::New(env, VkDeviceMemoryReportCallbackDataEXT_objectType_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceMemoryReportCallbackDataEXT_objectHandle_offsetof"] = Napi::Function::New(env, VkDeviceMemoryReportCallbackDataEXT_objectHandle_offsetof);
#endif
#ifdef VK_EXT_device_memory_report
    exports["VkDeviceMemoryReportCallbackDataEXT_heapIndex_offsetof"] = Napi::Function::New(env, VkDeviceMemoryReportCallbackDataEXT_heapIndex_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkImportMemoryHostPointerInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkImportMemoryHostPointerInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkImportMemoryHostPointerInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkImportMemoryHostPointerInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkImportMemoryHostPointerInfoEXT_handleType_offsetof"] = Napi::Function::New(env, VkImportMemoryHostPointerInfoEXT_handleType_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkImportMemoryHostPointerInfoEXT_pHostPointer_offsetof"] = Napi::Function::New(env, VkImportMemoryHostPointerInfoEXT_pHostPointer_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkMemoryHostPointerPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkMemoryHostPointerPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkMemoryHostPointerPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkMemoryHostPointerPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkMemoryHostPointerPropertiesEXT_memoryTypeBits_offsetof"] = Napi::Function::New(env, VkMemoryHostPointerPropertiesEXT_memoryTypeBits_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkPhysicalDeviceExternalMemoryHostPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalMemoryHostPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkPhysicalDeviceExternalMemoryHostPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalMemoryHostPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_external_memory_host
    exports["VkPhysicalDeviceExternalMemoryHostPropertiesEXT_minImportedHostPointerAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalMemoryHostPropertiesEXT_minImportedHostPointerAlignment_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_primitiveOverestimationSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_primitiveOverestimationSize_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_maxExtraPrimitiveOverestimationSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_maxExtraPrimitiveOverestimationSize_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_extraPrimitiveOverestimationSizeGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_extraPrimitiveOverestimationSizeGranularity_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_primitiveUnderestimation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_primitiveUnderestimation_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_conservativePointAndLineRasterization_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_conservativePointAndLineRasterization_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_degenerateTrianglesRasterized_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_degenerateTrianglesRasterized_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_degenerateLinesRasterized_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_degenerateLinesRasterized_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_fullyCoveredFragmentShaderInputVariable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_fullyCoveredFragmentShaderInputVariable_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPhysicalDeviceConservativeRasterizationPropertiesEXT_conservativeRasterizationPostDepthCoverage_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConservativeRasterizationPropertiesEXT_conservativeRasterizationPostDepthCoverage_offsetof);
#endif
#ifdef VK_EXT_calibrated_timestamps
    exports["VkCalibratedTimestampInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkCalibratedTimestampInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_calibrated_timestamps
    exports["VkCalibratedTimestampInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkCalibratedTimestampInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_calibrated_timestamps
    exports["VkCalibratedTimestampInfoEXT_timeDomain_offsetof"] = Napi::Function::New(env, VkCalibratedTimestampInfoEXT_timeDomain_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_sType_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_pNext_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_shaderEngineCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_shaderEngineCount_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_shaderArraysPerEngineCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_shaderArraysPerEngineCount_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_computeUnitsPerShaderArray_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_computeUnitsPerShaderArray_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_simdPerComputeUnit_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_simdPerComputeUnit_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_wavefrontsPerSimd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_wavefrontsPerSimd_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_wavefrontSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_wavefrontSize_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_sgprsPerSimd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_sgprsPerSimd_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_minSgprAllocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_minSgprAllocation_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_maxSgprAllocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_maxSgprAllocation_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_sgprAllocationGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_sgprAllocationGranularity_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_vgprsPerSimd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_vgprsPerSimd_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_minVgprAllocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_minVgprAllocation_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_maxVgprAllocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_maxVgprAllocation_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties
    exports["VkPhysicalDeviceShaderCorePropertiesAMD_vgprAllocationGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCorePropertiesAMD_vgprAllocationGranularity_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties2
    exports["VkPhysicalDeviceShaderCoreProperties2AMD_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreProperties2AMD_sType_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties2
    exports["VkPhysicalDeviceShaderCoreProperties2AMD_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreProperties2AMD_pNext_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties2
    exports["VkPhysicalDeviceShaderCoreProperties2AMD_shaderCoreFeatures_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreProperties2AMD_shaderCoreFeatures_offsetof);
#endif
#ifdef VK_AMD_shader_core_properties2
    exports["VkPhysicalDeviceShaderCoreProperties2AMD_activeComputeUnitCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreProperties2AMD_activeComputeUnitCount_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPipelineRasterizationConservativeStateCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationConservativeStateCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPipelineRasterizationConservativeStateCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationConservativeStateCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPipelineRasterizationConservativeStateCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationConservativeStateCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPipelineRasterizationConservativeStateCreateInfoEXT_conservativeRasterizationMode_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationConservativeStateCreateInfoEXT_conservativeRasterizationMode_offsetof);
#endif
#ifdef VK_EXT_conservative_rasterization
    exports["VkPipelineRasterizationConservativeStateCreateInfoEXT_extraPrimitiveOverestimationSize_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationConservativeStateCreateInfoEXT_extraPrimitiveOverestimationSize_offsetof);
#endif
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_sType_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderInputAttachmentArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderInputAttachmentArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderUniformTexelBufferArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderUniformTexelBufferArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageTexelBufferArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageTexelBufferArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderUniformBufferArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderUniformBufferArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderSampledImageArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderSampledImageArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageBufferArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageBufferArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageImageArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageImageArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderInputAttachmentArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderInputAttachmentArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderUniformTexelBufferArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderUniformTexelBufferArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageTexelBufferArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_shaderStorageTexelBufferArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingUniformBufferUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingUniformBufferUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingSampledImageUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingSampledImageUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingStorageImageUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingStorageImageUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingStorageBufferUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingStorageBufferUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingUniformTexelBufferUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingUniformTexelBufferUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingStorageTexelBufferUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingStorageTexelBufferUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingUpdateUnusedWhilePending_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingUpdateUnusedWhilePending_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingPartiallyBound_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingPartiallyBound_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingVariableDescriptorCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_descriptorBindingVariableDescriptorCount_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingFeatures_runtimeDescriptorArray_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingFeatures_runtimeDescriptorArray_offsetof);

    exports["VkPhysicalDeviceDescriptorIndexingProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_sType_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_pNext_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxUpdateAfterBindDescriptorsInAllPools_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxUpdateAfterBindDescriptorsInAllPools_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_shaderUniformBufferArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_shaderUniformBufferArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_shaderSampledImageArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_shaderSampledImageArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_shaderStorageBufferArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_shaderStorageBufferArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_shaderStorageImageArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_shaderStorageImageArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_shaderInputAttachmentArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_shaderInputAttachmentArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_robustBufferAccessUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_robustBufferAccessUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_quadDivergentImplicitLod_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_quadDivergentImplicitLod_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindSamplers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindSamplers_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindUniformBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindUniformBuffers_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindStorageBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindStorageBuffers_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindSampledImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindSampledImages_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindStorageImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindStorageImages_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindInputAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageDescriptorUpdateAfterBindInputAttachments_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageUpdateAfterBindResources_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxPerStageUpdateAfterBindResources_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindSamplers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindSamplers_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindUniformBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindUniformBuffers_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindUniformBuffersDynamic_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindUniformBuffersDynamic_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindStorageBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindStorageBuffers_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindStorageBuffersDynamic_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindStorageBuffersDynamic_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindSampledImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindSampledImages_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindStorageImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindStorageImages_offsetof);
    exports["VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindInputAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorIndexingProperties_maxDescriptorSetUpdateAfterBindInputAttachments_offsetof);

    exports["VkDescriptorSetLayoutBindingFlagsCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutBindingFlagsCreateInfo_sType_offsetof);
    exports["VkDescriptorSetLayoutBindingFlagsCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutBindingFlagsCreateInfo_pNext_offsetof);
    exports["VkDescriptorSetLayoutBindingFlagsCreateInfo_bindingCount_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutBindingFlagsCreateInfo_bindingCount_offsetof);
    exports["VkDescriptorSetLayoutBindingFlagsCreateInfo_pBindingFlags_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutBindingFlagsCreateInfo_pBindingFlags_offsetof);

    exports["VkDescriptorSetVariableDescriptorCountAllocateInfo_sType_offsetof"] = Napi::Function::New(env, VkDescriptorSetVariableDescriptorCountAllocateInfo_sType_offsetof);
    exports["VkDescriptorSetVariableDescriptorCountAllocateInfo_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorSetVariableDescriptorCountAllocateInfo_pNext_offsetof);
    exports["VkDescriptorSetVariableDescriptorCountAllocateInfo_descriptorSetCount_offsetof"] = Napi::Function::New(env, VkDescriptorSetVariableDescriptorCountAllocateInfo_descriptorSetCount_offsetof);
    exports["VkDescriptorSetVariableDescriptorCountAllocateInfo_pDescriptorCounts_offsetof"] = Napi::Function::New(env, VkDescriptorSetVariableDescriptorCountAllocateInfo_pDescriptorCounts_offsetof);

    exports["VkDescriptorSetVariableDescriptorCountLayoutSupport_sType_offsetof"] = Napi::Function::New(env, VkDescriptorSetVariableDescriptorCountLayoutSupport_sType_offsetof);
    exports["VkDescriptorSetVariableDescriptorCountLayoutSupport_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorSetVariableDescriptorCountLayoutSupport_pNext_offsetof);
    exports["VkDescriptorSetVariableDescriptorCountLayoutSupport_maxVariableDescriptorCount_offsetof"] = Napi::Function::New(env, VkDescriptorSetVariableDescriptorCountLayoutSupport_maxVariableDescriptorCount_offsetof);

    exports["VkAttachmentDescription2_sType_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_sType_offsetof);
    exports["VkAttachmentDescription2_pNext_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_pNext_offsetof);
    exports["VkAttachmentDescription2_flags_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_flags_offsetof);
    exports["VkAttachmentDescription2_format_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_format_offsetof);
    exports["VkAttachmentDescription2_samples_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_samples_offsetof);
    exports["VkAttachmentDescription2_loadOp_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_loadOp_offsetof);
    exports["VkAttachmentDescription2_storeOp_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_storeOp_offsetof);
    exports["VkAttachmentDescription2_stencilLoadOp_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_stencilLoadOp_offsetof);
    exports["VkAttachmentDescription2_stencilStoreOp_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_stencilStoreOp_offsetof);
    exports["VkAttachmentDescription2_initialLayout_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_initialLayout_offsetof);
    exports["VkAttachmentDescription2_finalLayout_offsetof"] = Napi::Function::New(env, VkAttachmentDescription2_finalLayout_offsetof);

    exports["VkAttachmentReference2_sType_offsetof"] = Napi::Function::New(env, VkAttachmentReference2_sType_offsetof);
    exports["VkAttachmentReference2_pNext_offsetof"] = Napi::Function::New(env, VkAttachmentReference2_pNext_offsetof);
    exports["VkAttachmentReference2_attachment_offsetof"] = Napi::Function::New(env, VkAttachmentReference2_attachment_offsetof);
    exports["VkAttachmentReference2_layout_offsetof"] = Napi::Function::New(env, VkAttachmentReference2_layout_offsetof);
    exports["VkAttachmentReference2_aspectMask_offsetof"] = Napi::Function::New(env, VkAttachmentReference2_aspectMask_offsetof);

    exports["VkSubpassDescription2_sType_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_sType_offsetof);
    exports["VkSubpassDescription2_pNext_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_pNext_offsetof);
    exports["VkSubpassDescription2_flags_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_flags_offsetof);
    exports["VkSubpassDescription2_pipelineBindPoint_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_pipelineBindPoint_offsetof);
    exports["VkSubpassDescription2_viewMask_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_viewMask_offsetof);
    exports["VkSubpassDescription2_inputAttachmentCount_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_inputAttachmentCount_offsetof);
    exports["VkSubpassDescription2_pInputAttachments_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_pInputAttachments_offsetof);
    exports["VkSubpassDescription2_colorAttachmentCount_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_colorAttachmentCount_offsetof);
    exports["VkSubpassDescription2_pColorAttachments_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_pColorAttachments_offsetof);
    exports["VkSubpassDescription2_pResolveAttachments_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_pResolveAttachments_offsetof);
    exports["VkSubpassDescription2_pDepthStencilAttachment_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_pDepthStencilAttachment_offsetof);
    exports["VkSubpassDescription2_preserveAttachmentCount_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_preserveAttachmentCount_offsetof);
    exports["VkSubpassDescription2_pPreserveAttachments_offsetof"] = Napi::Function::New(env, VkSubpassDescription2_pPreserveAttachments_offsetof);

    exports["VkSubpassDependency2_sType_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_sType_offsetof);
    exports["VkSubpassDependency2_pNext_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_pNext_offsetof);
    exports["VkSubpassDependency2_srcSubpass_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_srcSubpass_offsetof);
    exports["VkSubpassDependency2_dstSubpass_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_dstSubpass_offsetof);
    exports["VkSubpassDependency2_srcStageMask_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_srcStageMask_offsetof);
    exports["VkSubpassDependency2_dstStageMask_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_dstStageMask_offsetof);
    exports["VkSubpassDependency2_srcAccessMask_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_srcAccessMask_offsetof);
    exports["VkSubpassDependency2_dstAccessMask_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_dstAccessMask_offsetof);
    exports["VkSubpassDependency2_dependencyFlags_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_dependencyFlags_offsetof);
    exports["VkSubpassDependency2_viewOffset_offsetof"] = Napi::Function::New(env, VkSubpassDependency2_viewOffset_offsetof);

    exports["VkRenderPassCreateInfo2_sType_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_sType_offsetof);
    exports["VkRenderPassCreateInfo2_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_pNext_offsetof);
    exports["VkRenderPassCreateInfo2_flags_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_flags_offsetof);
    exports["VkRenderPassCreateInfo2_attachmentCount_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_attachmentCount_offsetof);
    exports["VkRenderPassCreateInfo2_pAttachments_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_pAttachments_offsetof);
    exports["VkRenderPassCreateInfo2_subpassCount_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_subpassCount_offsetof);
    exports["VkRenderPassCreateInfo2_pSubpasses_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_pSubpasses_offsetof);
    exports["VkRenderPassCreateInfo2_dependencyCount_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_dependencyCount_offsetof);
    exports["VkRenderPassCreateInfo2_pDependencies_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_pDependencies_offsetof);
    exports["VkRenderPassCreateInfo2_correlatedViewMaskCount_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_correlatedViewMaskCount_offsetof);
    exports["VkRenderPassCreateInfo2_pCorrelatedViewMasks_offsetof"] = Napi::Function::New(env, VkRenderPassCreateInfo2_pCorrelatedViewMasks_offsetof);

    exports["VkSubpassBeginInfo_sType_offsetof"] = Napi::Function::New(env, VkSubpassBeginInfo_sType_offsetof);
    exports["VkSubpassBeginInfo_pNext_offsetof"] = Napi::Function::New(env, VkSubpassBeginInfo_pNext_offsetof);
    exports["VkSubpassBeginInfo_contents_offsetof"] = Napi::Function::New(env, VkSubpassBeginInfo_contents_offsetof);

    exports["VkSubpassEndInfo_sType_offsetof"] = Napi::Function::New(env, VkSubpassEndInfo_sType_offsetof);
    exports["VkSubpassEndInfo_pNext_offsetof"] = Napi::Function::New(env, VkSubpassEndInfo_pNext_offsetof);

    exports["VkPhysicalDeviceTimelineSemaphoreFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTimelineSemaphoreFeatures_sType_offsetof);
    exports["VkPhysicalDeviceTimelineSemaphoreFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTimelineSemaphoreFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceTimelineSemaphoreFeatures_timelineSemaphore_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTimelineSemaphoreFeatures_timelineSemaphore_offsetof);

    exports["VkPhysicalDeviceTimelineSemaphoreProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTimelineSemaphoreProperties_sType_offsetof);
    exports["VkPhysicalDeviceTimelineSemaphoreProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTimelineSemaphoreProperties_pNext_offsetof);
    exports["VkPhysicalDeviceTimelineSemaphoreProperties_maxTimelineSemaphoreValueDifference_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTimelineSemaphoreProperties_maxTimelineSemaphoreValueDifference_offsetof);

    exports["VkSemaphoreTypeCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkSemaphoreTypeCreateInfo_sType_offsetof);
    exports["VkSemaphoreTypeCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkSemaphoreTypeCreateInfo_pNext_offsetof);
    exports["VkSemaphoreTypeCreateInfo_semaphoreType_offsetof"] = Napi::Function::New(env, VkSemaphoreTypeCreateInfo_semaphoreType_offsetof);
    exports["VkSemaphoreTypeCreateInfo_initialValue_offsetof"] = Napi::Function::New(env, VkSemaphoreTypeCreateInfo_initialValue_offsetof);

    exports["VkTimelineSemaphoreSubmitInfo_sType_offsetof"] = Napi::Function::New(env, VkTimelineSemaphoreSubmitInfo_sType_offsetof);
    exports["VkTimelineSemaphoreSubmitInfo_pNext_offsetof"] = Napi::Function::New(env, VkTimelineSemaphoreSubmitInfo_pNext_offsetof);
    exports["VkTimelineSemaphoreSubmitInfo_waitSemaphoreValueCount_offsetof"] = Napi::Function::New(env, VkTimelineSemaphoreSubmitInfo_waitSemaphoreValueCount_offsetof);
    exports["VkTimelineSemaphoreSubmitInfo_pWaitSemaphoreValues_offsetof"] = Napi::Function::New(env, VkTimelineSemaphoreSubmitInfo_pWaitSemaphoreValues_offsetof);
    exports["VkTimelineSemaphoreSubmitInfo_signalSemaphoreValueCount_offsetof"] = Napi::Function::New(env, VkTimelineSemaphoreSubmitInfo_signalSemaphoreValueCount_offsetof);
    exports["VkTimelineSemaphoreSubmitInfo_pSignalSemaphoreValues_offsetof"] = Napi::Function::New(env, VkTimelineSemaphoreSubmitInfo_pSignalSemaphoreValues_offsetof);

    exports["VkSemaphoreWaitInfo_sType_offsetof"] = Napi::Function::New(env, VkSemaphoreWaitInfo_sType_offsetof);
    exports["VkSemaphoreWaitInfo_pNext_offsetof"] = Napi::Function::New(env, VkSemaphoreWaitInfo_pNext_offsetof);
    exports["VkSemaphoreWaitInfo_flags_offsetof"] = Napi::Function::New(env, VkSemaphoreWaitInfo_flags_offsetof);
    exports["VkSemaphoreWaitInfo_semaphoreCount_offsetof"] = Napi::Function::New(env, VkSemaphoreWaitInfo_semaphoreCount_offsetof);
    exports["VkSemaphoreWaitInfo_pSemaphores_offsetof"] = Napi::Function::New(env, VkSemaphoreWaitInfo_pSemaphores_offsetof);
    exports["VkSemaphoreWaitInfo_pValues_offsetof"] = Napi::Function::New(env, VkSemaphoreWaitInfo_pValues_offsetof);

    exports["VkSemaphoreSignalInfo_sType_offsetof"] = Napi::Function::New(env, VkSemaphoreSignalInfo_sType_offsetof);
    exports["VkSemaphoreSignalInfo_pNext_offsetof"] = Napi::Function::New(env, VkSemaphoreSignalInfo_pNext_offsetof);
    exports["VkSemaphoreSignalInfo_semaphore_offsetof"] = Napi::Function::New(env, VkSemaphoreSignalInfo_semaphore_offsetof);
    exports["VkSemaphoreSignalInfo_value_offsetof"] = Napi::Function::New(env, VkSemaphoreSignalInfo_value_offsetof);

#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkVertexInputBindingDivisorDescriptionEXT_binding_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDivisorDescriptionEXT_binding_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkVertexInputBindingDivisorDescriptionEXT_divisor_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDivisorDescriptionEXT_divisor_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPipelineVertexInputDivisorStateCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputDivisorStateCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPipelineVertexInputDivisorStateCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputDivisorStateCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPipelineVertexInputDivisorStateCreateInfoEXT_vertexBindingDivisorCount_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputDivisorStateCreateInfoEXT_vertexBindingDivisorCount_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPipelineVertexInputDivisorStateCreateInfoEXT_pVertexBindingDivisors_offsetof"] = Napi::Function::New(env, VkPipelineVertexInputDivisorStateCreateInfoEXT_pVertexBindingDivisors_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_maxVertexAttribDivisor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_maxVertexAttribDivisor_offsetof);
#endif
#ifdef VK_EXT_pci_bus_info
    exports["VkPhysicalDevicePCIBusInfoPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePCIBusInfoPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_pci_bus_info
    exports["VkPhysicalDevicePCIBusInfoPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePCIBusInfoPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_pci_bus_info
    exports["VkPhysicalDevicePCIBusInfoPropertiesEXT_pciDomain_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePCIBusInfoPropertiesEXT_pciDomain_offsetof);
#endif
#ifdef VK_EXT_pci_bus_info
    exports["VkPhysicalDevicePCIBusInfoPropertiesEXT_pciBus_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePCIBusInfoPropertiesEXT_pciBus_offsetof);
#endif
#ifdef VK_EXT_pci_bus_info
    exports["VkPhysicalDevicePCIBusInfoPropertiesEXT_pciDevice_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePCIBusInfoPropertiesEXT_pciDevice_offsetof);
#endif
#ifdef VK_EXT_pci_bus_info
    exports["VkPhysicalDevicePCIBusInfoPropertiesEXT_pciFunction_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePCIBusInfoPropertiesEXT_pciFunction_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkImportAndroidHardwareBufferInfoANDROID_sType_offsetof"] = Napi::Function::New(env, VkImportAndroidHardwareBufferInfoANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkImportAndroidHardwareBufferInfoANDROID_pNext_offsetof"] = Napi::Function::New(env, VkImportAndroidHardwareBufferInfoANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkImportAndroidHardwareBufferInfoANDROID_buffer_offsetof"] = Napi::Function::New(env, VkImportAndroidHardwareBufferInfoANDROID_buffer_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferUsageANDROID_sType_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferUsageANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferUsageANDROID_pNext_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferUsageANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferUsageANDROID_androidHardwareBufferUsage_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferUsageANDROID_androidHardwareBufferUsage_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferPropertiesANDROID_sType_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferPropertiesANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferPropertiesANDROID_pNext_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferPropertiesANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferPropertiesANDROID_allocationSize_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferPropertiesANDROID_allocationSize_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferPropertiesANDROID_memoryTypeBits_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferPropertiesANDROID_memoryTypeBits_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkMemoryGetAndroidHardwareBufferInfoANDROID_sType_offsetof"] = Napi::Function::New(env, VkMemoryGetAndroidHardwareBufferInfoANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkMemoryGetAndroidHardwareBufferInfoANDROID_pNext_offsetof"] = Napi::Function::New(env, VkMemoryGetAndroidHardwareBufferInfoANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkMemoryGetAndroidHardwareBufferInfoANDROID_memory_offsetof"] = Napi::Function::New(env, VkMemoryGetAndroidHardwareBufferInfoANDROID_memory_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_sType_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_pNext_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_format_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_format_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_externalFormat_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_externalFormat_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_formatFeatures_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_formatFeatures_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_samplerYcbcrConversionComponents_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_samplerYcbcrConversionComponents_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedYcbcrModel_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedYcbcrModel_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedYcbcrRange_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedYcbcrRange_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedXChromaOffset_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedXChromaOffset_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedYChromaOffset_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatPropertiesANDROID_suggestedYChromaOffset_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkCommandBufferInheritanceConditionalRenderingInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceConditionalRenderingInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkCommandBufferInheritanceConditionalRenderingInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceConditionalRenderingInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkCommandBufferInheritanceConditionalRenderingInfoEXT_conditionalRenderingEnable_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceConditionalRenderingInfoEXT_conditionalRenderingEnable_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkExternalFormatANDROID_sType_offsetof"] = Napi::Function::New(env, VkExternalFormatANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkExternalFormatANDROID_pNext_offsetof"] = Napi::Function::New(env, VkExternalFormatANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkExternalFormatANDROID_externalFormat_offsetof"] = Napi::Function::New(env, VkExternalFormatANDROID_externalFormat_offsetof);
#endif
    exports["VkPhysicalDevice8BitStorageFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevice8BitStorageFeatures_sType_offsetof);
    exports["VkPhysicalDevice8BitStorageFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevice8BitStorageFeatures_pNext_offsetof);
    exports["VkPhysicalDevice8BitStorageFeatures_storageBuffer8BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDevice8BitStorageFeatures_storageBuffer8BitAccess_offsetof);
    exports["VkPhysicalDevice8BitStorageFeatures_uniformAndStorageBuffer8BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDevice8BitStorageFeatures_uniformAndStorageBuffer8BitAccess_offsetof);
    exports["VkPhysicalDevice8BitStorageFeatures_storagePushConstant8_offsetof"] = Napi::Function::New(env, VkPhysicalDevice8BitStorageFeatures_storagePushConstant8_offsetof);

#ifdef VK_EXT_conditional_rendering
    exports["VkPhysicalDeviceConditionalRenderingFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConditionalRenderingFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkPhysicalDeviceConditionalRenderingFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConditionalRenderingFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkPhysicalDeviceConditionalRenderingFeaturesEXT_conditionalRendering_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConditionalRenderingFeaturesEXT_conditionalRendering_offsetof);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["VkPhysicalDeviceConditionalRenderingFeaturesEXT_inheritedConditionalRendering_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceConditionalRenderingFeaturesEXT_inheritedConditionalRendering_offsetof);
#endif
    exports["VkPhysicalDeviceVulkanMemoryModelFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkanMemoryModelFeatures_sType_offsetof);
    exports["VkPhysicalDeviceVulkanMemoryModelFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkanMemoryModelFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceVulkanMemoryModelFeatures_vulkanMemoryModel_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkanMemoryModelFeatures_vulkanMemoryModel_offsetof);
    exports["VkPhysicalDeviceVulkanMemoryModelFeatures_vulkanMemoryModelDeviceScope_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkanMemoryModelFeatures_vulkanMemoryModelDeviceScope_offsetof);
    exports["VkPhysicalDeviceVulkanMemoryModelFeatures_vulkanMemoryModelAvailabilityVisibilityChains_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkanMemoryModelFeatures_vulkanMemoryModelAvailabilityVisibilityChains_offsetof);

    exports["VkPhysicalDeviceShaderAtomicInt64Features_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicInt64Features_sType_offsetof);
    exports["VkPhysicalDeviceShaderAtomicInt64Features_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicInt64Features_pNext_offsetof);
    exports["VkPhysicalDeviceShaderAtomicInt64Features_shaderBufferInt64Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicInt64Features_shaderBufferInt64Atomics_offsetof);
    exports["VkPhysicalDeviceShaderAtomicInt64Features_shaderSharedInt64Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicInt64Features_shaderSharedInt64Atomics_offsetof);

#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat32Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat32Atomics_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat32AtomicAdd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat32AtomicAdd_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat64Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat64Atomics_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat64AtomicAdd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderBufferFloat64AtomicAdd_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat32Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat32Atomics_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat32AtomicAdd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat32AtomicAdd_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat64Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat64Atomics_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat64AtomicAdd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderSharedFloat64AtomicAdd_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderImageFloat32Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderImageFloat32Atomics_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderImageFloat32AtomicAdd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_shaderImageFloat32AtomicAdd_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_sparseImageFloat32Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_sparseImageFloat32Atomics_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float
    exports["VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_sparseImageFloat32AtomicAdd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_sparseImageFloat32AtomicAdd_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat16Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat16Atomics_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat16AtomicAdd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat16AtomicAdd_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat16AtomicMinMax_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat16AtomicMinMax_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat32AtomicMinMax_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat32AtomicMinMax_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat64AtomicMinMax_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderBufferFloat64AtomicMinMax_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat16Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat16Atomics_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat16AtomicAdd_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat16AtomicAdd_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat16AtomicMinMax_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat16AtomicMinMax_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat32AtomicMinMax_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat32AtomicMinMax_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat64AtomicMinMax_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderSharedFloat64AtomicMinMax_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderImageFloat32AtomicMinMax_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_shaderImageFloat32AtomicMinMax_offsetof);
#endif
#ifdef VK_EXT_shader_atomic_float2
    exports["VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_sparseImageFloat32AtomicMinMax_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_sparseImageFloat32AtomicMinMax_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_vertexAttributeInstanceRateDivisor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_vertexAttributeInstanceRateDivisor_offsetof);
#endif
#ifdef VK_EXT_vertex_attribute_divisor
    exports["VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_vertexAttributeInstanceRateZeroDivisor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_vertexAttributeInstanceRateZeroDivisor_offsetof);
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
    exports["VkQueueFamilyCheckpointPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkQueueFamilyCheckpointPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
    exports["VkQueueFamilyCheckpointPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkQueueFamilyCheckpointPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
    exports["VkQueueFamilyCheckpointPropertiesNV_checkpointExecutionStageMask_offsetof"] = Napi::Function::New(env, VkQueueFamilyCheckpointPropertiesNV_checkpointExecutionStageMask_offsetof);
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
    exports["VkCheckpointDataNV_sType_offsetof"] = Napi::Function::New(env, VkCheckpointDataNV_sType_offsetof);
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
    exports["VkCheckpointDataNV_pNext_offsetof"] = Napi::Function::New(env, VkCheckpointDataNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
    exports["VkCheckpointDataNV_stage_offsetof"] = Napi::Function::New(env, VkCheckpointDataNV_stage_offsetof);
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
    exports["VkCheckpointDataNV_pCheckpointMarker_offsetof"] = Napi::Function::New(env, VkCheckpointDataNV_pCheckpointMarker_offsetof);
#endif
    exports["VkPhysicalDeviceDepthStencilResolveProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthStencilResolveProperties_sType_offsetof);
    exports["VkPhysicalDeviceDepthStencilResolveProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthStencilResolveProperties_pNext_offsetof);
    exports["VkPhysicalDeviceDepthStencilResolveProperties_supportedDepthResolveModes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthStencilResolveProperties_supportedDepthResolveModes_offsetof);
    exports["VkPhysicalDeviceDepthStencilResolveProperties_supportedStencilResolveModes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthStencilResolveProperties_supportedStencilResolveModes_offsetof);
    exports["VkPhysicalDeviceDepthStencilResolveProperties_independentResolveNone_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthStencilResolveProperties_independentResolveNone_offsetof);
    exports["VkPhysicalDeviceDepthStencilResolveProperties_independentResolve_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthStencilResolveProperties_independentResolve_offsetof);

    exports["VkSubpassDescriptionDepthStencilResolve_sType_offsetof"] = Napi::Function::New(env, VkSubpassDescriptionDepthStencilResolve_sType_offsetof);
    exports["VkSubpassDescriptionDepthStencilResolve_pNext_offsetof"] = Napi::Function::New(env, VkSubpassDescriptionDepthStencilResolve_pNext_offsetof);
    exports["VkSubpassDescriptionDepthStencilResolve_depthResolveMode_offsetof"] = Napi::Function::New(env, VkSubpassDescriptionDepthStencilResolve_depthResolveMode_offsetof);
    exports["VkSubpassDescriptionDepthStencilResolve_stencilResolveMode_offsetof"] = Napi::Function::New(env, VkSubpassDescriptionDepthStencilResolve_stencilResolveMode_offsetof);
    exports["VkSubpassDescriptionDepthStencilResolve_pDepthStencilResolveAttachment_offsetof"] = Napi::Function::New(env, VkSubpassDescriptionDepthStencilResolve_pDepthStencilResolveAttachment_offsetof);

#ifdef VK_EXT_astc_decode_mode
    exports["VkImageViewASTCDecodeModeEXT_sType_offsetof"] = Napi::Function::New(env, VkImageViewASTCDecodeModeEXT_sType_offsetof);
#endif
#ifdef VK_EXT_astc_decode_mode
    exports["VkImageViewASTCDecodeModeEXT_pNext_offsetof"] = Napi::Function::New(env, VkImageViewASTCDecodeModeEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_astc_decode_mode
    exports["VkImageViewASTCDecodeModeEXT_decodeMode_offsetof"] = Napi::Function::New(env, VkImageViewASTCDecodeModeEXT_decodeMode_offsetof);
#endif
#ifdef VK_EXT_astc_decode_mode
    exports["VkPhysicalDeviceASTCDecodeFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceASTCDecodeFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_astc_decode_mode
    exports["VkPhysicalDeviceASTCDecodeFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceASTCDecodeFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_astc_decode_mode
    exports["VkPhysicalDeviceASTCDecodeFeaturesEXT_decodeModeSharedExponent_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceASTCDecodeFeaturesEXT_decodeModeSharedExponent_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackFeaturesEXT_transformFeedback_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackFeaturesEXT_transformFeedback_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackFeaturesEXT_geometryStreams_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackFeaturesEXT_geometryStreams_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackStreams_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackStreams_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBuffers_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBufferSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBufferSize_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackStreamDataSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackStreamDataSize_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBufferDataSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBufferDataSize_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBufferDataStride_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_maxTransformFeedbackBufferDataStride_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackQueries_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackQueries_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackStreamsLinesTriangles_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackStreamsLinesTriangles_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackRasterizationStreamSelect_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackRasterizationStreamSelect_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackDraw_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTransformFeedbackPropertiesEXT_transformFeedbackDraw_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPipelineRasterizationStateStreamCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateStreamCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPipelineRasterizationStateStreamCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateStreamCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPipelineRasterizationStateStreamCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateStreamCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_transform_feedback
    exports["VkPipelineRasterizationStateStreamCreateInfoEXT_rasterizationStream_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationStateStreamCreateInfoEXT_rasterizationStream_offsetof);
#endif
#ifdef VK_NV_representative_fragment_test
    exports["VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_representative_fragment_test
    exports["VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_representative_fragment_test
    exports["VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_representativeFragmentTest_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_representativeFragmentTest_offsetof);
#endif
#ifdef VK_NV_representative_fragment_test
    exports["VkPipelineRepresentativeFragmentTestStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineRepresentativeFragmentTestStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_representative_fragment_test
    exports["VkPipelineRepresentativeFragmentTestStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRepresentativeFragmentTestStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_representative_fragment_test
    exports["VkPipelineRepresentativeFragmentTestStateCreateInfoNV_representativeFragmentTestEnable_offsetof"] = Napi::Function::New(env, VkPipelineRepresentativeFragmentTestStateCreateInfoNV_representativeFragmentTestEnable_offsetof);
#endif
#ifdef VK_NV_scissor_exclusive
    exports["VkPhysicalDeviceExclusiveScissorFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExclusiveScissorFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_scissor_exclusive
    exports["VkPhysicalDeviceExclusiveScissorFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExclusiveScissorFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_scissor_exclusive
    exports["VkPhysicalDeviceExclusiveScissorFeaturesNV_exclusiveScissor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExclusiveScissorFeaturesNV_exclusiveScissor_offsetof);
#endif
#ifdef VK_NV_scissor_exclusive
    exports["VkPipelineViewportExclusiveScissorStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineViewportExclusiveScissorStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_scissor_exclusive
    exports["VkPipelineViewportExclusiveScissorStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineViewportExclusiveScissorStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_scissor_exclusive
    exports["VkPipelineViewportExclusiveScissorStateCreateInfoNV_exclusiveScissorCount_offsetof"] = Napi::Function::New(env, VkPipelineViewportExclusiveScissorStateCreateInfoNV_exclusiveScissorCount_offsetof);
#endif
#ifdef VK_NV_scissor_exclusive
    exports["VkPipelineViewportExclusiveScissorStateCreateInfoNV_pExclusiveScissors_offsetof"] = Napi::Function::New(env, VkPipelineViewportExclusiveScissorStateCreateInfoNV_pExclusiveScissors_offsetof);
#endif
#ifdef VK_NV_corner_sampled_image
    exports["VkPhysicalDeviceCornerSampledImageFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCornerSampledImageFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_corner_sampled_image
    exports["VkPhysicalDeviceCornerSampledImageFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCornerSampledImageFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_corner_sampled_image
    exports["VkPhysicalDeviceCornerSampledImageFeaturesNV_cornerSampledImage_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCornerSampledImageFeaturesNV_cornerSampledImage_offsetof);
#endif
#ifdef VK_NV_compute_shader_derivatives
    exports["VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_compute_shader_derivatives
    exports["VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_compute_shader_derivatives
    exports["VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_computeDerivativeGroupQuads_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_computeDerivativeGroupQuads_offsetof);
#endif
#ifdef VK_NV_compute_shader_derivatives
    exports["VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_computeDerivativeGroupLinear_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_computeDerivativeGroupLinear_offsetof);
#endif

#ifdef VK_NV_shader_image_footprint
    exports["VkPhysicalDeviceShaderImageFootprintFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderImageFootprintFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_shader_image_footprint
    exports["VkPhysicalDeviceShaderImageFootprintFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderImageFootprintFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_shader_image_footprint
    exports["VkPhysicalDeviceShaderImageFootprintFeaturesNV_imageFootprint_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderImageFootprintFeaturesNV_imageFootprint_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation_image_aliasing
    exports["VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation_image_aliasing
    exports["VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_dedicated_allocation_image_aliasing
    exports["VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_dedicatedAllocationImageAliasing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_dedicatedAllocationImageAliasing_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkPhysicalDeviceCopyMemoryIndirectFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkPhysicalDeviceCopyMemoryIndirectFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkPhysicalDeviceCopyMemoryIndirectFeaturesNV_indirectCopy_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV_indirectCopy_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkPhysicalDeviceCopyMemoryIndirectPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkPhysicalDeviceCopyMemoryIndirectPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["VkPhysicalDeviceCopyMemoryIndirectPropertiesNV_supportedQueues_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV_supportedQueues_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkPhysicalDeviceMemoryDecompressionFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryDecompressionFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkPhysicalDeviceMemoryDecompressionFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryDecompressionFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkPhysicalDeviceMemoryDecompressionFeaturesNV_memoryDecompression_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryDecompressionFeaturesNV_memoryDecompression_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkPhysicalDeviceMemoryDecompressionPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryDecompressionPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkPhysicalDeviceMemoryDecompressionPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryDecompressionPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkPhysicalDeviceMemoryDecompressionPropertiesNV_decompressionMethods_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryDecompressionPropertiesNV_decompressionMethods_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkPhysicalDeviceMemoryDecompressionPropertiesNV_maxDecompressionIndirectCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryDecompressionPropertiesNV_maxDecompressionIndirectCount_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkShadingRatePaletteNV_shadingRatePaletteEntryCount_offsetof"] = Napi::Function::New(env, VkShadingRatePaletteNV_shadingRatePaletteEntryCount_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkShadingRatePaletteNV_pShadingRatePaletteEntries_offsetof"] = Napi::Function::New(env, VkShadingRatePaletteNV_pShadingRatePaletteEntries_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportShadingRateImageStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineViewportShadingRateImageStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportShadingRateImageStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineViewportShadingRateImageStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportShadingRateImageStateCreateInfoNV_shadingRateImageEnable_offsetof"] = Napi::Function::New(env, VkPipelineViewportShadingRateImageStateCreateInfoNV_shadingRateImageEnable_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportShadingRateImageStateCreateInfoNV_viewportCount_offsetof"] = Napi::Function::New(env, VkPipelineViewportShadingRateImageStateCreateInfoNV_viewportCount_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportShadingRateImageStateCreateInfoNV_pShadingRatePalettes_offsetof"] = Napi::Function::New(env, VkPipelineViewportShadingRateImageStateCreateInfoNV_pShadingRatePalettes_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPhysicalDeviceShadingRateImageFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShadingRateImageFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPhysicalDeviceShadingRateImageFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShadingRateImageFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPhysicalDeviceShadingRateImageFeaturesNV_shadingRateImage_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShadingRateImageFeaturesNV_shadingRateImage_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPhysicalDeviceShadingRateImageFeaturesNV_shadingRateCoarseSampleOrder_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShadingRateImageFeaturesNV_shadingRateCoarseSampleOrder_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPhysicalDeviceShadingRateImagePropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShadingRateImagePropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPhysicalDeviceShadingRateImagePropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShadingRateImagePropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPhysicalDeviceShadingRateImagePropertiesNV_shadingRateTexelSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShadingRateImagePropertiesNV_shadingRateTexelSize_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPhysicalDeviceShadingRateImagePropertiesNV_shadingRatePaletteSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShadingRateImagePropertiesNV_shadingRatePaletteSize_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPhysicalDeviceShadingRateImagePropertiesNV_shadingRateMaxCoarseSamples_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShadingRateImagePropertiesNV_shadingRateMaxCoarseSamples_offsetof);
#endif
#ifdef VK_HUAWEI_invocation_mask
    exports["VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_sType_offsetof);
#endif
#ifdef VK_HUAWEI_invocation_mask
    exports["VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_pNext_offsetof);
#endif
#ifdef VK_HUAWEI_invocation_mask
    exports["VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_invocationMask_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_invocationMask_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkCoarseSampleLocationNV_pixelX_offsetof"] = Napi::Function::New(env, VkCoarseSampleLocationNV_pixelX_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkCoarseSampleLocationNV_pixelY_offsetof"] = Napi::Function::New(env, VkCoarseSampleLocationNV_pixelY_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkCoarseSampleLocationNV_sample_offsetof"] = Napi::Function::New(env, VkCoarseSampleLocationNV_sample_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkCoarseSampleOrderCustomNV_shadingRate_offsetof"] = Napi::Function::New(env, VkCoarseSampleOrderCustomNV_shadingRate_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkCoarseSampleOrderCustomNV_sampleCount_offsetof"] = Napi::Function::New(env, VkCoarseSampleOrderCustomNV_sampleCount_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkCoarseSampleOrderCustomNV_sampleLocationCount_offsetof"] = Napi::Function::New(env, VkCoarseSampleOrderCustomNV_sampleLocationCount_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkCoarseSampleOrderCustomNV_pSampleLocations_offsetof"] = Napi::Function::New(env, VkCoarseSampleOrderCustomNV_pSampleLocations_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_sampleOrderType_offsetof"] = Napi::Function::New(env, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_sampleOrderType_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_customSampleOrderCount_offsetof"] = Napi::Function::New(env, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_customSampleOrderCount_offsetof);
#endif
#ifdef VK_NV_shading_rate_image
    exports["VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_pCustomSampleOrders_offsetof"] = Napi::Function::New(env, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_pCustomSampleOrders_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesNV_taskShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesNV_taskShader_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesNV_meshShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesNV_meshShader_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxDrawMeshTasksCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxDrawMeshTasksCount_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskWorkGroupInvocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskWorkGroupInvocations_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskWorkGroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskWorkGroupSize_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskTotalMemorySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskTotalMemorySize_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskOutputCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxTaskOutputCount_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshWorkGroupInvocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshWorkGroupInvocations_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshWorkGroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshWorkGroupSize_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshTotalMemorySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshTotalMemorySize_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshOutputVertices_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshOutputVertices_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshOutputPrimitives_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshOutputPrimitives_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshMultiviewViewCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_maxMeshMultiviewViewCount_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_meshOutputPerVertexGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_meshOutputPerVertexGranularity_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesNV_meshOutputPerPrimitiveGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesNV_meshOutputPerPrimitiveGranularity_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkDrawMeshTasksIndirectCommandNV_taskCount_offsetof"] = Napi::Function::New(env, VkDrawMeshTasksIndirectCommandNV_taskCount_offsetof);
#endif
#ifdef VK_NV_mesh_shader
    exports["VkDrawMeshTasksIndirectCommandNV_firstTask_offsetof"] = Napi::Function::New(env, VkDrawMeshTasksIndirectCommandNV_firstTask_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesEXT_taskShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesEXT_taskShader_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesEXT_meshShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesEXT_meshShader_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesEXT_multiviewMeshShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesEXT_multiviewMeshShader_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesEXT_primitiveFragmentShadingRateMeshShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesEXT_primitiveFragmentShadingRateMeshShader_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderFeaturesEXT_meshShaderQueries_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderFeaturesEXT_meshShaderQueries_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupTotalCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupTotalCount_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupCount_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupInvocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupInvocations_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskWorkGroupSize_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskPayloadSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskPayloadSize_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskSharedMemorySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskSharedMemorySize_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskPayloadAndSharedMemorySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxTaskPayloadAndSharedMemorySize_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupTotalCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupTotalCount_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupCount_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupInvocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupInvocations_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshWorkGroupSize_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshSharedMemorySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshSharedMemorySize_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshPayloadAndSharedMemorySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshPayloadAndSharedMemorySize_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputMemorySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputMemorySize_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshPayloadAndOutputMemorySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshPayloadAndOutputMemorySize_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputComponents_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputComponents_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputVertices_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputVertices_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputPrimitives_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputPrimitives_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputLayers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshOutputLayers_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshMultiviewViewCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxMeshMultiviewViewCount_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_meshOutputPerVertexGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_meshOutputPerVertexGranularity_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_meshOutputPerPrimitiveGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_meshOutputPerPrimitiveGranularity_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxPreferredTaskWorkGroupInvocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxPreferredTaskWorkGroupInvocations_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_maxPreferredMeshWorkGroupInvocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_maxPreferredMeshWorkGroupInvocations_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_prefersLocalInvocationVertexOutput_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_prefersLocalInvocationVertexOutput_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_prefersLocalInvocationPrimitiveOutput_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_prefersLocalInvocationPrimitiveOutput_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_prefersCompactVertexOutput_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_prefersCompactVertexOutput_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkPhysicalDeviceMeshShaderPropertiesEXT_prefersCompactPrimitiveOutput_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMeshShaderPropertiesEXT_prefersCompactPrimitiveOutput_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkDrawMeshTasksIndirectCommandEXT_groupCountX_offsetof"] = Napi::Function::New(env, VkDrawMeshTasksIndirectCommandEXT_groupCountX_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkDrawMeshTasksIndirectCommandEXT_groupCountY_offsetof"] = Napi::Function::New(env, VkDrawMeshTasksIndirectCommandEXT_groupCountY_offsetof);
#endif
#ifdef VK_EXT_mesh_shader
    exports["VkDrawMeshTasksIndirectCommandEXT_groupCountZ_offsetof"] = Napi::Function::New(env, VkDrawMeshTasksIndirectCommandEXT_groupCountZ_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingShaderGroupCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingShaderGroupCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingShaderGroupCreateInfoNV_type_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoNV_type_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingShaderGroupCreateInfoNV_generalShader_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoNV_generalShader_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingShaderGroupCreateInfoNV_closestHitShader_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoNV_closestHitShader_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingShaderGroupCreateInfoNV_anyHitShader_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoNV_anyHitShader_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingShaderGroupCreateInfoNV_intersectionShader_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoNV_intersectionShader_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingShaderGroupCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingShaderGroupCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingShaderGroupCreateInfoKHR_type_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoKHR_type_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingShaderGroupCreateInfoKHR_generalShader_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoKHR_generalShader_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingShaderGroupCreateInfoKHR_closestHitShader_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoKHR_closestHitShader_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingShaderGroupCreateInfoKHR_anyHitShader_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoKHR_anyHitShader_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingShaderGroupCreateInfoKHR_intersectionShader_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoKHR_intersectionShader_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingShaderGroupCreateInfoKHR_pShaderGroupCaptureReplayHandle_offsetof"] = Napi::Function::New(env, VkRayTracingShaderGroupCreateInfoKHR_pShaderGroupCaptureReplayHandle_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_flags_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_stageCount_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_stageCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_pStages_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_pStages_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_groupCount_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_groupCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_pGroups_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_pGroups_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_maxRecursionDepth_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_maxRecursionDepth_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_layout_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_layout_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_basePipelineHandle_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_basePipelineHandle_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkRayTracingPipelineCreateInfoNV_basePipelineIndex_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoNV_basePipelineIndex_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_stageCount_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_stageCount_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_pStages_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_pStages_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_groupCount_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_groupCount_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_pGroups_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_pGroups_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_maxPipelineRayRecursionDepth_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_maxPipelineRayRecursionDepth_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_pLibraryInfo_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_pLibraryInfo_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_pLibraryInterface_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_pLibraryInterface_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_pDynamicState_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_pDynamicState_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_layout_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_layout_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_basePipelineHandle_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_basePipelineHandle_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineCreateInfoKHR_basePipelineIndex_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineCreateInfoKHR_basePipelineIndex_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_sType_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_pNext_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_vertexData_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_vertexData_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_vertexOffset_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_vertexOffset_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_vertexCount_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_vertexCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_vertexStride_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_vertexStride_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_vertexFormat_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_vertexFormat_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_indexData_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_indexData_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_indexOffset_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_indexOffset_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_indexCount_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_indexCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_indexType_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_indexType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_transformData_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_transformData_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryTrianglesNV_transformOffset_offsetof"] = Napi::Function::New(env, VkGeometryTrianglesNV_transformOffset_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryAABBNV_sType_offsetof"] = Napi::Function::New(env, VkGeometryAABBNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryAABBNV_pNext_offsetof"] = Napi::Function::New(env, VkGeometryAABBNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryAABBNV_aabbData_offsetof"] = Napi::Function::New(env, VkGeometryAABBNV_aabbData_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryAABBNV_numAABBs_offsetof"] = Napi::Function::New(env, VkGeometryAABBNV_numAABBs_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryAABBNV_stride_offsetof"] = Napi::Function::New(env, VkGeometryAABBNV_stride_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryAABBNV_offset_offsetof"] = Napi::Function::New(env, VkGeometryAABBNV_offset_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryDataNV_triangles_offsetof"] = Napi::Function::New(env, VkGeometryDataNV_triangles_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryDataNV_aabbs_offsetof"] = Napi::Function::New(env, VkGeometryDataNV_aabbs_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryNV_sType_offsetof"] = Napi::Function::New(env, VkGeometryNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryNV_pNext_offsetof"] = Napi::Function::New(env, VkGeometryNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryNV_geometryType_offsetof"] = Napi::Function::New(env, VkGeometryNV_geometryType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryNV_geometry_offsetof"] = Napi::Function::New(env, VkGeometryNV_geometry_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkGeometryNV_flags_offsetof"] = Napi::Function::New(env, VkGeometryNV_flags_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureInfoNV_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureInfoNV_type_offsetof"] = Napi::Function::New(env, VkAccelerationStructureInfoNV_type_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureInfoNV_flags_offsetof"] = Napi::Function::New(env, VkAccelerationStructureInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureInfoNV_instanceCount_offsetof"] = Napi::Function::New(env, VkAccelerationStructureInfoNV_instanceCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureInfoNV_geometryCount_offsetof"] = Napi::Function::New(env, VkAccelerationStructureInfoNV_geometryCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureInfoNV_pGeometries_offsetof"] = Napi::Function::New(env, VkAccelerationStructureInfoNV_pGeometries_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureCreateInfoNV_compactedSize_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoNV_compactedSize_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureCreateInfoNV_info_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoNV_info_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkBindAccelerationStructureMemoryInfoNV_sType_offsetof"] = Napi::Function::New(env, VkBindAccelerationStructureMemoryInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkBindAccelerationStructureMemoryInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkBindAccelerationStructureMemoryInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkBindAccelerationStructureMemoryInfoNV_accelerationStructure_offsetof"] = Napi::Function::New(env, VkBindAccelerationStructureMemoryInfoNV_accelerationStructure_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkBindAccelerationStructureMemoryInfoNV_memory_offsetof"] = Napi::Function::New(env, VkBindAccelerationStructureMemoryInfoNV_memory_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkBindAccelerationStructureMemoryInfoNV_memoryOffset_offsetof"] = Napi::Function::New(env, VkBindAccelerationStructureMemoryInfoNV_memoryOffset_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkBindAccelerationStructureMemoryInfoNV_deviceIndexCount_offsetof"] = Napi::Function::New(env, VkBindAccelerationStructureMemoryInfoNV_deviceIndexCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkBindAccelerationStructureMemoryInfoNV_pDeviceIndices_offsetof"] = Napi::Function::New(env, VkBindAccelerationStructureMemoryInfoNV_pDeviceIndices_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkWriteDescriptorSetAccelerationStructureKHR_sType_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetAccelerationStructureKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkWriteDescriptorSetAccelerationStructureKHR_pNext_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetAccelerationStructureKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkWriteDescriptorSetAccelerationStructureKHR_accelerationStructureCount_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetAccelerationStructureKHR_accelerationStructureCount_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkWriteDescriptorSetAccelerationStructureKHR_pAccelerationStructures_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetAccelerationStructureKHR_pAccelerationStructures_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkWriteDescriptorSetAccelerationStructureNV_sType_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetAccelerationStructureNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkWriteDescriptorSetAccelerationStructureNV_pNext_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetAccelerationStructureNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkWriteDescriptorSetAccelerationStructureNV_accelerationStructureCount_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetAccelerationStructureNV_accelerationStructureCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkWriteDescriptorSetAccelerationStructureNV_pAccelerationStructures_offsetof"] = Napi::Function::New(env, VkWriteDescriptorSetAccelerationStructureNV_pAccelerationStructures_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureMemoryRequirementsInfoNV_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMemoryRequirementsInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureMemoryRequirementsInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMemoryRequirementsInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureMemoryRequirementsInfoNV_type_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMemoryRequirementsInfoNV_type_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkAccelerationStructureMemoryRequirementsInfoNV_accelerationStructure_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMemoryRequirementsInfoNV_accelerationStructure_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructureFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructureFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructureFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructureFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructure_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructure_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructureCaptureReplay_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructureCaptureReplay_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructureIndirectBuild_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructureIndirectBuild_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructureHostCommands_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructureFeaturesKHR_accelerationStructureHostCommands_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructureFeaturesKHR_descriptorBindingAccelerationStructureUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructureFeaturesKHR_descriptorBindingAccelerationStructureUpdateAfterBind_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelineFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelineFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelineFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelineFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipeline_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipeline_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipelineShaderGroupHandleCaptureReplay_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipelineShaderGroupHandleCaptureReplay_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipelineShaderGroupHandleCaptureReplayMixed_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipelineShaderGroupHandleCaptureReplayMixed_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipelineTraceRaysIndirect_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTracingPipelineTraceRaysIndirect_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTraversalPrimitiveCulling_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelineFeaturesKHR_rayTraversalPrimitiveCulling_offsetof);
#endif
#ifdef VK_KHR_ray_query
    exports["VkPhysicalDeviceRayQueryFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayQueryFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_ray_query
    exports["VkPhysicalDeviceRayQueryFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayQueryFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_ray_query
    exports["VkPhysicalDeviceRayQueryFeaturesKHR_rayQuery_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayQueryFeaturesKHR_rayQuery_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxGeometryCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxGeometryCount_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxInstanceCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxInstanceCount_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxPrimitiveCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxPrimitiveCount_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxPerStageDescriptorAccelerationStructures_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxPerStageDescriptorAccelerationStructures_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxPerStageDescriptorUpdateAfterBindAccelerationStructures_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxPerStageDescriptorUpdateAfterBindAccelerationStructures_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxDescriptorSetAccelerationStructures_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxDescriptorSetAccelerationStructures_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxDescriptorSetUpdateAfterBindAccelerationStructures_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_maxDescriptorSetUpdateAfterBindAccelerationStructures_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkPhysicalDeviceAccelerationStructurePropertiesKHR_minAccelerationStructureScratchOffsetAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAccelerationStructurePropertiesKHR_minAccelerationStructureScratchOffsetAlignment_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupHandleSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupHandleSize_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxRayRecursionDepth_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxRayRecursionDepth_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxShaderGroupStride_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxShaderGroupStride_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupBaseAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupBaseAlignment_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupHandleCaptureReplaySize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupHandleCaptureReplaySize_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxRayDispatchInvocationCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxRayDispatchInvocationCount_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupHandleAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_shaderGroupHandleAlignment_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxRayHitAttributeSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPipelinePropertiesKHR_maxRayHitAttributeSize_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_shaderGroupHandleSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_shaderGroupHandleSize_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_maxRecursionDepth_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_maxRecursionDepth_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_maxShaderGroupStride_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_maxShaderGroupStride_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_shaderGroupBaseAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_shaderGroupBaseAlignment_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_maxGeometryCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_maxGeometryCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_maxInstanceCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_maxInstanceCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_maxTriangleCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_maxTriangleCount_offsetof);
#endif
#ifdef VK_NV_ray_tracing
    exports["VkPhysicalDeviceRayTracingPropertiesNV_maxDescriptorSetAccelerationStructures_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingPropertiesNV_maxDescriptorSetAccelerationStructures_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkStridedDeviceAddressRegionKHR_deviceAddress_offsetof"] = Napi::Function::New(env, VkStridedDeviceAddressRegionKHR_deviceAddress_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkStridedDeviceAddressRegionKHR_stride_offsetof"] = Napi::Function::New(env, VkStridedDeviceAddressRegionKHR_stride_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkStridedDeviceAddressRegionKHR_size_offsetof"] = Napi::Function::New(env, VkStridedDeviceAddressRegionKHR_size_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkTraceRaysIndirectCommandKHR_width_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommandKHR_width_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkTraceRaysIndirectCommandKHR_height_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommandKHR_height_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkTraceRaysIndirectCommandKHR_depth_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommandKHR_depth_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_raygenShaderRecordAddress_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_raygenShaderRecordAddress_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_raygenShaderRecordSize_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_raygenShaderRecordSize_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_missShaderBindingTableAddress_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_missShaderBindingTableAddress_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_missShaderBindingTableSize_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_missShaderBindingTableSize_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_missShaderBindingTableStride_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_missShaderBindingTableStride_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_hitShaderBindingTableAddress_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_hitShaderBindingTableAddress_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_hitShaderBindingTableSize_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_hitShaderBindingTableSize_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_hitShaderBindingTableStride_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_hitShaderBindingTableStride_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_callableShaderBindingTableAddress_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_callableShaderBindingTableAddress_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_callableShaderBindingTableSize_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_callableShaderBindingTableSize_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_callableShaderBindingTableStride_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_callableShaderBindingTableStride_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_width_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_width_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_height_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_height_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkTraceRaysIndirectCommand2KHR_depth_offsetof"] = Napi::Function::New(env, VkTraceRaysIndirectCommand2KHR_depth_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_rayTracingMaintenance1_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_rayTracingMaintenance1_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_rayTracingPipelineTraceRaysIndirect2_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_rayTracingPipelineTraceRaysIndirect2_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesListEXT_sType_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesListEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesListEXT_pNext_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesListEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesListEXT_drmFormatModifierCount_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesListEXT_drmFormatModifierCount_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesListEXT_pDrmFormatModifierProperties_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesListEXT_pDrmFormatModifierProperties_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesEXT_drmFormatModifier_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesEXT_drmFormatModifier_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesEXT_drmFormatModifierPlaneCount_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesEXT_drmFormatModifierPlaneCount_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesEXT_drmFormatModifierTilingFeatures_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesEXT_drmFormatModifierTilingFeatures_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkPhysicalDeviceImageDrmFormatModifierInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageDrmFormatModifierInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkPhysicalDeviceImageDrmFormatModifierInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageDrmFormatModifierInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkPhysicalDeviceImageDrmFormatModifierInfoEXT_drmFormatModifier_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageDrmFormatModifierInfoEXT_drmFormatModifier_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkPhysicalDeviceImageDrmFormatModifierInfoEXT_sharingMode_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageDrmFormatModifierInfoEXT_sharingMode_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkPhysicalDeviceImageDrmFormatModifierInfoEXT_queueFamilyIndexCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageDrmFormatModifierInfoEXT_queueFamilyIndexCount_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkPhysicalDeviceImageDrmFormatModifierInfoEXT_pQueueFamilyIndices_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageDrmFormatModifierInfoEXT_pQueueFamilyIndices_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierListCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierListCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierListCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierListCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierListCreateInfoEXT_drmFormatModifierCount_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierListCreateInfoEXT_drmFormatModifierCount_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierListCreateInfoEXT_pDrmFormatModifiers_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierListCreateInfoEXT_pDrmFormatModifiers_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierExplicitCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierExplicitCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierExplicitCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierExplicitCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierExplicitCreateInfoEXT_drmFormatModifier_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierExplicitCreateInfoEXT_drmFormatModifier_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierExplicitCreateInfoEXT_drmFormatModifierPlaneCount_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierExplicitCreateInfoEXT_drmFormatModifierPlaneCount_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierExplicitCreateInfoEXT_pPlaneLayouts_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierExplicitCreateInfoEXT_pPlaneLayouts_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkImageDrmFormatModifierPropertiesEXT_drmFormatModifier_offsetof"] = Napi::Function::New(env, VkImageDrmFormatModifierPropertiesEXT_drmFormatModifier_offsetof);
#endif
    exports["VkImageStencilUsageCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkImageStencilUsageCreateInfo_sType_offsetof);
    exports["VkImageStencilUsageCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkImageStencilUsageCreateInfo_pNext_offsetof);
    exports["VkImageStencilUsageCreateInfo_stencilUsage_offsetof"] = Napi::Function::New(env, VkImageStencilUsageCreateInfo_stencilUsage_offsetof);

#ifdef VK_AMD_memory_overallocation_behavior
    exports["VkDeviceMemoryOverallocationCreateInfoAMD_sType_offsetof"] = Napi::Function::New(env, VkDeviceMemoryOverallocationCreateInfoAMD_sType_offsetof);
#endif
#ifdef VK_AMD_memory_overallocation_behavior
    exports["VkDeviceMemoryOverallocationCreateInfoAMD_pNext_offsetof"] = Napi::Function::New(env, VkDeviceMemoryOverallocationCreateInfoAMD_pNext_offsetof);
#endif
#ifdef VK_AMD_memory_overallocation_behavior
    exports["VkDeviceMemoryOverallocationCreateInfoAMD_overallocationBehavior_offsetof"] = Napi::Function::New(env, VkDeviceMemoryOverallocationCreateInfoAMD_overallocationBehavior_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapFeaturesEXT_fragmentDensityMap_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapFeaturesEXT_fragmentDensityMap_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapFeaturesEXT_fragmentDensityMapDynamic_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapFeaturesEXT_fragmentDensityMapDynamic_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapFeaturesEXT_fragmentDensityMapNonSubsampledImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapFeaturesEXT_fragmentDensityMapNonSubsampledImages_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map2
    exports["VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map2
    exports["VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map2
    exports["VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_fragmentDensityMapDeferred_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_fragmentDensityMapDeferred_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_fragmentDensityMapOffset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_fragmentDensityMapOffset_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapPropertiesEXT_minFragmentDensityTexelSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapPropertiesEXT_minFragmentDensityTexelSize_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapPropertiesEXT_maxFragmentDensityTexelSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapPropertiesEXT_maxFragmentDensityTexelSize_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkPhysicalDeviceFragmentDensityMapPropertiesEXT_fragmentDensityInvocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapPropertiesEXT_fragmentDensityInvocations_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map2
    exports["VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map2
    exports["VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map2
    exports["VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_subsampledLoads_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_subsampledLoads_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map2
    exports["VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_subsampledCoarseReconstructionEarlyAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_subsampledCoarseReconstructionEarlyAccess_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map2
    exports["VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_maxSubsampledArrayLayers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_maxSubsampledArrayLayers_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map2
    exports["VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_maxDescriptorSetSubsampledSamplers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_maxDescriptorSetSubsampledSamplers_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_fragmentDensityOffsetGranularity_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_fragmentDensityOffsetGranularity_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkRenderPassFragmentDensityMapCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkRenderPassFragmentDensityMapCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkRenderPassFragmentDensityMapCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassFragmentDensityMapCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_fragment_density_map
    exports["VkRenderPassFragmentDensityMapCreateInfoEXT_fragmentDensityMapAttachment_offsetof"] = Napi::Function::New(env, VkRenderPassFragmentDensityMapCreateInfoEXT_fragmentDensityMapAttachment_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkSubpassFragmentDensityMapOffsetEndInfoQCOM_sType_offsetof"] = Napi::Function::New(env, VkSubpassFragmentDensityMapOffsetEndInfoQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkSubpassFragmentDensityMapOffsetEndInfoQCOM_pNext_offsetof"] = Napi::Function::New(env, VkSubpassFragmentDensityMapOffsetEndInfoQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkSubpassFragmentDensityMapOffsetEndInfoQCOM_fragmentDensityOffsetCount_offsetof"] = Napi::Function::New(env, VkSubpassFragmentDensityMapOffsetEndInfoQCOM_fragmentDensityOffsetCount_offsetof);
#endif
#ifdef VK_QCOM_fragment_density_map_offset
    exports["VkSubpassFragmentDensityMapOffsetEndInfoQCOM_pFragmentDensityOffsets_offsetof"] = Napi::Function::New(env, VkSubpassFragmentDensityMapOffsetEndInfoQCOM_pFragmentDensityOffsets_offsetof);
#endif
    exports["VkPhysicalDeviceScalarBlockLayoutFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceScalarBlockLayoutFeatures_sType_offsetof);
    exports["VkPhysicalDeviceScalarBlockLayoutFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceScalarBlockLayoutFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceScalarBlockLayoutFeatures_scalarBlockLayout_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceScalarBlockLayoutFeatures_scalarBlockLayout_offsetof);

#ifdef VK_KHR_surface_protected_capabilities
    exports["VkSurfaceProtectedCapabilitiesKHR_sType_offsetof"] = Napi::Function::New(env, VkSurfaceProtectedCapabilitiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_surface_protected_capabilities
    exports["VkSurfaceProtectedCapabilitiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkSurfaceProtectedCapabilitiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_surface_protected_capabilities
    exports["VkSurfaceProtectedCapabilitiesKHR_supportsProtected_offsetof"] = Napi::Function::New(env, VkSurfaceProtectedCapabilitiesKHR_supportsProtected_offsetof);
#endif
    exports["VkPhysicalDeviceUniformBufferStandardLayoutFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceUniformBufferStandardLayoutFeatures_sType_offsetof);
    exports["VkPhysicalDeviceUniformBufferStandardLayoutFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceUniformBufferStandardLayoutFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceUniformBufferStandardLayoutFeatures_uniformBufferStandardLayout_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceUniformBufferStandardLayoutFeatures_uniformBufferStandardLayout_offsetof);

#ifdef VK_EXT_depth_clip_enable
    exports["VkPhysicalDeviceDepthClipEnableFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthClipEnableFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_depth_clip_enable
    exports["VkPhysicalDeviceDepthClipEnableFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthClipEnableFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_depth_clip_enable
    exports["VkPhysicalDeviceDepthClipEnableFeaturesEXT_depthClipEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthClipEnableFeaturesEXT_depthClipEnable_offsetof);
#endif
#ifdef VK_EXT_depth_clip_enable
    exports["VkPipelineRasterizationDepthClipStateCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationDepthClipStateCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_depth_clip_enable
    exports["VkPipelineRasterizationDepthClipStateCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationDepthClipStateCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_depth_clip_enable
    exports["VkPipelineRasterizationDepthClipStateCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationDepthClipStateCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_depth_clip_enable
    exports["VkPipelineRasterizationDepthClipStateCreateInfoEXT_depthClipEnable_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationDepthClipStateCreateInfoEXT_depthClipEnable_offsetof);
#endif
#ifdef VK_EXT_memory_budget
    exports["VkPhysicalDeviceMemoryBudgetPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryBudgetPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_memory_budget
    exports["VkPhysicalDeviceMemoryBudgetPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryBudgetPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_memory_budget
    exports["VkPhysicalDeviceMemoryBudgetPropertiesEXT_heapBudget_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryBudgetPropertiesEXT_heapBudget_offsetof);
#endif
#ifdef VK_EXT_memory_budget
    exports["VkPhysicalDeviceMemoryBudgetPropertiesEXT_heapUsage_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryBudgetPropertiesEXT_heapUsage_offsetof);
#endif
#ifdef VK_EXT_memory_priority
    exports["VkPhysicalDeviceMemoryPriorityFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryPriorityFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_memory_priority
    exports["VkPhysicalDeviceMemoryPriorityFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryPriorityFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_memory_priority
    exports["VkPhysicalDeviceMemoryPriorityFeaturesEXT_memoryPriority_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMemoryPriorityFeaturesEXT_memoryPriority_offsetof);
#endif
#ifdef VK_EXT_memory_priority
    exports["VkMemoryPriorityAllocateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkMemoryPriorityAllocateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_memory_priority
    exports["VkMemoryPriorityAllocateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkMemoryPriorityAllocateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_memory_priority
    exports["VkMemoryPriorityAllocateInfoEXT_priority_offsetof"] = Napi::Function::New(env, VkMemoryPriorityAllocateInfoEXT_priority_offsetof);
#endif
#ifdef VK_EXT_pageable_device_local_memory
    exports["VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_pageable_device_local_memory
    exports["VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_pageable_device_local_memory
    exports["VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_pageableDeviceLocalMemory_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_pageableDeviceLocalMemory_offsetof);
#endif
    exports["VkPhysicalDeviceBufferDeviceAddressFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeatures_sType_offsetof);
    exports["VkPhysicalDeviceBufferDeviceAddressFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceBufferDeviceAddressFeatures_bufferDeviceAddress_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeatures_bufferDeviceAddress_offsetof);
    exports["VkPhysicalDeviceBufferDeviceAddressFeatures_bufferDeviceAddressCaptureReplay_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeatures_bufferDeviceAddressCaptureReplay_offsetof);
    exports["VkPhysicalDeviceBufferDeviceAddressFeatures_bufferDeviceAddressMultiDevice_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeatures_bufferDeviceAddressMultiDevice_offsetof);

#ifdef VK_EXT_buffer_device_address
    exports["VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_buffer_device_address
    exports["VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_buffer_device_address
    exports["VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_bufferDeviceAddress_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_bufferDeviceAddress_offsetof);
#endif
#ifdef VK_EXT_buffer_device_address
    exports["VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_bufferDeviceAddressCaptureReplay_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_bufferDeviceAddressCaptureReplay_offsetof);
#endif
#ifdef VK_EXT_buffer_device_address
    exports["VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_bufferDeviceAddressMultiDevice_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_bufferDeviceAddressMultiDevice_offsetof);
#endif

    exports["VkBufferDeviceAddressInfo_sType_offsetof"] = Napi::Function::New(env, VkBufferDeviceAddressInfo_sType_offsetof);
    exports["VkBufferDeviceAddressInfo_pNext_offsetof"] = Napi::Function::New(env, VkBufferDeviceAddressInfo_pNext_offsetof);
    exports["VkBufferDeviceAddressInfo_buffer_offsetof"] = Napi::Function::New(env, VkBufferDeviceAddressInfo_buffer_offsetof);


    exports["VkBufferOpaqueCaptureAddressCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkBufferOpaqueCaptureAddressCreateInfo_sType_offsetof);
    exports["VkBufferOpaqueCaptureAddressCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkBufferOpaqueCaptureAddressCreateInfo_pNext_offsetof);
    exports["VkBufferOpaqueCaptureAddressCreateInfo_opaqueCaptureAddress_offsetof"] = Napi::Function::New(env, VkBufferOpaqueCaptureAddressCreateInfo_opaqueCaptureAddress_offsetof);

#ifdef VK_EXT_buffer_device_address
    exports["VkBufferDeviceAddressCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkBufferDeviceAddressCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_buffer_device_address
    exports["VkBufferDeviceAddressCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkBufferDeviceAddressCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_buffer_device_address
    exports["VkBufferDeviceAddressCreateInfoEXT_deviceAddress_offsetof"] = Napi::Function::New(env, VkBufferDeviceAddressCreateInfoEXT_deviceAddress_offsetof);
#endif
#ifdef VK_EXT_filter_cubic
    exports["VkPhysicalDeviceImageViewImageFormatInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageViewImageFormatInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_filter_cubic
    exports["VkPhysicalDeviceImageViewImageFormatInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageViewImageFormatInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_filter_cubic
    exports["VkPhysicalDeviceImageViewImageFormatInfoEXT_imageViewType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageViewImageFormatInfoEXT_imageViewType_offsetof);
#endif
#ifdef VK_EXT_filter_cubic
    exports["VkFilterCubicImageViewImageFormatPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkFilterCubicImageViewImageFormatPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_filter_cubic
    exports["VkFilterCubicImageViewImageFormatPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkFilterCubicImageViewImageFormatPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_filter_cubic
    exports["VkFilterCubicImageViewImageFormatPropertiesEXT_filterCubic_offsetof"] = Napi::Function::New(env, VkFilterCubicImageViewImageFormatPropertiesEXT_filterCubic_offsetof);
#endif
#ifdef VK_EXT_filter_cubic
    exports["VkFilterCubicImageViewImageFormatPropertiesEXT_filterCubicMinmax_offsetof"] = Napi::Function::New(env, VkFilterCubicImageViewImageFormatPropertiesEXT_filterCubicMinmax_offsetof);
#endif
    exports["VkPhysicalDeviceImagelessFramebufferFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImagelessFramebufferFeatures_sType_offsetof);
    exports["VkPhysicalDeviceImagelessFramebufferFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImagelessFramebufferFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceImagelessFramebufferFeatures_imagelessFramebuffer_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImagelessFramebufferFeatures_imagelessFramebuffer_offsetof);

    exports["VkFramebufferAttachmentsCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentsCreateInfo_sType_offsetof);
    exports["VkFramebufferAttachmentsCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentsCreateInfo_pNext_offsetof);
    exports["VkFramebufferAttachmentsCreateInfo_attachmentImageInfoCount_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentsCreateInfo_attachmentImageInfoCount_offsetof);
    exports["VkFramebufferAttachmentsCreateInfo_pAttachmentImageInfos_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentsCreateInfo_pAttachmentImageInfos_offsetof);

    exports["VkFramebufferAttachmentImageInfo_sType_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentImageInfo_sType_offsetof);
    exports["VkFramebufferAttachmentImageInfo_pNext_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentImageInfo_pNext_offsetof);
    exports["VkFramebufferAttachmentImageInfo_flags_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentImageInfo_flags_offsetof);
    exports["VkFramebufferAttachmentImageInfo_usage_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentImageInfo_usage_offsetof);
    exports["VkFramebufferAttachmentImageInfo_width_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentImageInfo_width_offsetof);
    exports["VkFramebufferAttachmentImageInfo_height_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentImageInfo_height_offsetof);
    exports["VkFramebufferAttachmentImageInfo_layerCount_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentImageInfo_layerCount_offsetof);
    exports["VkFramebufferAttachmentImageInfo_viewFormatCount_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentImageInfo_viewFormatCount_offsetof);
    exports["VkFramebufferAttachmentImageInfo_pViewFormats_offsetof"] = Napi::Function::New(env, VkFramebufferAttachmentImageInfo_pViewFormats_offsetof);

    exports["VkRenderPassAttachmentBeginInfo_sType_offsetof"] = Napi::Function::New(env, VkRenderPassAttachmentBeginInfo_sType_offsetof);
    exports["VkRenderPassAttachmentBeginInfo_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassAttachmentBeginInfo_pNext_offsetof);
    exports["VkRenderPassAttachmentBeginInfo_attachmentCount_offsetof"] = Napi::Function::New(env, VkRenderPassAttachmentBeginInfo_attachmentCount_offsetof);
    exports["VkRenderPassAttachmentBeginInfo_pAttachments_offsetof"] = Napi::Function::New(env, VkRenderPassAttachmentBeginInfo_pAttachments_offsetof);

    exports["VkPhysicalDeviceTextureCompressionASTCHDRFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTextureCompressionASTCHDRFeatures_sType_offsetof);
    exports["VkPhysicalDeviceTextureCompressionASTCHDRFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTextureCompressionASTCHDRFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceTextureCompressionASTCHDRFeatures_textureCompressionASTC_HDR_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTextureCompressionASTCHDRFeatures_textureCompressionASTC_HDR_offsetof);

#ifdef VK_NV_cooperative_matrix
    exports["VkPhysicalDeviceCooperativeMatrixFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCooperativeMatrixFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkPhysicalDeviceCooperativeMatrixFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCooperativeMatrixFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkPhysicalDeviceCooperativeMatrixFeaturesNV_cooperativeMatrix_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCooperativeMatrixFeaturesNV_cooperativeMatrix_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkPhysicalDeviceCooperativeMatrixFeaturesNV_cooperativeMatrixRobustBufferAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCooperativeMatrixFeaturesNV_cooperativeMatrixRobustBufferAccess_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkPhysicalDeviceCooperativeMatrixPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCooperativeMatrixPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkPhysicalDeviceCooperativeMatrixPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCooperativeMatrixPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkPhysicalDeviceCooperativeMatrixPropertiesNV_cooperativeMatrixSupportedStages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCooperativeMatrixPropertiesNV_cooperativeMatrixSupportedStages_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_MSize_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_MSize_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_NSize_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_NSize_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_KSize_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_KSize_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_AType_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_AType_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_BType_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_BType_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_CType_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_CType_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_DType_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_DType_offsetof);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["VkCooperativeMatrixPropertiesNV_scope_offsetof"] = Napi::Function::New(env, VkCooperativeMatrixPropertiesNV_scope_offsetof);
#endif
#ifdef VK_EXT_ycbcr_image_arrays
    exports["VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_ycbcr_image_arrays
    exports["VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_ycbcr_image_arrays
    exports["VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_ycbcrImageArrays_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_ycbcrImageArrays_offsetof);
#endif
#ifdef VK_NVX_image_view_handle
    exports["VkImageViewHandleInfoNVX_sType_offsetof"] = Napi::Function::New(env, VkImageViewHandleInfoNVX_sType_offsetof);
#endif
#ifdef VK_NVX_image_view_handle
    exports["VkImageViewHandleInfoNVX_pNext_offsetof"] = Napi::Function::New(env, VkImageViewHandleInfoNVX_pNext_offsetof);
#endif
#ifdef VK_NVX_image_view_handle
    exports["VkImageViewHandleInfoNVX_imageView_offsetof"] = Napi::Function::New(env, VkImageViewHandleInfoNVX_imageView_offsetof);
#endif
#ifdef VK_NVX_image_view_handle
    exports["VkImageViewHandleInfoNVX_descriptorType_offsetof"] = Napi::Function::New(env, VkImageViewHandleInfoNVX_descriptorType_offsetof);
#endif
#ifdef VK_NVX_image_view_handle
    exports["VkImageViewHandleInfoNVX_sampler_offsetof"] = Napi::Function::New(env, VkImageViewHandleInfoNVX_sampler_offsetof);
#endif
#ifdef VK_NVX_image_view_handle
    exports["VkImageViewAddressPropertiesNVX_sType_offsetof"] = Napi::Function::New(env, VkImageViewAddressPropertiesNVX_sType_offsetof);
#endif
#ifdef VK_NVX_image_view_handle
    exports["VkImageViewAddressPropertiesNVX_pNext_offsetof"] = Napi::Function::New(env, VkImageViewAddressPropertiesNVX_pNext_offsetof);
#endif
#ifdef VK_NVX_image_view_handle
    exports["VkImageViewAddressPropertiesNVX_deviceAddress_offsetof"] = Napi::Function::New(env, VkImageViewAddressPropertiesNVX_deviceAddress_offsetof);
#endif
#ifdef VK_NVX_image_view_handle
    exports["VkImageViewAddressPropertiesNVX_size_offsetof"] = Napi::Function::New(env, VkImageViewAddressPropertiesNVX_size_offsetof);
#endif
#ifdef VK_GGP_frame_token
    exports["VkPresentFrameTokenGGP_sType_offsetof"] = Napi::Function::New(env, VkPresentFrameTokenGGP_sType_offsetof);
#endif
#ifdef VK_GGP_frame_token
    exports["VkPresentFrameTokenGGP_pNext_offsetof"] = Napi::Function::New(env, VkPresentFrameTokenGGP_pNext_offsetof);
#endif
#ifdef VK_GGP_frame_token
    exports["VkPresentFrameTokenGGP_frameToken_offsetof"] = Napi::Function::New(env, VkPresentFrameTokenGGP_frameToken_offsetof);
#endif
    exports["VkPipelineCreationFeedback_flags_offsetof"] = Napi::Function::New(env, VkPipelineCreationFeedback_flags_offsetof);
    exports["VkPipelineCreationFeedback_duration_offsetof"] = Napi::Function::New(env, VkPipelineCreationFeedback_duration_offsetof);

    exports["VkPipelineCreationFeedbackCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineCreationFeedbackCreateInfo_sType_offsetof);
    exports["VkPipelineCreationFeedbackCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineCreationFeedbackCreateInfo_pNext_offsetof);
    exports["VkPipelineCreationFeedbackCreateInfo_pPipelineCreationFeedback_offsetof"] = Napi::Function::New(env, VkPipelineCreationFeedbackCreateInfo_pPipelineCreationFeedback_offsetof);
    exports["VkPipelineCreationFeedbackCreateInfo_pipelineStageCreationFeedbackCount_offsetof"] = Napi::Function::New(env, VkPipelineCreationFeedbackCreateInfo_pipelineStageCreationFeedbackCount_offsetof);
    exports["VkPipelineCreationFeedbackCreateInfo_pPipelineStageCreationFeedbacks_offsetof"] = Napi::Function::New(env, VkPipelineCreationFeedbackCreateInfo_pPipelineStageCreationFeedbacks_offsetof);

#ifdef VK_EXT_full_screen_exclusive
    exports["VkSurfaceFullScreenExclusiveInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkSurfaceFullScreenExclusiveInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["VkSurfaceFullScreenExclusiveInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkSurfaceFullScreenExclusiveInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["VkSurfaceFullScreenExclusiveInfoEXT_fullScreenExclusive_offsetof"] = Napi::Function::New(env, VkSurfaceFullScreenExclusiveInfoEXT_fullScreenExclusive_offsetof);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["VkSurfaceFullScreenExclusiveWin32InfoEXT_sType_offsetof"] = Napi::Function::New(env, VkSurfaceFullScreenExclusiveWin32InfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["VkSurfaceFullScreenExclusiveWin32InfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkSurfaceFullScreenExclusiveWin32InfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["VkSurfaceFullScreenExclusiveWin32InfoEXT_hmonitor_offsetof"] = Napi::Function::New(env, VkSurfaceFullScreenExclusiveWin32InfoEXT_hmonitor_offsetof);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["VkSurfaceCapabilitiesFullScreenExclusiveEXT_sType_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesFullScreenExclusiveEXT_sType_offsetof);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["VkSurfaceCapabilitiesFullScreenExclusiveEXT_pNext_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesFullScreenExclusiveEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["VkSurfaceCapabilitiesFullScreenExclusiveEXT_fullScreenExclusiveSupported_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesFullScreenExclusiveEXT_fullScreenExclusiveSupported_offsetof);
#endif
#ifdef VK_NV_present_barrier
    exports["VkPhysicalDevicePresentBarrierFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentBarrierFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_present_barrier
    exports["VkPhysicalDevicePresentBarrierFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentBarrierFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_present_barrier
    exports["VkPhysicalDevicePresentBarrierFeaturesNV_presentBarrier_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePresentBarrierFeaturesNV_presentBarrier_offsetof);
#endif
#ifdef VK_NV_present_barrier
    exports["VkSurfaceCapabilitiesPresentBarrierNV_sType_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesPresentBarrierNV_sType_offsetof);
#endif
#ifdef VK_NV_present_barrier
    exports["VkSurfaceCapabilitiesPresentBarrierNV_pNext_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesPresentBarrierNV_pNext_offsetof);
#endif
#ifdef VK_NV_present_barrier
    exports["VkSurfaceCapabilitiesPresentBarrierNV_presentBarrierSupported_offsetof"] = Napi::Function::New(env, VkSurfaceCapabilitiesPresentBarrierNV_presentBarrierSupported_offsetof);
#endif
#ifdef VK_NV_present_barrier
    exports["VkSwapchainPresentBarrierCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkSwapchainPresentBarrierCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_present_barrier
    exports["VkSwapchainPresentBarrierCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkSwapchainPresentBarrierCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_present_barrier
    exports["VkSwapchainPresentBarrierCreateInfoNV_presentBarrierEnable_offsetof"] = Napi::Function::New(env, VkSwapchainPresentBarrierCreateInfoNV_presentBarrierEnable_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPhysicalDevicePerformanceQueryFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePerformanceQueryFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPhysicalDevicePerformanceQueryFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePerformanceQueryFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPhysicalDevicePerformanceQueryFeaturesKHR_performanceCounterQueryPools_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePerformanceQueryFeaturesKHR_performanceCounterQueryPools_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPhysicalDevicePerformanceQueryFeaturesKHR_performanceCounterMultipleQueryPools_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePerformanceQueryFeaturesKHR_performanceCounterMultipleQueryPools_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPhysicalDevicePerformanceQueryPropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePerformanceQueryPropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPhysicalDevicePerformanceQueryPropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePerformanceQueryPropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPhysicalDevicePerformanceQueryPropertiesKHR_allowCommandBufferQueryCopies_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePerformanceQueryPropertiesKHR_allowCommandBufferQueryCopies_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterKHR_sType_offsetof"] = Napi::Function::New(env, VkPerformanceCounterKHR_sType_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterKHR_pNext_offsetof"] = Napi::Function::New(env, VkPerformanceCounterKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterKHR_unit_offsetof"] = Napi::Function::New(env, VkPerformanceCounterKHR_unit_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterKHR_scope_offsetof"] = Napi::Function::New(env, VkPerformanceCounterKHR_scope_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterKHR_storage_offsetof"] = Napi::Function::New(env, VkPerformanceCounterKHR_storage_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterKHR_uuid_offsetof"] = Napi::Function::New(env, VkPerformanceCounterKHR_uuid_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterDescriptionKHR_sType_offsetof"] = Napi::Function::New(env, VkPerformanceCounterDescriptionKHR_sType_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterDescriptionKHR_pNext_offsetof"] = Napi::Function::New(env, VkPerformanceCounterDescriptionKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterDescriptionKHR_flags_offsetof"] = Napi::Function::New(env, VkPerformanceCounterDescriptionKHR_flags_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterDescriptionKHR_name_offsetof"] = Napi::Function::New(env, VkPerformanceCounterDescriptionKHR_name_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterDescriptionKHR_category_offsetof"] = Napi::Function::New(env, VkPerformanceCounterDescriptionKHR_category_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceCounterDescriptionKHR_description_offsetof"] = Napi::Function::New(env, VkPerformanceCounterDescriptionKHR_description_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkQueryPoolPerformanceCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkQueryPoolPerformanceCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkQueryPoolPerformanceCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkQueryPoolPerformanceCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkQueryPoolPerformanceCreateInfoKHR_queueFamilyIndex_offsetof"] = Napi::Function::New(env, VkQueryPoolPerformanceCreateInfoKHR_queueFamilyIndex_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkQueryPoolPerformanceCreateInfoKHR_counterIndexCount_offsetof"] = Napi::Function::New(env, VkQueryPoolPerformanceCreateInfoKHR_counterIndexCount_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkQueryPoolPerformanceCreateInfoKHR_pCounterIndices_offsetof"] = Napi::Function::New(env, VkQueryPoolPerformanceCreateInfoKHR_pCounterIndices_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkAcquireProfilingLockInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkAcquireProfilingLockInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkAcquireProfilingLockInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkAcquireProfilingLockInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkAcquireProfilingLockInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkAcquireProfilingLockInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkAcquireProfilingLockInfoKHR_timeout_offsetof"] = Napi::Function::New(env, VkAcquireProfilingLockInfoKHR_timeout_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceQuerySubmitInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkPerformanceQuerySubmitInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceQuerySubmitInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkPerformanceQuerySubmitInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_performance_query
    exports["VkPerformanceQuerySubmitInfoKHR_counterPassIndex_offsetof"] = Napi::Function::New(env, VkPerformanceQuerySubmitInfoKHR_counterPassIndex_offsetof);
#endif
#ifdef VK_EXT_headless_surface
    exports["VkHeadlessSurfaceCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkHeadlessSurfaceCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_headless_surface
    exports["VkHeadlessSurfaceCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkHeadlessSurfaceCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_headless_surface
    exports["VkHeadlessSurfaceCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkHeadlessSurfaceCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkPhysicalDeviceCoverageReductionModeFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCoverageReductionModeFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkPhysicalDeviceCoverageReductionModeFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCoverageReductionModeFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkPhysicalDeviceCoverageReductionModeFeaturesNV_coverageReductionMode_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCoverageReductionModeFeaturesNV_coverageReductionMode_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkPipelineCoverageReductionStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineCoverageReductionStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkPipelineCoverageReductionStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineCoverageReductionStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkPipelineCoverageReductionStateCreateInfoNV_flags_offsetof"] = Napi::Function::New(env, VkPipelineCoverageReductionStateCreateInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkPipelineCoverageReductionStateCreateInfoNV_coverageReductionMode_offsetof"] = Napi::Function::New(env, VkPipelineCoverageReductionStateCreateInfoNV_coverageReductionMode_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkFramebufferMixedSamplesCombinationNV_sType_offsetof"] = Napi::Function::New(env, VkFramebufferMixedSamplesCombinationNV_sType_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkFramebufferMixedSamplesCombinationNV_pNext_offsetof"] = Napi::Function::New(env, VkFramebufferMixedSamplesCombinationNV_pNext_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkFramebufferMixedSamplesCombinationNV_coverageReductionMode_offsetof"] = Napi::Function::New(env, VkFramebufferMixedSamplesCombinationNV_coverageReductionMode_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkFramebufferMixedSamplesCombinationNV_rasterizationSamples_offsetof"] = Napi::Function::New(env, VkFramebufferMixedSamplesCombinationNV_rasterizationSamples_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkFramebufferMixedSamplesCombinationNV_depthStencilSamples_offsetof"] = Napi::Function::New(env, VkFramebufferMixedSamplesCombinationNV_depthStencilSamples_offsetof);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["VkFramebufferMixedSamplesCombinationNV_colorSamples_offsetof"] = Napi::Function::New(env, VkFramebufferMixedSamplesCombinationNV_colorSamples_offsetof);
#endif
#ifdef VK_INTEL_shader_integer_functions2
    exports["VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_sType_offsetof);
#endif
#ifdef VK_INTEL_shader_integer_functions2
    exports["VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_pNext_offsetof);
#endif
#ifdef VK_INTEL_shader_integer_functions2
    exports["VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_shaderIntegerFunctions2_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_shaderIntegerFunctions2_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceValueINTEL_type_offsetof"] = Napi::Function::New(env, VkPerformanceValueINTEL_type_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceValueINTEL_data_offsetof"] = Napi::Function::New(env, VkPerformanceValueINTEL_data_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkInitializePerformanceApiInfoINTEL_sType_offsetof"] = Napi::Function::New(env, VkInitializePerformanceApiInfoINTEL_sType_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkInitializePerformanceApiInfoINTEL_pNext_offsetof"] = Napi::Function::New(env, VkInitializePerformanceApiInfoINTEL_pNext_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkInitializePerformanceApiInfoINTEL_pUserData_offsetof"] = Napi::Function::New(env, VkInitializePerformanceApiInfoINTEL_pUserData_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkQueryPoolPerformanceQueryCreateInfoINTEL_sType_offsetof"] = Napi::Function::New(env, VkQueryPoolPerformanceQueryCreateInfoINTEL_sType_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkQueryPoolPerformanceQueryCreateInfoINTEL_pNext_offsetof"] = Napi::Function::New(env, VkQueryPoolPerformanceQueryCreateInfoINTEL_pNext_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkQueryPoolPerformanceQueryCreateInfoINTEL_performanceCountersSampling_offsetof"] = Napi::Function::New(env, VkQueryPoolPerformanceQueryCreateInfoINTEL_performanceCountersSampling_offsetof);
#endif

#ifdef VK_INTEL_performance_query
    exports["VkPerformanceMarkerInfoINTEL_sType_offsetof"] = Napi::Function::New(env, VkPerformanceMarkerInfoINTEL_sType_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceMarkerInfoINTEL_pNext_offsetof"] = Napi::Function::New(env, VkPerformanceMarkerInfoINTEL_pNext_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceMarkerInfoINTEL_marker_offsetof"] = Napi::Function::New(env, VkPerformanceMarkerInfoINTEL_marker_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceStreamMarkerInfoINTEL_sType_offsetof"] = Napi::Function::New(env, VkPerformanceStreamMarkerInfoINTEL_sType_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceStreamMarkerInfoINTEL_pNext_offsetof"] = Napi::Function::New(env, VkPerformanceStreamMarkerInfoINTEL_pNext_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceStreamMarkerInfoINTEL_marker_offsetof"] = Napi::Function::New(env, VkPerformanceStreamMarkerInfoINTEL_marker_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceOverrideInfoINTEL_sType_offsetof"] = Napi::Function::New(env, VkPerformanceOverrideInfoINTEL_sType_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceOverrideInfoINTEL_pNext_offsetof"] = Napi::Function::New(env, VkPerformanceOverrideInfoINTEL_pNext_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceOverrideInfoINTEL_type_offsetof"] = Napi::Function::New(env, VkPerformanceOverrideInfoINTEL_type_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceOverrideInfoINTEL_enable_offsetof"] = Napi::Function::New(env, VkPerformanceOverrideInfoINTEL_enable_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceOverrideInfoINTEL_parameter_offsetof"] = Napi::Function::New(env, VkPerformanceOverrideInfoINTEL_parameter_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceConfigurationAcquireInfoINTEL_sType_offsetof"] = Napi::Function::New(env, VkPerformanceConfigurationAcquireInfoINTEL_sType_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceConfigurationAcquireInfoINTEL_pNext_offsetof"] = Napi::Function::New(env, VkPerformanceConfigurationAcquireInfoINTEL_pNext_offsetof);
#endif
#ifdef VK_INTEL_performance_query
    exports["VkPerformanceConfigurationAcquireInfoINTEL_type_offsetof"] = Napi::Function::New(env, VkPerformanceConfigurationAcquireInfoINTEL_type_offsetof);
#endif
#ifdef VK_KHR_shader_clock
    exports["VkPhysicalDeviceShaderClockFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderClockFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_shader_clock
    exports["VkPhysicalDeviceShaderClockFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderClockFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_shader_clock
    exports["VkPhysicalDeviceShaderClockFeaturesKHR_shaderSubgroupClock_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderClockFeaturesKHR_shaderSubgroupClock_offsetof);
#endif
#ifdef VK_KHR_shader_clock
    exports["VkPhysicalDeviceShaderClockFeaturesKHR_shaderDeviceClock_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderClockFeaturesKHR_shaderDeviceClock_offsetof);
#endif
#ifdef VK_EXT_index_type_uint8
    exports["VkPhysicalDeviceIndexTypeUint8FeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIndexTypeUint8FeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_index_type_uint8
    exports["VkPhysicalDeviceIndexTypeUint8FeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIndexTypeUint8FeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_index_type_uint8
    exports["VkPhysicalDeviceIndexTypeUint8FeaturesEXT_indexTypeUint8_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceIndexTypeUint8FeaturesEXT_indexTypeUint8_offsetof);
#endif
#ifdef VK_NV_shader_sm_builtins
    exports["VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_shader_sm_builtins
    exports["VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_shader_sm_builtins
    exports["VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_shaderSMCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_shaderSMCount_offsetof);
#endif
#ifdef VK_NV_shader_sm_builtins
    exports["VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_shaderWarpsPerSM_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_shaderWarpsPerSM_offsetof);
#endif
#ifdef VK_NV_shader_sm_builtins
    exports["VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_shader_sm_builtins
    exports["VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_shader_sm_builtins
    exports["VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_shaderSMBuiltins_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_shaderSMBuiltins_offsetof);
#endif
#ifdef VK_EXT_fragment_shader_interlock
    exports["VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_fragment_shader_interlock
    exports["VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_fragment_shader_interlock
    exports["VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_fragmentShaderSampleInterlock_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_fragmentShaderSampleInterlock_offsetof);
#endif
#ifdef VK_EXT_fragment_shader_interlock
    exports["VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_fragmentShaderPixelInterlock_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_fragmentShaderPixelInterlock_offsetof);
#endif
#ifdef VK_EXT_fragment_shader_interlock
    exports["VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_fragmentShaderShadingRateInterlock_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_fragmentShaderShadingRateInterlock_offsetof);
#endif
    exports["VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_sType_offsetof);
    exports["VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_separateDepthStencilLayouts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_separateDepthStencilLayouts_offsetof);

    exports["VkAttachmentReferenceStencilLayout_sType_offsetof"] = Napi::Function::New(env, VkAttachmentReferenceStencilLayout_sType_offsetof);
    exports["VkAttachmentReferenceStencilLayout_pNext_offsetof"] = Napi::Function::New(env, VkAttachmentReferenceStencilLayout_pNext_offsetof);
    exports["VkAttachmentReferenceStencilLayout_stencilLayout_offsetof"] = Napi::Function::New(env, VkAttachmentReferenceStencilLayout_stencilLayout_offsetof);
#ifdef VK_EXT_primitive_topology_list_restart
    exports["VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_primitive_topology_list_restart
    exports["VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_primitive_topology_list_restart
    exports["VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_primitiveTopologyListRestart_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_primitiveTopologyListRestart_offsetof);
#endif
#ifdef VK_EXT_primitive_topology_list_restart
    exports["VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_primitiveTopologyPatchListRestart_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_primitiveTopologyPatchListRestart_offsetof);
#endif

    exports["VkAttachmentDescriptionStencilLayout_sType_offsetof"] = Napi::Function::New(env, VkAttachmentDescriptionStencilLayout_sType_offsetof);
    exports["VkAttachmentDescriptionStencilLayout_pNext_offsetof"] = Napi::Function::New(env, VkAttachmentDescriptionStencilLayout_pNext_offsetof);
    exports["VkAttachmentDescriptionStencilLayout_stencilInitialLayout_offsetof"] = Napi::Function::New(env, VkAttachmentDescriptionStencilLayout_stencilInitialLayout_offsetof);
    exports["VkAttachmentDescriptionStencilLayout_stencilFinalLayout_offsetof"] = Napi::Function::New(env, VkAttachmentDescriptionStencilLayout_stencilFinalLayout_offsetof);

#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_pipelineExecutableInfo_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_pipelineExecutableInfo_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkPipelineInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkPipelineInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineInfoKHR_pipeline_offsetof"] = Napi::Function::New(env, VkPipelineInfoKHR_pipeline_offsetof);
#endif

#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutablePropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkPipelineExecutablePropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutablePropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPipelineExecutablePropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutablePropertiesKHR_stages_offsetof"] = Napi::Function::New(env, VkPipelineExecutablePropertiesKHR_stages_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutablePropertiesKHR_name_offsetof"] = Napi::Function::New(env, VkPipelineExecutablePropertiesKHR_name_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutablePropertiesKHR_description_offsetof"] = Napi::Function::New(env, VkPipelineExecutablePropertiesKHR_description_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutablePropertiesKHR_subgroupSize_offsetof"] = Napi::Function::New(env, VkPipelineExecutablePropertiesKHR_subgroupSize_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInfoKHR_pipeline_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInfoKHR_pipeline_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInfoKHR_executableIndex_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInfoKHR_executableIndex_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableStatisticKHR_sType_offsetof"] = Napi::Function::New(env, VkPipelineExecutableStatisticKHR_sType_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableStatisticKHR_pNext_offsetof"] = Napi::Function::New(env, VkPipelineExecutableStatisticKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableStatisticKHR_name_offsetof"] = Napi::Function::New(env, VkPipelineExecutableStatisticKHR_name_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableStatisticKHR_description_offsetof"] = Napi::Function::New(env, VkPipelineExecutableStatisticKHR_description_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableStatisticKHR_format_offsetof"] = Napi::Function::New(env, VkPipelineExecutableStatisticKHR_format_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableStatisticKHR_value_offsetof"] = Napi::Function::New(env, VkPipelineExecutableStatisticKHR_value_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInternalRepresentationKHR_sType_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInternalRepresentationKHR_sType_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInternalRepresentationKHR_pNext_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInternalRepresentationKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInternalRepresentationKHR_name_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInternalRepresentationKHR_name_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInternalRepresentationKHR_description_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInternalRepresentationKHR_description_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInternalRepresentationKHR_isText_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInternalRepresentationKHR_isText_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInternalRepresentationKHR_dataSize_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInternalRepresentationKHR_dataSize_offsetof);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["VkPipelineExecutableInternalRepresentationKHR_pData_offsetof"] = Napi::Function::New(env, VkPipelineExecutableInternalRepresentationKHR_pData_offsetof);
#endif
    exports["VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_sType_offsetof);
    exports["VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_shaderDemoteToHelperInvocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_shaderDemoteToHelperInvocation_offsetof);

#ifdef VK_EXT_texel_buffer_alignment
    exports["VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_texel_buffer_alignment
    exports["VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_texel_buffer_alignment
    exports["VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_texelBufferAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_texelBufferAlignment_offsetof);
#endif
    exports["VkPhysicalDeviceTexelBufferAlignmentProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTexelBufferAlignmentProperties_sType_offsetof);
    exports["VkPhysicalDeviceTexelBufferAlignmentProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTexelBufferAlignmentProperties_pNext_offsetof);
    exports["VkPhysicalDeviceTexelBufferAlignmentProperties_storageTexelBufferOffsetAlignmentBytes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTexelBufferAlignmentProperties_storageTexelBufferOffsetAlignmentBytes_offsetof);
    exports["VkPhysicalDeviceTexelBufferAlignmentProperties_storageTexelBufferOffsetSingleTexelAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTexelBufferAlignmentProperties_storageTexelBufferOffsetSingleTexelAlignment_offsetof);
    exports["VkPhysicalDeviceTexelBufferAlignmentProperties_uniformTexelBufferOffsetAlignmentBytes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTexelBufferAlignmentProperties_uniformTexelBufferOffsetAlignmentBytes_offsetof);
    exports["VkPhysicalDeviceTexelBufferAlignmentProperties_uniformTexelBufferOffsetSingleTexelAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTexelBufferAlignmentProperties_uniformTexelBufferOffsetSingleTexelAlignment_offsetof);

    exports["VkPhysicalDeviceSubgroupSizeControlFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlFeatures_sType_offsetof);
    exports["VkPhysicalDeviceSubgroupSizeControlFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceSubgroupSizeControlFeatures_subgroupSizeControl_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlFeatures_subgroupSizeControl_offsetof);
    exports["VkPhysicalDeviceSubgroupSizeControlFeatures_computeFullSubgroups_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlFeatures_computeFullSubgroups_offsetof);

    exports["VkPhysicalDeviceSubgroupSizeControlProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlProperties_sType_offsetof);
    exports["VkPhysicalDeviceSubgroupSizeControlProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlProperties_pNext_offsetof);
    exports["VkPhysicalDeviceSubgroupSizeControlProperties_minSubgroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlProperties_minSubgroupSize_offsetof);
    exports["VkPhysicalDeviceSubgroupSizeControlProperties_maxSubgroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlProperties_maxSubgroupSize_offsetof);
    exports["VkPhysicalDeviceSubgroupSizeControlProperties_maxComputeWorkgroupSubgroups_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlProperties_maxComputeWorkgroupSubgroups_offsetof);
    exports["VkPhysicalDeviceSubgroupSizeControlProperties_requiredSubgroupSizeStages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubgroupSizeControlProperties_requiredSubgroupSizeStages_offsetof);

    exports["VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_sType_offsetof);
    exports["VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_pNext_offsetof);
    exports["VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_requiredSubgroupSize_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_requiredSubgroupSize_offsetof);

#ifdef VK_HUAWEI_subpass_shading
    exports["VkSubpassShadingPipelineCreateInfoHUAWEI_sType_offsetof"] = Napi::Function::New(env, VkSubpassShadingPipelineCreateInfoHUAWEI_sType_offsetof);
#endif
#ifdef VK_HUAWEI_subpass_shading
    exports["VkSubpassShadingPipelineCreateInfoHUAWEI_pNext_offsetof"] = Napi::Function::New(env, VkSubpassShadingPipelineCreateInfoHUAWEI_pNext_offsetof);
#endif
#ifdef VK_HUAWEI_subpass_shading
    exports["VkSubpassShadingPipelineCreateInfoHUAWEI_renderPass_offsetof"] = Napi::Function::New(env, VkSubpassShadingPipelineCreateInfoHUAWEI_renderPass_offsetof);
#endif
#ifdef VK_HUAWEI_subpass_shading
    exports["VkSubpassShadingPipelineCreateInfoHUAWEI_subpass_offsetof"] = Napi::Function::New(env, VkSubpassShadingPipelineCreateInfoHUAWEI_subpass_offsetof);
#endif
#ifdef VK_HUAWEI_subpass_shading
    exports["VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_sType_offsetof);
#endif
#ifdef VK_HUAWEI_subpass_shading
    exports["VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_pNext_offsetof);
#endif
#ifdef VK_HUAWEI_subpass_shading
    exports["VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_maxSubpassShadingWorkgroupSizeAspectRatio_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_maxSubpassShadingWorkgroupSizeAspectRatio_offsetof);
#endif
    exports["VkMemoryOpaqueCaptureAddressAllocateInfo_sType_offsetof"] = Napi::Function::New(env, VkMemoryOpaqueCaptureAddressAllocateInfo_sType_offsetof);
    exports["VkMemoryOpaqueCaptureAddressAllocateInfo_pNext_offsetof"] = Napi::Function::New(env, VkMemoryOpaqueCaptureAddressAllocateInfo_pNext_offsetof);
    exports["VkMemoryOpaqueCaptureAddressAllocateInfo_opaqueCaptureAddress_offsetof"] = Napi::Function::New(env, VkMemoryOpaqueCaptureAddressAllocateInfo_opaqueCaptureAddress_offsetof);

    exports["VkDeviceMemoryOpaqueCaptureAddressInfo_sType_offsetof"] = Napi::Function::New(env, VkDeviceMemoryOpaqueCaptureAddressInfo_sType_offsetof);
    exports["VkDeviceMemoryOpaqueCaptureAddressInfo_pNext_offsetof"] = Napi::Function::New(env, VkDeviceMemoryOpaqueCaptureAddressInfo_pNext_offsetof);
    exports["VkDeviceMemoryOpaqueCaptureAddressInfo_memory_offsetof"] = Napi::Function::New(env, VkDeviceMemoryOpaqueCaptureAddressInfo_memory_offsetof);

#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationFeaturesEXT_rectangularLines_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationFeaturesEXT_rectangularLines_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationFeaturesEXT_bresenhamLines_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationFeaturesEXT_bresenhamLines_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationFeaturesEXT_smoothLines_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationFeaturesEXT_smoothLines_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationFeaturesEXT_stippledRectangularLines_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationFeaturesEXT_stippledRectangularLines_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationFeaturesEXT_stippledBresenhamLines_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationFeaturesEXT_stippledBresenhamLines_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationFeaturesEXT_stippledSmoothLines_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationFeaturesEXT_stippledSmoothLines_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPhysicalDeviceLineRasterizationPropertiesEXT_lineSubPixelPrecisionBits_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLineRasterizationPropertiesEXT_lineSubPixelPrecisionBits_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPipelineRasterizationLineStateCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationLineStateCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPipelineRasterizationLineStateCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationLineStateCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPipelineRasterizationLineStateCreateInfoEXT_lineRasterizationMode_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationLineStateCreateInfoEXT_lineRasterizationMode_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPipelineRasterizationLineStateCreateInfoEXT_stippledLineEnable_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationLineStateCreateInfoEXT_stippledLineEnable_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPipelineRasterizationLineStateCreateInfoEXT_lineStippleFactor_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationLineStateCreateInfoEXT_lineStippleFactor_offsetof);
#endif
#ifdef VK_EXT_line_rasterization
    exports["VkPipelineRasterizationLineStateCreateInfoEXT_lineStipplePattern_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationLineStateCreateInfoEXT_lineStipplePattern_offsetof);
#endif
    exports["VkPhysicalDevicePipelineCreationCacheControlFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineCreationCacheControlFeatures_sType_offsetof);
    exports["VkPhysicalDevicePipelineCreationCacheControlFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineCreationCacheControlFeatures_pNext_offsetof);
    exports["VkPhysicalDevicePipelineCreationCacheControlFeatures_pipelineCreationCacheControl_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineCreationCacheControlFeatures_pipelineCreationCacheControl_offsetof);

    exports["VkPhysicalDeviceVulkan11Features_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_sType_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_pNext_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_storageBuffer16BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_storageBuffer16BitAccess_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_uniformAndStorageBuffer16BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_uniformAndStorageBuffer16BitAccess_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_storagePushConstant16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_storagePushConstant16_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_storageInputOutput16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_storageInputOutput16_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_multiview_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_multiview_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_multiviewGeometryShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_multiviewGeometryShader_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_multiviewTessellationShader_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_multiviewTessellationShader_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_variablePointersStorageBuffer_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_variablePointersStorageBuffer_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_variablePointers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_variablePointers_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_protectedMemory_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_protectedMemory_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_samplerYcbcrConversion_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_samplerYcbcrConversion_offsetof);
    exports["VkPhysicalDeviceVulkan11Features_shaderDrawParameters_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Features_shaderDrawParameters_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_sType_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_pNext_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_deviceUUID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_deviceUUID_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_driverUUID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_driverUUID_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_deviceLUID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_deviceLUID_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_deviceNodeMask_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_deviceNodeMask_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_deviceLUIDValid_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_deviceLUIDValid_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_subgroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_subgroupSize_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_subgroupSupportedStages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_subgroupSupportedStages_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_subgroupSupportedOperations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_subgroupSupportedOperations_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_subgroupQuadOperationsInAllStages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_subgroupQuadOperationsInAllStages_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_pointClippingBehavior_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_pointClippingBehavior_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_maxMultiviewViewCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_maxMultiviewViewCount_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_maxMultiviewInstanceIndex_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_maxMultiviewInstanceIndex_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_protectedNoFault_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_protectedNoFault_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_maxPerSetDescriptors_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_maxPerSetDescriptors_offsetof);
    exports["VkPhysicalDeviceVulkan11Properties_maxMemoryAllocationSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan11Properties_maxMemoryAllocationSize_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_sType_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_pNext_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_samplerMirrorClampToEdge_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_samplerMirrorClampToEdge_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_drawIndirectCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_drawIndirectCount_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_storageBuffer8BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_storageBuffer8BitAccess_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_uniformAndStorageBuffer8BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_uniformAndStorageBuffer8BitAccess_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_storagePushConstant8_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_storagePushConstant8_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderBufferInt64Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderBufferInt64Atomics_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderSharedInt64Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderSharedInt64Atomics_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderFloat16_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderInt8_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderInt8_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderInputAttachmentArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderInputAttachmentArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderUniformTexelBufferArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderUniformTexelBufferArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderStorageTexelBufferArrayDynamicIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderStorageTexelBufferArrayDynamicIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderUniformBufferArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderUniformBufferArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderSampledImageArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderSampledImageArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderStorageBufferArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderStorageBufferArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderStorageImageArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderStorageImageArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderInputAttachmentArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderInputAttachmentArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderUniformTexelBufferArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderUniformTexelBufferArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderStorageTexelBufferArrayNonUniformIndexing_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderStorageTexelBufferArrayNonUniformIndexing_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorBindingUniformBufferUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorBindingUniformBufferUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorBindingSampledImageUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorBindingSampledImageUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorBindingStorageImageUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorBindingStorageImageUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorBindingStorageBufferUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorBindingStorageBufferUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorBindingUniformTexelBufferUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorBindingUniformTexelBufferUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorBindingStorageTexelBufferUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorBindingStorageTexelBufferUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorBindingUpdateUnusedWhilePending_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorBindingUpdateUnusedWhilePending_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorBindingPartiallyBound_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorBindingPartiallyBound_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_descriptorBindingVariableDescriptorCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_descriptorBindingVariableDescriptorCount_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_runtimeDescriptorArray_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_runtimeDescriptorArray_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_samplerFilterMinmax_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_samplerFilterMinmax_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_scalarBlockLayout_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_scalarBlockLayout_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_imagelessFramebuffer_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_imagelessFramebuffer_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_uniformBufferStandardLayout_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_uniformBufferStandardLayout_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderSubgroupExtendedTypes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderSubgroupExtendedTypes_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_separateDepthStencilLayouts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_separateDepthStencilLayouts_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_hostQueryReset_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_hostQueryReset_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_timelineSemaphore_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_timelineSemaphore_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_bufferDeviceAddress_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_bufferDeviceAddress_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_bufferDeviceAddressCaptureReplay_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_bufferDeviceAddressCaptureReplay_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_bufferDeviceAddressMultiDevice_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_bufferDeviceAddressMultiDevice_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_vulkanMemoryModel_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_vulkanMemoryModel_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_vulkanMemoryModelDeviceScope_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_vulkanMemoryModelDeviceScope_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_vulkanMemoryModelAvailabilityVisibilityChains_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_vulkanMemoryModelAvailabilityVisibilityChains_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderOutputViewportIndex_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderOutputViewportIndex_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_shaderOutputLayer_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_shaderOutputLayer_offsetof);
    exports["VkPhysicalDeviceVulkan12Features_subgroupBroadcastDynamicId_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Features_subgroupBroadcastDynamicId_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_sType_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_pNext_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_driverID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_driverID_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_driverName_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_driverName_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_driverInfo_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_driverInfo_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_conformanceVersion_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_conformanceVersion_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_denormBehaviorIndependence_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_denormBehaviorIndependence_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_roundingModeIndependence_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_roundingModeIndependence_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderSignedZeroInfNanPreserveFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderSignedZeroInfNanPreserveFloat16_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderSignedZeroInfNanPreserveFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderSignedZeroInfNanPreserveFloat32_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderSignedZeroInfNanPreserveFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderSignedZeroInfNanPreserveFloat64_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderDenormPreserveFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderDenormPreserveFloat16_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderDenormPreserveFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderDenormPreserveFloat32_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderDenormPreserveFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderDenormPreserveFloat64_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderDenormFlushToZeroFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderDenormFlushToZeroFloat16_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderDenormFlushToZeroFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderDenormFlushToZeroFloat32_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderDenormFlushToZeroFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderDenormFlushToZeroFloat64_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTEFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTEFloat16_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTEFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTEFloat32_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTEFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTEFloat64_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTZFloat16_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTZFloat16_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTZFloat32_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTZFloat32_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTZFloat64_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderRoundingModeRTZFloat64_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxUpdateAfterBindDescriptorsInAllPools_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxUpdateAfterBindDescriptorsInAllPools_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderUniformBufferArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderUniformBufferArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderSampledImageArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderSampledImageArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderStorageBufferArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderStorageBufferArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderStorageImageArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderStorageImageArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_shaderInputAttachmentArrayNonUniformIndexingNative_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_shaderInputAttachmentArrayNonUniformIndexingNative_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_robustBufferAccessUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_robustBufferAccessUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_quadDivergentImplicitLod_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_quadDivergentImplicitLod_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindSamplers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindSamplers_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindUniformBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindUniformBuffers_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindStorageBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindStorageBuffers_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindSampledImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindSampledImages_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindStorageImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindStorageImages_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindInputAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxPerStageDescriptorUpdateAfterBindInputAttachments_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxPerStageUpdateAfterBindResources_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxPerStageUpdateAfterBindResources_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindSamplers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindSamplers_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindUniformBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindUniformBuffers_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindUniformBuffersDynamic_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindUniformBuffersDynamic_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindStorageBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindStorageBuffers_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindStorageBuffersDynamic_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindStorageBuffersDynamic_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindSampledImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindSampledImages_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindStorageImages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindStorageImages_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindInputAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxDescriptorSetUpdateAfterBindInputAttachments_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_supportedDepthResolveModes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_supportedDepthResolveModes_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_supportedStencilResolveModes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_supportedStencilResolveModes_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_independentResolveNone_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_independentResolveNone_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_independentResolve_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_independentResolve_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_filterMinmaxSingleComponentFormats_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_filterMinmaxSingleComponentFormats_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_filterMinmaxImageComponentMapping_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_filterMinmaxImageComponentMapping_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_maxTimelineSemaphoreValueDifference_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_maxTimelineSemaphoreValueDifference_offsetof);
    exports["VkPhysicalDeviceVulkan12Properties_framebufferIntegerColorSampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan12Properties_framebufferIntegerColorSampleCounts_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_sType_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_pNext_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_robustImageAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_robustImageAccess_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_inlineUniformBlock_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_inlineUniformBlock_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_descriptorBindingInlineUniformBlockUpdateAfterBind_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_descriptorBindingInlineUniformBlockUpdateAfterBind_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_pipelineCreationCacheControl_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_pipelineCreationCacheControl_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_privateData_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_privateData_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_shaderDemoteToHelperInvocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_shaderDemoteToHelperInvocation_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_shaderTerminateInvocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_shaderTerminateInvocation_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_subgroupSizeControl_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_subgroupSizeControl_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_computeFullSubgroups_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_computeFullSubgroups_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_synchronization2_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_synchronization2_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_textureCompressionASTC_HDR_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_textureCompressionASTC_HDR_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_shaderZeroInitializeWorkgroupMemory_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_shaderZeroInitializeWorkgroupMemory_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_dynamicRendering_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_dynamicRendering_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_shaderIntegerDotProduct_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_shaderIntegerDotProduct_offsetof);
    exports["VkPhysicalDeviceVulkan13Features_maintenance4_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Features_maintenance4_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_sType_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_pNext_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_minSubgroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_minSubgroupSize_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_maxSubgroupSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_maxSubgroupSize_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_maxComputeWorkgroupSubgroups_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_maxComputeWorkgroupSubgroups_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_requiredSubgroupSizeStages_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_requiredSubgroupSizeStages_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_maxInlineUniformBlockSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_maxInlineUniformBlockSize_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_maxPerStageDescriptorInlineUniformBlocks_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_maxPerStageDescriptorInlineUniformBlocks_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_maxDescriptorSetInlineUniformBlocks_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_maxDescriptorSetInlineUniformBlocks_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_maxDescriptorSetUpdateAfterBindInlineUniformBlocks_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_maxDescriptorSetUpdateAfterBindInlineUniformBlocks_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_maxInlineUniformTotalSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_maxInlineUniformTotalSize_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct8BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct8BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct8BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct8BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct8BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct8BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct4x8BitPackedUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct4x8BitPackedUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct4x8BitPackedSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct4x8BitPackedSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct4x8BitPackedMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct4x8BitPackedMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct16BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct16BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct16BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct16BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct16BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct16BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct32BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct32BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct32BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct32BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct32BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct32BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct64BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct64BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct64BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct64BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProduct64BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProduct64BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating8BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating8BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating8BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating8BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating16BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating16BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating16BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating16BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating32BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating32BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating32BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating32BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating64BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating64BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating64BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating64BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_storageTexelBufferOffsetAlignmentBytes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_storageTexelBufferOffsetAlignmentBytes_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_storageTexelBufferOffsetSingleTexelAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_storageTexelBufferOffsetSingleTexelAlignment_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_uniformTexelBufferOffsetAlignmentBytes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_uniformTexelBufferOffsetAlignmentBytes_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_uniformTexelBufferOffsetSingleTexelAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_uniformTexelBufferOffsetSingleTexelAlignment_offsetof);
    exports["VkPhysicalDeviceVulkan13Properties_maxBufferSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVulkan13Properties_maxBufferSize_offsetof);
#ifdef VK_AMD_pipeline_compiler_control
    exports["VkPipelineCompilerControlCreateInfoAMD_sType_offsetof"] = Napi::Function::New(env, VkPipelineCompilerControlCreateInfoAMD_sType_offsetof);
#endif
#ifdef VK_AMD_pipeline_compiler_control
    exports["VkPipelineCompilerControlCreateInfoAMD_pNext_offsetof"] = Napi::Function::New(env, VkPipelineCompilerControlCreateInfoAMD_pNext_offsetof);
#endif
#ifdef VK_AMD_pipeline_compiler_control
    exports["VkPipelineCompilerControlCreateInfoAMD_compilerControlFlags_offsetof"] = Napi::Function::New(env, VkPipelineCompilerControlCreateInfoAMD_compilerControlFlags_offsetof);
#endif
#ifdef VK_AMD_device_coherent_memory
    exports["VkPhysicalDeviceCoherentMemoryFeaturesAMD_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCoherentMemoryFeaturesAMD_sType_offsetof);
#endif
#ifdef VK_AMD_device_coherent_memory
    exports["VkPhysicalDeviceCoherentMemoryFeaturesAMD_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCoherentMemoryFeaturesAMD_pNext_offsetof);
#endif
#ifdef VK_AMD_device_coherent_memory
    exports["VkPhysicalDeviceCoherentMemoryFeaturesAMD_deviceCoherentMemory_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCoherentMemoryFeaturesAMD_deviceCoherentMemory_offsetof);
#endif
    exports["VkPhysicalDeviceToolProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceToolProperties_sType_offsetof);
    exports["VkPhysicalDeviceToolProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceToolProperties_pNext_offsetof);
    exports["VkPhysicalDeviceToolProperties_name_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceToolProperties_name_offsetof);
    exports["VkPhysicalDeviceToolProperties_version_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceToolProperties_version_offsetof);
    exports["VkPhysicalDeviceToolProperties_purposes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceToolProperties_purposes_offsetof);
    exports["VkPhysicalDeviceToolProperties_description_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceToolProperties_description_offsetof);
    exports["VkPhysicalDeviceToolProperties_layer_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceToolProperties_layer_offsetof);

#ifdef VK_EXT_custom_border_color
    exports["VkSamplerCustomBorderColorCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkSamplerCustomBorderColorCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkSamplerCustomBorderColorCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkSamplerCustomBorderColorCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkSamplerCustomBorderColorCreateInfoEXT_customBorderColor_offsetof"] = Napi::Function::New(env, VkSamplerCustomBorderColorCreateInfoEXT_customBorderColor_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkSamplerCustomBorderColorCreateInfoEXT_format_offsetof"] = Napi::Function::New(env, VkSamplerCustomBorderColorCreateInfoEXT_format_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkPhysicalDeviceCustomBorderColorPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCustomBorderColorPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkPhysicalDeviceCustomBorderColorPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCustomBorderColorPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkPhysicalDeviceCustomBorderColorPropertiesEXT_maxCustomBorderColorSamplers_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCustomBorderColorPropertiesEXT_maxCustomBorderColorSamplers_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkPhysicalDeviceCustomBorderColorFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCustomBorderColorFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkPhysicalDeviceCustomBorderColorFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCustomBorderColorFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkPhysicalDeviceCustomBorderColorFeaturesEXT_customBorderColors_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCustomBorderColorFeaturesEXT_customBorderColors_offsetof);
#endif
#ifdef VK_EXT_custom_border_color
    exports["VkPhysicalDeviceCustomBorderColorFeaturesEXT_customBorderColorWithoutFormat_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceCustomBorderColorFeaturesEXT_customBorderColorWithoutFormat_offsetof);
#endif
#ifdef VK_EXT_border_color_swizzle
    exports["VkSamplerBorderColorComponentMappingCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkSamplerBorderColorComponentMappingCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_border_color_swizzle
    exports["VkSamplerBorderColorComponentMappingCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkSamplerBorderColorComponentMappingCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_border_color_swizzle
    exports["VkSamplerBorderColorComponentMappingCreateInfoEXT_components_offsetof"] = Napi::Function::New(env, VkSamplerBorderColorComponentMappingCreateInfoEXT_components_offsetof);
#endif
#ifdef VK_EXT_border_color_swizzle
    exports["VkSamplerBorderColorComponentMappingCreateInfoEXT_srgb_offsetof"] = Napi::Function::New(env, VkSamplerBorderColorComponentMappingCreateInfoEXT_srgb_offsetof);
#endif
#ifdef VK_EXT_border_color_swizzle
    exports["VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_border_color_swizzle
    exports["VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_border_color_swizzle
    exports["VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_borderColorSwizzle_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_borderColorSwizzle_offsetof);
#endif
#ifdef VK_EXT_border_color_swizzle
    exports["VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_borderColorSwizzleFromImage_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_borderColorSwizzleFromImage_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryTrianglesDataKHR_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryTrianglesDataKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryTrianglesDataKHR_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryTrianglesDataKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryTrianglesDataKHR_vertexFormat_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryTrianglesDataKHR_vertexFormat_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryTrianglesDataKHR_vertexData_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryTrianglesDataKHR_vertexData_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryTrianglesDataKHR_vertexStride_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryTrianglesDataKHR_vertexStride_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryTrianglesDataKHR_maxVertex_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryTrianglesDataKHR_maxVertex_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryTrianglesDataKHR_indexType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryTrianglesDataKHR_indexType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryTrianglesDataKHR_indexData_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryTrianglesDataKHR_indexData_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryTrianglesDataKHR_transformData_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryTrianglesDataKHR_transformData_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryAabbsDataKHR_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryAabbsDataKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryAabbsDataKHR_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryAabbsDataKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryAabbsDataKHR_data_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryAabbsDataKHR_data_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryAabbsDataKHR_stride_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryAabbsDataKHR_stride_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryInstancesDataKHR_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryInstancesDataKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryInstancesDataKHR_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryInstancesDataKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryInstancesDataKHR_arrayOfPointers_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryInstancesDataKHR_arrayOfPointers_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryInstancesDataKHR_data_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryInstancesDataKHR_data_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryKHR_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryKHR_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryKHR_geometryType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryKHR_geometryType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryKHR_geometry_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryKHR_geometry_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureGeometryKHR_flags_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryKHR_flags_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_type_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_type_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_mode_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_mode_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_srcAccelerationStructure_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_srcAccelerationStructure_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_dstAccelerationStructure_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_dstAccelerationStructure_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_geometryCount_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_geometryCount_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_pGeometries_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_pGeometries_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_ppGeometries_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_ppGeometries_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildGeometryInfoKHR_scratchData_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildGeometryInfoKHR_scratchData_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildRangeInfoKHR_primitiveCount_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildRangeInfoKHR_primitiveCount_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildRangeInfoKHR_primitiveOffset_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildRangeInfoKHR_primitiveOffset_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildRangeInfoKHR_firstVertex_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildRangeInfoKHR_firstVertex_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildRangeInfoKHR_transformOffset_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildRangeInfoKHR_transformOffset_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureCreateInfoKHR_createFlags_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoKHR_createFlags_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureCreateInfoKHR_buffer_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoKHR_buffer_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureCreateInfoKHR_offset_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoKHR_offset_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureCreateInfoKHR_size_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoKHR_size_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureCreateInfoKHR_type_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoKHR_type_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureCreateInfoKHR_deviceAddress_offsetof"] = Napi::Function::New(env, VkAccelerationStructureCreateInfoKHR_deviceAddress_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAabbPositionsKHR_minX_offsetof"] = Napi::Function::New(env, VkAabbPositionsKHR_minX_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAabbPositionsKHR_minY_offsetof"] = Napi::Function::New(env, VkAabbPositionsKHR_minY_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAabbPositionsKHR_minZ_offsetof"] = Napi::Function::New(env, VkAabbPositionsKHR_minZ_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAabbPositionsKHR_maxX_offsetof"] = Napi::Function::New(env, VkAabbPositionsKHR_maxX_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAabbPositionsKHR_maxY_offsetof"] = Napi::Function::New(env, VkAabbPositionsKHR_maxY_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAabbPositionsKHR_maxZ_offsetof"] = Napi::Function::New(env, VkAabbPositionsKHR_maxZ_offsetof);
#endif

#ifdef VK_KHR_acceleration_structure
    exports["VkTransformMatrixKHR_matrix_offsetof"] = Napi::Function::New(env, VkTransformMatrixKHR_matrix_offsetof);
#endif

#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureInstanceKHR_transform_offsetof"] = Napi::Function::New(env, VkAccelerationStructureInstanceKHR_transform_offsetof);
#endif




#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureInstanceKHR_accelerationStructureReference_offsetof"] = Napi::Function::New(env, VkAccelerationStructureInstanceKHR_accelerationStructureReference_offsetof);
#endif

#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureDeviceAddressInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureDeviceAddressInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureDeviceAddressInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureDeviceAddressInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureDeviceAddressInfoKHR_accelerationStructure_offsetof"] = Napi::Function::New(env, VkAccelerationStructureDeviceAddressInfoKHR_accelerationStructure_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureVersionInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureVersionInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureVersionInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureVersionInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureVersionInfoKHR_pVersionData_offsetof"] = Napi::Function::New(env, VkAccelerationStructureVersionInfoKHR_pVersionData_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureInfoKHR_src_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureInfoKHR_src_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureInfoKHR_dst_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureInfoKHR_dst_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureInfoKHR_mode_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureInfoKHR_mode_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureToMemoryInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureToMemoryInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureToMemoryInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureToMemoryInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureToMemoryInfoKHR_src_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureToMemoryInfoKHR_src_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureToMemoryInfoKHR_dst_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureToMemoryInfoKHR_dst_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyAccelerationStructureToMemoryInfoKHR_mode_offsetof"] = Napi::Function::New(env, VkCopyAccelerationStructureToMemoryInfoKHR_mode_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyMemoryToAccelerationStructureInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkCopyMemoryToAccelerationStructureInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyMemoryToAccelerationStructureInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkCopyMemoryToAccelerationStructureInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyMemoryToAccelerationStructureInfoKHR_src_offsetof"] = Napi::Function::New(env, VkCopyMemoryToAccelerationStructureInfoKHR_src_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyMemoryToAccelerationStructureInfoKHR_dst_offsetof"] = Napi::Function::New(env, VkCopyMemoryToAccelerationStructureInfoKHR_dst_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkCopyMemoryToAccelerationStructureInfoKHR_mode_offsetof"] = Napi::Function::New(env, VkCopyMemoryToAccelerationStructureInfoKHR_mode_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineInterfaceCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineInterfaceCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineInterfaceCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineInterfaceCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineInterfaceCreateInfoKHR_maxPipelineRayPayloadSize_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineInterfaceCreateInfoKHR_maxPipelineRayPayloadSize_offsetof);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["VkRayTracingPipelineInterfaceCreateInfoKHR_maxPipelineRayHitAttributeSize_offsetof"] = Napi::Function::New(env, VkRayTracingPipelineInterfaceCreateInfoKHR_maxPipelineRayHitAttributeSize_offsetof);
#endif
#ifdef VK_KHR_pipeline_library
    exports["VkPipelineLibraryCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkPipelineLibraryCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_pipeline_library
    exports["VkPipelineLibraryCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkPipelineLibraryCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_pipeline_library
    exports["VkPipelineLibraryCreateInfoKHR_libraryCount_offsetof"] = Napi::Function::New(env, VkPipelineLibraryCreateInfoKHR_libraryCount_offsetof);
#endif
#ifdef VK_KHR_pipeline_library
    exports["VkPipelineLibraryCreateInfoKHR_pLibraries_offsetof"] = Napi::Function::New(env, VkPipelineLibraryCreateInfoKHR_pLibraries_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state
    exports["VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state
    exports["VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state
    exports["VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_extendedDynamicState_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_extendedDynamicState_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state2
    exports["VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state2
    exports["VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state2
    exports["VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_extendedDynamicState2_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_extendedDynamicState2_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state2
    exports["VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_extendedDynamicState2LogicOp_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_extendedDynamicState2LogicOp_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state2
    exports["VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_extendedDynamicState2PatchControlPoints_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_extendedDynamicState2PatchControlPoints_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3TessellationDomainOrigin_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3TessellationDomainOrigin_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3DepthClampEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3DepthClampEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3PolygonMode_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3PolygonMode_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3RasterizationSamples_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3RasterizationSamples_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3SampleMask_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3SampleMask_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3AlphaToCoverageEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3AlphaToCoverageEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3AlphaToOneEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3AlphaToOneEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3LogicOpEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3LogicOpEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorBlendEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorBlendEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorBlendEquation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorBlendEquation_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorWriteMask_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorWriteMask_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3RasterizationStream_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3RasterizationStream_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ConservativeRasterizationMode_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ConservativeRasterizationMode_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ExtraPrimitiveOverestimationSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ExtraPrimitiveOverestimationSize_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3DepthClipEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3DepthClipEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3SampleLocationsEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3SampleLocationsEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorBlendAdvanced_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ColorBlendAdvanced_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ProvokingVertexMode_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ProvokingVertexMode_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3LineRasterizationMode_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3LineRasterizationMode_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3LineStippleEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3LineStippleEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3DepthClipNegativeOneToOne_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3DepthClipNegativeOneToOne_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ViewportWScalingEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ViewportWScalingEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ViewportSwizzle_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ViewportSwizzle_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageToColorEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageToColorEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageToColorLocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageToColorLocation_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageModulationMode_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageModulationMode_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageModulationTableEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageModulationTableEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageModulationTable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageModulationTable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageReductionMode_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3CoverageReductionMode_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3RepresentativeFragmentTestEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3RepresentativeFragmentTestEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ShadingRateImageEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT_extendedDynamicState3ShadingRateImageEnable_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3PropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3PropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkPhysicalDeviceExtendedDynamicState3PropertiesEXT_dynamicPrimitiveTopologyUnrestricted_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT_dynamicPrimitiveTopologyUnrestricted_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendEquationEXT_srcColorBlendFactor_offsetof"] = Napi::Function::New(env, VkColorBlendEquationEXT_srcColorBlendFactor_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendEquationEXT_dstColorBlendFactor_offsetof"] = Napi::Function::New(env, VkColorBlendEquationEXT_dstColorBlendFactor_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendEquationEXT_colorBlendOp_offsetof"] = Napi::Function::New(env, VkColorBlendEquationEXT_colorBlendOp_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendEquationEXT_srcAlphaBlendFactor_offsetof"] = Napi::Function::New(env, VkColorBlendEquationEXT_srcAlphaBlendFactor_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendEquationEXT_dstAlphaBlendFactor_offsetof"] = Napi::Function::New(env, VkColorBlendEquationEXT_dstAlphaBlendFactor_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendEquationEXT_alphaBlendOp_offsetof"] = Napi::Function::New(env, VkColorBlendEquationEXT_alphaBlendOp_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendAdvancedEXT_advancedBlendOp_offsetof"] = Napi::Function::New(env, VkColorBlendAdvancedEXT_advancedBlendOp_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendAdvancedEXT_srcPremultiplied_offsetof"] = Napi::Function::New(env, VkColorBlendAdvancedEXT_srcPremultiplied_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendAdvancedEXT_dstPremultiplied_offsetof"] = Napi::Function::New(env, VkColorBlendAdvancedEXT_dstPremultiplied_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendAdvancedEXT_blendOverlap_offsetof"] = Napi::Function::New(env, VkColorBlendAdvancedEXT_blendOverlap_offsetof);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["VkColorBlendAdvancedEXT_clampResults_offsetof"] = Napi::Function::New(env, VkColorBlendAdvancedEXT_clampResults_offsetof);
#endif
#ifdef VK_QCOM_render_pass_transform
    exports["VkRenderPassTransformBeginInfoQCOM_sType_offsetof"] = Napi::Function::New(env, VkRenderPassTransformBeginInfoQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_render_pass_transform
    exports["VkRenderPassTransformBeginInfoQCOM_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassTransformBeginInfoQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_render_pass_transform
    exports["VkRenderPassTransformBeginInfoQCOM_transform_offsetof"] = Napi::Function::New(env, VkRenderPassTransformBeginInfoQCOM_transform_offsetof);
#endif
#ifdef VK_QCOM_rotated_copy_commands
    exports["VkCopyCommandTransformInfoQCOM_sType_offsetof"] = Napi::Function::New(env, VkCopyCommandTransformInfoQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_rotated_copy_commands
    exports["VkCopyCommandTransformInfoQCOM_pNext_offsetof"] = Napi::Function::New(env, VkCopyCommandTransformInfoQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_rotated_copy_commands
    exports["VkCopyCommandTransformInfoQCOM_transform_offsetof"] = Napi::Function::New(env, VkCopyCommandTransformInfoQCOM_transform_offsetof);
#endif
#ifdef VK_QCOM_render_pass_transform
    exports["VkCommandBufferInheritanceRenderPassTransformInfoQCOM_sType_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderPassTransformInfoQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_render_pass_transform
    exports["VkCommandBufferInheritanceRenderPassTransformInfoQCOM_pNext_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderPassTransformInfoQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_render_pass_transform
    exports["VkCommandBufferInheritanceRenderPassTransformInfoQCOM_transform_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderPassTransformInfoQCOM_transform_offsetof);
#endif
#ifdef VK_QCOM_render_pass_transform
    exports["VkCommandBufferInheritanceRenderPassTransformInfoQCOM_renderArea_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderPassTransformInfoQCOM_renderArea_offsetof);
#endif
#ifdef VK_NV_device_diagnostics_config
    exports["VkPhysicalDeviceDiagnosticsConfigFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDiagnosticsConfigFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_device_diagnostics_config
    exports["VkPhysicalDeviceDiagnosticsConfigFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDiagnosticsConfigFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_diagnostics_config
    exports["VkPhysicalDeviceDiagnosticsConfigFeaturesNV_diagnosticsConfig_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDiagnosticsConfigFeaturesNV_diagnosticsConfig_offsetof);
#endif
#ifdef VK_NV_device_diagnostics_config
    exports["VkDeviceDiagnosticsConfigCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkDeviceDiagnosticsConfigCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_device_diagnostics_config
    exports["VkDeviceDiagnosticsConfigCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkDeviceDiagnosticsConfigCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_device_diagnostics_config
    exports["VkDeviceDiagnosticsConfigCreateInfoNV_flags_offsetof"] = Napi::Function::New(env, VkDeviceDiagnosticsConfigCreateInfoNV_flags_offsetof);
#endif
    exports["VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_sType_offsetof);
    exports["VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_shaderZeroInitializeWorkgroupMemory_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_shaderZeroInitializeWorkgroupMemory_offsetof);

#ifdef VK_KHR_shader_subgroup_uniform_control_flow
    exports["VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_shader_subgroup_uniform_control_flow
    exports["VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_shader_subgroup_uniform_control_flow
    exports["VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_shaderSubgroupUniformControlFlow_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_shaderSubgroupUniformControlFlow_offsetof);
#endif
#ifdef VK_EXT_robustness2
    exports["VkPhysicalDeviceRobustness2FeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRobustness2FeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_robustness2
    exports["VkPhysicalDeviceRobustness2FeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRobustness2FeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_robustness2
    exports["VkPhysicalDeviceRobustness2FeaturesEXT_robustBufferAccess2_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRobustness2FeaturesEXT_robustBufferAccess2_offsetof);
#endif
#ifdef VK_EXT_robustness2
    exports["VkPhysicalDeviceRobustness2FeaturesEXT_robustImageAccess2_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRobustness2FeaturesEXT_robustImageAccess2_offsetof);
#endif
#ifdef VK_EXT_robustness2
    exports["VkPhysicalDeviceRobustness2FeaturesEXT_nullDescriptor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRobustness2FeaturesEXT_nullDescriptor_offsetof);
#endif
#ifdef VK_EXT_robustness2
    exports["VkPhysicalDeviceRobustness2PropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRobustness2PropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_robustness2
    exports["VkPhysicalDeviceRobustness2PropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRobustness2PropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_robustness2
    exports["VkPhysicalDeviceRobustness2PropertiesEXT_robustStorageBufferAccessSizeAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRobustness2PropertiesEXT_robustStorageBufferAccessSizeAlignment_offsetof);
#endif
#ifdef VK_EXT_robustness2
    exports["VkPhysicalDeviceRobustness2PropertiesEXT_robustUniformBufferAccessSizeAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRobustness2PropertiesEXT_robustUniformBufferAccessSizeAlignment_offsetof);
#endif
    exports["VkPhysicalDeviceImageRobustnessFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageRobustnessFeatures_sType_offsetof);
    exports["VkPhysicalDeviceImageRobustnessFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageRobustnessFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceImageRobustnessFeatures_robustImageAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageRobustnessFeatures_robustImageAccess_offsetof);

#ifdef VK_KHR_workgroup_memory_explicit_layout
    exports["VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_workgroup_memory_explicit_layout
    exports["VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_workgroup_memory_explicit_layout
    exports["VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayout_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayout_offsetof);
#endif
#ifdef VK_KHR_workgroup_memory_explicit_layout
    exports["VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayoutScalarBlockLayout_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayoutScalarBlockLayout_offsetof);
#endif
#ifdef VK_KHR_workgroup_memory_explicit_layout
    exports["VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayout8BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayout8BitAccess_offsetof);
#endif
#ifdef VK_KHR_workgroup_memory_explicit_layout
    exports["VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayout16BitAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_workgroupMemoryExplicitLayout16BitAccess_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_constantAlphaColorBlendFactors_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_constantAlphaColorBlendFactors_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_events_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_events_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_imageViewFormatReinterpretation_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_imageViewFormatReinterpretation_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_imageViewFormatSwizzle_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_imageViewFormatSwizzle_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_imageView2DOn3DImage_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_imageView2DOn3DImage_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_multisampleArrayImage_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_multisampleArrayImage_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_mutableComparisonSamplers_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_mutableComparisonSamplers_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_pointPolygons_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_pointPolygons_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_samplerMipLodBias_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_samplerMipLodBias_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_separateStencilMaskRef_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_separateStencilMaskRef_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_shaderSampleRateInterpolationFunctions_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_shaderSampleRateInterpolationFunctions_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_tessellationIsolines_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_tessellationIsolines_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_tessellationPointMode_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_tessellationPointMode_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_triangleFans_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_triangleFans_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetFeaturesKHR_vertexAttributeAccessBeyondStride_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetFeaturesKHR_vertexAttributeAccessBeyondStride_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetPropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetPropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetPropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetPropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_portability_subset
    exports["VkPhysicalDevicePortabilitySubsetPropertiesKHR_minVertexInputBindingStrideAlignment_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePortabilitySubsetPropertiesKHR_minVertexInputBindingStrideAlignment_offsetof);
#endif
#ifdef VK_EXT_4444_formats
    exports["VkPhysicalDevice4444FormatsFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevice4444FormatsFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_4444_formats
    exports["VkPhysicalDevice4444FormatsFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevice4444FormatsFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_4444_formats
    exports["VkPhysicalDevice4444FormatsFeaturesEXT_formatA4R4G4B4_offsetof"] = Napi::Function::New(env, VkPhysicalDevice4444FormatsFeaturesEXT_formatA4R4G4B4_offsetof);
#endif
#ifdef VK_EXT_4444_formats
    exports["VkPhysicalDevice4444FormatsFeaturesEXT_formatA4B4G4R4_offsetof"] = Napi::Function::New(env, VkPhysicalDevice4444FormatsFeaturesEXT_formatA4B4G4R4_offsetof);
#endif
#ifdef VK_HUAWEI_subpass_shading
    exports["VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_sType_offsetof);
#endif
#ifdef VK_HUAWEI_subpass_shading
    exports["VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_pNext_offsetof);
#endif
#ifdef VK_HUAWEI_subpass_shading
    exports["VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_subpassShading_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_subpassShading_offsetof);
#endif
    exports["VkBufferCopy2_sType_offsetof"] = Napi::Function::New(env, VkBufferCopy2_sType_offsetof);
    exports["VkBufferCopy2_pNext_offsetof"] = Napi::Function::New(env, VkBufferCopy2_pNext_offsetof);
    exports["VkBufferCopy2_srcOffset_offsetof"] = Napi::Function::New(env, VkBufferCopy2_srcOffset_offsetof);
    exports["VkBufferCopy2_dstOffset_offsetof"] = Napi::Function::New(env, VkBufferCopy2_dstOffset_offsetof);
    exports["VkBufferCopy2_size_offsetof"] = Napi::Function::New(env, VkBufferCopy2_size_offsetof);

    exports["VkImageCopy2_sType_offsetof"] = Napi::Function::New(env, VkImageCopy2_sType_offsetof);
    exports["VkImageCopy2_pNext_offsetof"] = Napi::Function::New(env, VkImageCopy2_pNext_offsetof);
    exports["VkImageCopy2_srcSubresource_offsetof"] = Napi::Function::New(env, VkImageCopy2_srcSubresource_offsetof);
    exports["VkImageCopy2_srcOffset_offsetof"] = Napi::Function::New(env, VkImageCopy2_srcOffset_offsetof);
    exports["VkImageCopy2_dstSubresource_offsetof"] = Napi::Function::New(env, VkImageCopy2_dstSubresource_offsetof);
    exports["VkImageCopy2_dstOffset_offsetof"] = Napi::Function::New(env, VkImageCopy2_dstOffset_offsetof);
    exports["VkImageCopy2_extent_offsetof"] = Napi::Function::New(env, VkImageCopy2_extent_offsetof);

    exports["VkImageBlit2_sType_offsetof"] = Napi::Function::New(env, VkImageBlit2_sType_offsetof);
    exports["VkImageBlit2_pNext_offsetof"] = Napi::Function::New(env, VkImageBlit2_pNext_offsetof);
    exports["VkImageBlit2_srcSubresource_offsetof"] = Napi::Function::New(env, VkImageBlit2_srcSubresource_offsetof);
    exports["VkImageBlit2_srcOffsets_offsetof"] = Napi::Function::New(env, VkImageBlit2_srcOffsets_offsetof);
    exports["VkImageBlit2_dstSubresource_offsetof"] = Napi::Function::New(env, VkImageBlit2_dstSubresource_offsetof);
    exports["VkImageBlit2_dstOffsets_offsetof"] = Napi::Function::New(env, VkImageBlit2_dstOffsets_offsetof);

    exports["VkBufferImageCopy2_sType_offsetof"] = Napi::Function::New(env, VkBufferImageCopy2_sType_offsetof);
    exports["VkBufferImageCopy2_pNext_offsetof"] = Napi::Function::New(env, VkBufferImageCopy2_pNext_offsetof);
    exports["VkBufferImageCopy2_bufferOffset_offsetof"] = Napi::Function::New(env, VkBufferImageCopy2_bufferOffset_offsetof);
    exports["VkBufferImageCopy2_bufferRowLength_offsetof"] = Napi::Function::New(env, VkBufferImageCopy2_bufferRowLength_offsetof);
    exports["VkBufferImageCopy2_bufferImageHeight_offsetof"] = Napi::Function::New(env, VkBufferImageCopy2_bufferImageHeight_offsetof);
    exports["VkBufferImageCopy2_imageSubresource_offsetof"] = Napi::Function::New(env, VkBufferImageCopy2_imageSubresource_offsetof);
    exports["VkBufferImageCopy2_imageOffset_offsetof"] = Napi::Function::New(env, VkBufferImageCopy2_imageOffset_offsetof);
    exports["VkBufferImageCopy2_imageExtent_offsetof"] = Napi::Function::New(env, VkBufferImageCopy2_imageExtent_offsetof);

    exports["VkImageResolve2_sType_offsetof"] = Napi::Function::New(env, VkImageResolve2_sType_offsetof);
    exports["VkImageResolve2_pNext_offsetof"] = Napi::Function::New(env, VkImageResolve2_pNext_offsetof);
    exports["VkImageResolve2_srcSubresource_offsetof"] = Napi::Function::New(env, VkImageResolve2_srcSubresource_offsetof);
    exports["VkImageResolve2_srcOffset_offsetof"] = Napi::Function::New(env, VkImageResolve2_srcOffset_offsetof);
    exports["VkImageResolve2_dstSubresource_offsetof"] = Napi::Function::New(env, VkImageResolve2_dstSubresource_offsetof);
    exports["VkImageResolve2_dstOffset_offsetof"] = Napi::Function::New(env, VkImageResolve2_dstOffset_offsetof);
    exports["VkImageResolve2_extent_offsetof"] = Napi::Function::New(env, VkImageResolve2_extent_offsetof);

    exports["VkCopyBufferInfo2_sType_offsetof"] = Napi::Function::New(env, VkCopyBufferInfo2_sType_offsetof);
    exports["VkCopyBufferInfo2_pNext_offsetof"] = Napi::Function::New(env, VkCopyBufferInfo2_pNext_offsetof);
    exports["VkCopyBufferInfo2_srcBuffer_offsetof"] = Napi::Function::New(env, VkCopyBufferInfo2_srcBuffer_offsetof);
    exports["VkCopyBufferInfo2_dstBuffer_offsetof"] = Napi::Function::New(env, VkCopyBufferInfo2_dstBuffer_offsetof);
    exports["VkCopyBufferInfo2_regionCount_offsetof"] = Napi::Function::New(env, VkCopyBufferInfo2_regionCount_offsetof);
    exports["VkCopyBufferInfo2_pRegions_offsetof"] = Napi::Function::New(env, VkCopyBufferInfo2_pRegions_offsetof);

    exports["VkCopyImageInfo2_sType_offsetof"] = Napi::Function::New(env, VkCopyImageInfo2_sType_offsetof);
    exports["VkCopyImageInfo2_pNext_offsetof"] = Napi::Function::New(env, VkCopyImageInfo2_pNext_offsetof);
    exports["VkCopyImageInfo2_srcImage_offsetof"] = Napi::Function::New(env, VkCopyImageInfo2_srcImage_offsetof);
    exports["VkCopyImageInfo2_srcImageLayout_offsetof"] = Napi::Function::New(env, VkCopyImageInfo2_srcImageLayout_offsetof);
    exports["VkCopyImageInfo2_dstImage_offsetof"] = Napi::Function::New(env, VkCopyImageInfo2_dstImage_offsetof);
    exports["VkCopyImageInfo2_dstImageLayout_offsetof"] = Napi::Function::New(env, VkCopyImageInfo2_dstImageLayout_offsetof);
    exports["VkCopyImageInfo2_regionCount_offsetof"] = Napi::Function::New(env, VkCopyImageInfo2_regionCount_offsetof);
    exports["VkCopyImageInfo2_pRegions_offsetof"] = Napi::Function::New(env, VkCopyImageInfo2_pRegions_offsetof);

    exports["VkBlitImageInfo2_sType_offsetof"] = Napi::Function::New(env, VkBlitImageInfo2_sType_offsetof);
    exports["VkBlitImageInfo2_pNext_offsetof"] = Napi::Function::New(env, VkBlitImageInfo2_pNext_offsetof);
    exports["VkBlitImageInfo2_srcImage_offsetof"] = Napi::Function::New(env, VkBlitImageInfo2_srcImage_offsetof);
    exports["VkBlitImageInfo2_srcImageLayout_offsetof"] = Napi::Function::New(env, VkBlitImageInfo2_srcImageLayout_offsetof);
    exports["VkBlitImageInfo2_dstImage_offsetof"] = Napi::Function::New(env, VkBlitImageInfo2_dstImage_offsetof);
    exports["VkBlitImageInfo2_dstImageLayout_offsetof"] = Napi::Function::New(env, VkBlitImageInfo2_dstImageLayout_offsetof);
    exports["VkBlitImageInfo2_regionCount_offsetof"] = Napi::Function::New(env, VkBlitImageInfo2_regionCount_offsetof);
    exports["VkBlitImageInfo2_pRegions_offsetof"] = Napi::Function::New(env, VkBlitImageInfo2_pRegions_offsetof);
    exports["VkBlitImageInfo2_filter_offsetof"] = Napi::Function::New(env, VkBlitImageInfo2_filter_offsetof);

    exports["VkCopyBufferToImageInfo2_sType_offsetof"] = Napi::Function::New(env, VkCopyBufferToImageInfo2_sType_offsetof);
    exports["VkCopyBufferToImageInfo2_pNext_offsetof"] = Napi::Function::New(env, VkCopyBufferToImageInfo2_pNext_offsetof);
    exports["VkCopyBufferToImageInfo2_srcBuffer_offsetof"] = Napi::Function::New(env, VkCopyBufferToImageInfo2_srcBuffer_offsetof);
    exports["VkCopyBufferToImageInfo2_dstImage_offsetof"] = Napi::Function::New(env, VkCopyBufferToImageInfo2_dstImage_offsetof);
    exports["VkCopyBufferToImageInfo2_dstImageLayout_offsetof"] = Napi::Function::New(env, VkCopyBufferToImageInfo2_dstImageLayout_offsetof);
    exports["VkCopyBufferToImageInfo2_regionCount_offsetof"] = Napi::Function::New(env, VkCopyBufferToImageInfo2_regionCount_offsetof);
    exports["VkCopyBufferToImageInfo2_pRegions_offsetof"] = Napi::Function::New(env, VkCopyBufferToImageInfo2_pRegions_offsetof);

    exports["VkCopyImageToBufferInfo2_sType_offsetof"] = Napi::Function::New(env, VkCopyImageToBufferInfo2_sType_offsetof);
    exports["VkCopyImageToBufferInfo2_pNext_offsetof"] = Napi::Function::New(env, VkCopyImageToBufferInfo2_pNext_offsetof);
    exports["VkCopyImageToBufferInfo2_srcImage_offsetof"] = Napi::Function::New(env, VkCopyImageToBufferInfo2_srcImage_offsetof);
    exports["VkCopyImageToBufferInfo2_srcImageLayout_offsetof"] = Napi::Function::New(env, VkCopyImageToBufferInfo2_srcImageLayout_offsetof);
    exports["VkCopyImageToBufferInfo2_dstBuffer_offsetof"] = Napi::Function::New(env, VkCopyImageToBufferInfo2_dstBuffer_offsetof);
    exports["VkCopyImageToBufferInfo2_regionCount_offsetof"] = Napi::Function::New(env, VkCopyImageToBufferInfo2_regionCount_offsetof);
    exports["VkCopyImageToBufferInfo2_pRegions_offsetof"] = Napi::Function::New(env, VkCopyImageToBufferInfo2_pRegions_offsetof);

    exports["VkResolveImageInfo2_sType_offsetof"] = Napi::Function::New(env, VkResolveImageInfo2_sType_offsetof);
    exports["VkResolveImageInfo2_pNext_offsetof"] = Napi::Function::New(env, VkResolveImageInfo2_pNext_offsetof);
    exports["VkResolveImageInfo2_srcImage_offsetof"] = Napi::Function::New(env, VkResolveImageInfo2_srcImage_offsetof);
    exports["VkResolveImageInfo2_srcImageLayout_offsetof"] = Napi::Function::New(env, VkResolveImageInfo2_srcImageLayout_offsetof);
    exports["VkResolveImageInfo2_dstImage_offsetof"] = Napi::Function::New(env, VkResolveImageInfo2_dstImage_offsetof);
    exports["VkResolveImageInfo2_dstImageLayout_offsetof"] = Napi::Function::New(env, VkResolveImageInfo2_dstImageLayout_offsetof);
    exports["VkResolveImageInfo2_regionCount_offsetof"] = Napi::Function::New(env, VkResolveImageInfo2_regionCount_offsetof);
    exports["VkResolveImageInfo2_pRegions_offsetof"] = Napi::Function::New(env, VkResolveImageInfo2_pRegions_offsetof);

#ifdef VK_EXT_shader_image_atomic_int64
    exports["VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_shader_image_atomic_int64
    exports["VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_shader_image_atomic_int64
    exports["VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_shaderImageInt64Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_shaderImageInt64Atomics_offsetof);
#endif
#ifdef VK_EXT_shader_image_atomic_int64
    exports["VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_sparseImageInt64Atomics_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_sparseImageInt64Atomics_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkFragmentShadingRateAttachmentInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkFragmentShadingRateAttachmentInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkFragmentShadingRateAttachmentInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkFragmentShadingRateAttachmentInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkFragmentShadingRateAttachmentInfoKHR_pFragmentShadingRateAttachment_offsetof"] = Napi::Function::New(env, VkFragmentShadingRateAttachmentInfoKHR_pFragmentShadingRateAttachment_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkFragmentShadingRateAttachmentInfoKHR_shadingRateAttachmentTexelSize_offsetof"] = Napi::Function::New(env, VkFragmentShadingRateAttachmentInfoKHR_shadingRateAttachmentTexelSize_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPipelineFragmentShadingRateStateCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkPipelineFragmentShadingRateStateCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPipelineFragmentShadingRateStateCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkPipelineFragmentShadingRateStateCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPipelineFragmentShadingRateStateCreateInfoKHR_fragmentSize_offsetof"] = Napi::Function::New(env, VkPipelineFragmentShadingRateStateCreateInfoKHR_fragmentSize_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPipelineFragmentShadingRateStateCreateInfoKHR_combinerOps_offsetof"] = Napi::Function::New(env, VkPipelineFragmentShadingRateStateCreateInfoKHR_combinerOps_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRateFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRateFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRateFeaturesKHR_pipelineFragmentShadingRate_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateFeaturesKHR_pipelineFragmentShadingRate_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRateFeaturesKHR_primitiveFragmentShadingRate_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateFeaturesKHR_primitiveFragmentShadingRate_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRateFeaturesKHR_attachmentFragmentShadingRate_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateFeaturesKHR_attachmentFragmentShadingRate_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_minFragmentShadingRateAttachmentTexelSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_minFragmentShadingRateAttachmentTexelSize_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateAttachmentTexelSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateAttachmentTexelSize_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateAttachmentTexelSizeAspectRatio_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateAttachmentTexelSizeAspectRatio_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_primitiveFragmentShadingRateWithMultipleViewports_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_primitiveFragmentShadingRateWithMultipleViewports_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_layeredShadingRateAttachments_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_layeredShadingRateAttachments_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateNonTrivialCombinerOps_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateNonTrivialCombinerOps_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentSize_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentSizeAspectRatio_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentSizeAspectRatio_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateCoverageSamples_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateCoverageSamples_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateRasterizationSamples_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_maxFragmentShadingRateRasterizationSamples_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithShaderDepthStencilWrites_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithShaderDepthStencilWrites_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithSampleMask_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithSampleMask_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithShaderSampleMask_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithShaderSampleMask_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithConservativeRasterization_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithConservativeRasterization_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithFragmentShaderInterlock_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithFragmentShaderInterlock_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithCustomSampleLocations_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateWithCustomSampleLocations_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateStrictMultiplyCombiner_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRatePropertiesKHR_fragmentShadingRateStrictMultiplyCombiner_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRateKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateKHR_sType_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRateKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRateKHR_sampleCounts_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateKHR_sampleCounts_offsetof);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["VkPhysicalDeviceFragmentShadingRateKHR_fragmentSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateKHR_fragmentSize_offsetof);
#endif
    exports["VkPhysicalDeviceShaderTerminateInvocationFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderTerminateInvocationFeatures_sType_offsetof);
    exports["VkPhysicalDeviceShaderTerminateInvocationFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderTerminateInvocationFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceShaderTerminateInvocationFeatures_shaderTerminateInvocation_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderTerminateInvocationFeatures_shaderTerminateInvocation_offsetof);

#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_fragmentShadingRateEnums_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_fragmentShadingRateEnums_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_supersampleFragmentShadingRates_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_supersampleFragmentShadingRates_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_noInvocationFragmentShadingRates_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_noInvocationFragmentShadingRates_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_maxFragmentShadingRateInvocationCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_maxFragmentShadingRateInvocationCount_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPipelineFragmentShadingRateEnumStateCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkPipelineFragmentShadingRateEnumStateCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPipelineFragmentShadingRateEnumStateCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkPipelineFragmentShadingRateEnumStateCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPipelineFragmentShadingRateEnumStateCreateInfoNV_shadingRateType_offsetof"] = Napi::Function::New(env, VkPipelineFragmentShadingRateEnumStateCreateInfoNV_shadingRateType_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPipelineFragmentShadingRateEnumStateCreateInfoNV_shadingRate_offsetof"] = Napi::Function::New(env, VkPipelineFragmentShadingRateEnumStateCreateInfoNV_shadingRate_offsetof);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["VkPipelineFragmentShadingRateEnumStateCreateInfoNV_combinerOps_offsetof"] = Napi::Function::New(env, VkPipelineFragmentShadingRateEnumStateCreateInfoNV_combinerOps_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildSizesInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildSizesInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildSizesInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildSizesInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildSizesInfoKHR_accelerationStructureSize_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildSizesInfoKHR_accelerationStructureSize_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildSizesInfoKHR_updateScratchSize_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildSizesInfoKHR_updateScratchSize_offsetof);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["VkAccelerationStructureBuildSizesInfoKHR_buildScratchSize_offsetof"] = Napi::Function::New(env, VkAccelerationStructureBuildSizesInfoKHR_buildScratchSize_offsetof);
#endif
#ifdef VK_EXT_image_2d_view_of_3d
    exports["VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_2d_view_of_3d
    exports["VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_2d_view_of_3d
    exports["VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_image2DViewOf3D_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_image2DViewOf3D_offsetof);
#endif
#ifdef VK_EXT_image_2d_view_of_3d
    exports["VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_sampler2DViewOf3D_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_sampler2DViewOf3D_offsetof);
#endif
#ifdef VK_EXT_mutable_descriptor_type
    exports["VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_mutable_descriptor_type
    exports["VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_mutable_descriptor_type
    exports["VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT_mutableDescriptorType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT_mutableDescriptorType_offsetof);
#endif

#ifdef VK_EXT_mutable_descriptor_type
    exports["VkMutableDescriptorTypeListEXT_descriptorTypeCount_offsetof"] = Napi::Function::New(env, VkMutableDescriptorTypeListEXT_descriptorTypeCount_offsetof);
#endif
#ifdef VK_EXT_mutable_descriptor_type
    exports["VkMutableDescriptorTypeListEXT_pDescriptorTypes_offsetof"] = Napi::Function::New(env, VkMutableDescriptorTypeListEXT_pDescriptorTypes_offsetof);
#endif

#ifdef VK_EXT_mutable_descriptor_type
    exports["VkMutableDescriptorTypeCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkMutableDescriptorTypeCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_mutable_descriptor_type
    exports["VkMutableDescriptorTypeCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkMutableDescriptorTypeCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_mutable_descriptor_type
    exports["VkMutableDescriptorTypeCreateInfoEXT_mutableDescriptorTypeListCount_offsetof"] = Napi::Function::New(env, VkMutableDescriptorTypeCreateInfoEXT_mutableDescriptorTypeListCount_offsetof);
#endif
#ifdef VK_EXT_mutable_descriptor_type
    exports["VkMutableDescriptorTypeCreateInfoEXT_pMutableDescriptorTypeLists_offsetof"] = Napi::Function::New(env, VkMutableDescriptorTypeCreateInfoEXT_pMutableDescriptorTypeLists_offsetof);
#endif

#ifdef VK_EXT_depth_clip_control
    exports["VkPhysicalDeviceDepthClipControlFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthClipControlFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_depth_clip_control
    exports["VkPhysicalDeviceDepthClipControlFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthClipControlFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_depth_clip_control
    exports["VkPhysicalDeviceDepthClipControlFeaturesEXT_depthClipControl_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthClipControlFeaturesEXT_depthClipControl_offsetof);
#endif
#ifdef VK_EXT_depth_clip_control
    exports["VkPipelineViewportDepthClipControlCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineViewportDepthClipControlCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_depth_clip_control
    exports["VkPipelineViewportDepthClipControlCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineViewportDepthClipControlCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_depth_clip_control
    exports["VkPipelineViewportDepthClipControlCreateInfoEXT_negativeOneToOne_offsetof"] = Napi::Function::New(env, VkPipelineViewportDepthClipControlCreateInfoEXT_negativeOneToOne_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_vertexInputDynamicState_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_vertexInputDynamicState_offsetof);
#endif
#ifdef VK_NV_external_memory_rdma
    exports["VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_external_memory_rdma
    exports["VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_external_memory_rdma
    exports["VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_externalMemoryRDMA_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_externalMemoryRDMA_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputBindingDescription2EXT_sType_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDescription2EXT_sType_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputBindingDescription2EXT_pNext_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDescription2EXT_pNext_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputBindingDescription2EXT_binding_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDescription2EXT_binding_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputBindingDescription2EXT_stride_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDescription2EXT_stride_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputBindingDescription2EXT_inputRate_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDescription2EXT_inputRate_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputBindingDescription2EXT_divisor_offsetof"] = Napi::Function::New(env, VkVertexInputBindingDescription2EXT_divisor_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputAttributeDescription2EXT_sType_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription2EXT_sType_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputAttributeDescription2EXT_pNext_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription2EXT_pNext_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputAttributeDescription2EXT_location_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription2EXT_location_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputAttributeDescription2EXT_binding_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription2EXT_binding_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputAttributeDescription2EXT_format_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription2EXT_format_offsetof);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["VkVertexInputAttributeDescription2EXT_offset_offsetof"] = Napi::Function::New(env, VkVertexInputAttributeDescription2EXT_offset_offsetof);
#endif
#ifdef VK_EXT_color_write_enable
    exports["VkPhysicalDeviceColorWriteEnableFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceColorWriteEnableFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_color_write_enable
    exports["VkPhysicalDeviceColorWriteEnableFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceColorWriteEnableFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_color_write_enable
    exports["VkPhysicalDeviceColorWriteEnableFeaturesEXT_colorWriteEnable_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceColorWriteEnableFeaturesEXT_colorWriteEnable_offsetof);
#endif
#ifdef VK_EXT_color_write_enable
    exports["VkPipelineColorWriteCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineColorWriteCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_color_write_enable
    exports["VkPipelineColorWriteCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineColorWriteCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_color_write_enable
    exports["VkPipelineColorWriteCreateInfoEXT_attachmentCount_offsetof"] = Napi::Function::New(env, VkPipelineColorWriteCreateInfoEXT_attachmentCount_offsetof);
#endif
#ifdef VK_EXT_color_write_enable
    exports["VkPipelineColorWriteCreateInfoEXT_pColorWriteEnables_offsetof"] = Napi::Function::New(env, VkPipelineColorWriteCreateInfoEXT_pColorWriteEnables_offsetof);
#endif
    exports["VkMemoryBarrier2_sType_offsetof"] = Napi::Function::New(env, VkMemoryBarrier2_sType_offsetof);
    exports["VkMemoryBarrier2_pNext_offsetof"] = Napi::Function::New(env, VkMemoryBarrier2_pNext_offsetof);
    exports["VkMemoryBarrier2_srcStageMask_offsetof"] = Napi::Function::New(env, VkMemoryBarrier2_srcStageMask_offsetof);
    exports["VkMemoryBarrier2_srcAccessMask_offsetof"] = Napi::Function::New(env, VkMemoryBarrier2_srcAccessMask_offsetof);
    exports["VkMemoryBarrier2_dstStageMask_offsetof"] = Napi::Function::New(env, VkMemoryBarrier2_dstStageMask_offsetof);
    exports["VkMemoryBarrier2_dstAccessMask_offsetof"] = Napi::Function::New(env, VkMemoryBarrier2_dstAccessMask_offsetof);

    exports["VkImageMemoryBarrier2_sType_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_sType_offsetof);
    exports["VkImageMemoryBarrier2_pNext_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_pNext_offsetof);
    exports["VkImageMemoryBarrier2_srcStageMask_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_srcStageMask_offsetof);
    exports["VkImageMemoryBarrier2_srcAccessMask_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_srcAccessMask_offsetof);
    exports["VkImageMemoryBarrier2_dstStageMask_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_dstStageMask_offsetof);
    exports["VkImageMemoryBarrier2_dstAccessMask_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_dstAccessMask_offsetof);
    exports["VkImageMemoryBarrier2_oldLayout_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_oldLayout_offsetof);
    exports["VkImageMemoryBarrier2_newLayout_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_newLayout_offsetof);
    exports["VkImageMemoryBarrier2_srcQueueFamilyIndex_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_srcQueueFamilyIndex_offsetof);
    exports["VkImageMemoryBarrier2_dstQueueFamilyIndex_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_dstQueueFamilyIndex_offsetof);
    exports["VkImageMemoryBarrier2_image_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_image_offsetof);
    exports["VkImageMemoryBarrier2_subresourceRange_offsetof"] = Napi::Function::New(env, VkImageMemoryBarrier2_subresourceRange_offsetof);

    exports["VkBufferMemoryBarrier2_sType_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_sType_offsetof);
    exports["VkBufferMemoryBarrier2_pNext_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_pNext_offsetof);
    exports["VkBufferMemoryBarrier2_srcStageMask_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_srcStageMask_offsetof);
    exports["VkBufferMemoryBarrier2_srcAccessMask_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_srcAccessMask_offsetof);
    exports["VkBufferMemoryBarrier2_dstStageMask_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_dstStageMask_offsetof);
    exports["VkBufferMemoryBarrier2_dstAccessMask_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_dstAccessMask_offsetof);
    exports["VkBufferMemoryBarrier2_srcQueueFamilyIndex_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_srcQueueFamilyIndex_offsetof);
    exports["VkBufferMemoryBarrier2_dstQueueFamilyIndex_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_dstQueueFamilyIndex_offsetof);
    exports["VkBufferMemoryBarrier2_buffer_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_buffer_offsetof);
    exports["VkBufferMemoryBarrier2_offset_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_offset_offsetof);
    exports["VkBufferMemoryBarrier2_size_offsetof"] = Napi::Function::New(env, VkBufferMemoryBarrier2_size_offsetof);

    exports["VkDependencyInfo_sType_offsetof"] = Napi::Function::New(env, VkDependencyInfo_sType_offsetof);
    exports["VkDependencyInfo_pNext_offsetof"] = Napi::Function::New(env, VkDependencyInfo_pNext_offsetof);
    exports["VkDependencyInfo_dependencyFlags_offsetof"] = Napi::Function::New(env, VkDependencyInfo_dependencyFlags_offsetof);
    exports["VkDependencyInfo_memoryBarrierCount_offsetof"] = Napi::Function::New(env, VkDependencyInfo_memoryBarrierCount_offsetof);
    exports["VkDependencyInfo_pMemoryBarriers_offsetof"] = Napi::Function::New(env, VkDependencyInfo_pMemoryBarriers_offsetof);
    exports["VkDependencyInfo_bufferMemoryBarrierCount_offsetof"] = Napi::Function::New(env, VkDependencyInfo_bufferMemoryBarrierCount_offsetof);
    exports["VkDependencyInfo_pBufferMemoryBarriers_offsetof"] = Napi::Function::New(env, VkDependencyInfo_pBufferMemoryBarriers_offsetof);
    exports["VkDependencyInfo_imageMemoryBarrierCount_offsetof"] = Napi::Function::New(env, VkDependencyInfo_imageMemoryBarrierCount_offsetof);
    exports["VkDependencyInfo_pImageMemoryBarriers_offsetof"] = Napi::Function::New(env, VkDependencyInfo_pImageMemoryBarriers_offsetof);

    exports["VkSemaphoreSubmitInfo_sType_offsetof"] = Napi::Function::New(env, VkSemaphoreSubmitInfo_sType_offsetof);
    exports["VkSemaphoreSubmitInfo_pNext_offsetof"] = Napi::Function::New(env, VkSemaphoreSubmitInfo_pNext_offsetof);
    exports["VkSemaphoreSubmitInfo_semaphore_offsetof"] = Napi::Function::New(env, VkSemaphoreSubmitInfo_semaphore_offsetof);
    exports["VkSemaphoreSubmitInfo_value_offsetof"] = Napi::Function::New(env, VkSemaphoreSubmitInfo_value_offsetof);
    exports["VkSemaphoreSubmitInfo_stageMask_offsetof"] = Napi::Function::New(env, VkSemaphoreSubmitInfo_stageMask_offsetof);
    exports["VkSemaphoreSubmitInfo_deviceIndex_offsetof"] = Napi::Function::New(env, VkSemaphoreSubmitInfo_deviceIndex_offsetof);

    exports["VkCommandBufferSubmitInfo_sType_offsetof"] = Napi::Function::New(env, VkCommandBufferSubmitInfo_sType_offsetof);
    exports["VkCommandBufferSubmitInfo_pNext_offsetof"] = Napi::Function::New(env, VkCommandBufferSubmitInfo_pNext_offsetof);
    exports["VkCommandBufferSubmitInfo_commandBuffer_offsetof"] = Napi::Function::New(env, VkCommandBufferSubmitInfo_commandBuffer_offsetof);
    exports["VkCommandBufferSubmitInfo_deviceMask_offsetof"] = Napi::Function::New(env, VkCommandBufferSubmitInfo_deviceMask_offsetof);

    exports["VkSubmitInfo2_sType_offsetof"] = Napi::Function::New(env, VkSubmitInfo2_sType_offsetof);
    exports["VkSubmitInfo2_pNext_offsetof"] = Napi::Function::New(env, VkSubmitInfo2_pNext_offsetof);
    exports["VkSubmitInfo2_flags_offsetof"] = Napi::Function::New(env, VkSubmitInfo2_flags_offsetof);
    exports["VkSubmitInfo2_waitSemaphoreInfoCount_offsetof"] = Napi::Function::New(env, VkSubmitInfo2_waitSemaphoreInfoCount_offsetof);
    exports["VkSubmitInfo2_pWaitSemaphoreInfos_offsetof"] = Napi::Function::New(env, VkSubmitInfo2_pWaitSemaphoreInfos_offsetof);
    exports["VkSubmitInfo2_commandBufferInfoCount_offsetof"] = Napi::Function::New(env, VkSubmitInfo2_commandBufferInfoCount_offsetof);
    exports["VkSubmitInfo2_pCommandBufferInfos_offsetof"] = Napi::Function::New(env, VkSubmitInfo2_pCommandBufferInfos_offsetof);
    exports["VkSubmitInfo2_signalSemaphoreInfoCount_offsetof"] = Napi::Function::New(env, VkSubmitInfo2_signalSemaphoreInfoCount_offsetof);
    exports["VkSubmitInfo2_pSignalSemaphoreInfos_offsetof"] = Napi::Function::New(env, VkSubmitInfo2_pSignalSemaphoreInfos_offsetof);

#ifdef VK_KHR_synchronization2
    exports["VkQueueFamilyCheckpointProperties2NV_sType_offsetof"] = Napi::Function::New(env, VkQueueFamilyCheckpointProperties2NV_sType_offsetof);
#endif
#ifdef VK_KHR_synchronization2
    exports["VkQueueFamilyCheckpointProperties2NV_pNext_offsetof"] = Napi::Function::New(env, VkQueueFamilyCheckpointProperties2NV_pNext_offsetof);
#endif
#ifdef VK_KHR_synchronization2
    exports["VkQueueFamilyCheckpointProperties2NV_checkpointExecutionStageMask_offsetof"] = Napi::Function::New(env, VkQueueFamilyCheckpointProperties2NV_checkpointExecutionStageMask_offsetof);
#endif
#ifdef VK_KHR_synchronization2
    exports["VkCheckpointData2NV_sType_offsetof"] = Napi::Function::New(env, VkCheckpointData2NV_sType_offsetof);
#endif
#ifdef VK_KHR_synchronization2
    exports["VkCheckpointData2NV_pNext_offsetof"] = Napi::Function::New(env, VkCheckpointData2NV_pNext_offsetof);
#endif
#ifdef VK_KHR_synchronization2
    exports["VkCheckpointData2NV_stage_offsetof"] = Napi::Function::New(env, VkCheckpointData2NV_stage_offsetof);
#endif
#ifdef VK_KHR_synchronization2
    exports["VkCheckpointData2NV_pCheckpointMarker_offsetof"] = Napi::Function::New(env, VkCheckpointData2NV_pCheckpointMarker_offsetof);
#endif
    exports["VkPhysicalDeviceSynchronization2Features_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSynchronization2Features_sType_offsetof);
    exports["VkPhysicalDeviceSynchronization2Features_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSynchronization2Features_pNext_offsetof);
    exports["VkPhysicalDeviceSynchronization2Features_synchronization2_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSynchronization2Features_synchronization2_offsetof);

#ifdef VK_EXT_primitives_generated_query
    exports["VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_primitives_generated_query
    exports["VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_primitives_generated_query
    exports["VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_primitivesGeneratedQuery_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_primitivesGeneratedQuery_offsetof);
#endif
#ifdef VK_EXT_primitives_generated_query
    exports["VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_primitivesGeneratedQueryWithRasterizerDiscard_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_primitivesGeneratedQueryWithRasterizerDiscard_offsetof);
#endif
#ifdef VK_EXT_primitives_generated_query
    exports["VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_primitivesGeneratedQueryWithNonZeroStreams_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_primitivesGeneratedQueryWithNonZeroStreams_offsetof);
#endif
#ifdef VK_EXT_legacy_dithering
    exports["VkPhysicalDeviceLegacyDitheringFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLegacyDitheringFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_legacy_dithering
    exports["VkPhysicalDeviceLegacyDitheringFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLegacyDitheringFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_legacy_dithering
    exports["VkPhysicalDeviceLegacyDitheringFeaturesEXT_legacyDithering_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLegacyDitheringFeaturesEXT_legacyDithering_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_multisampledRenderToSingleSampled_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_multisampledRenderToSingleSampled_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkSubpassResolvePerformanceQueryEXT_sType_offsetof"] = Napi::Function::New(env, VkSubpassResolvePerformanceQueryEXT_sType_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkSubpassResolvePerformanceQueryEXT_pNext_offsetof"] = Napi::Function::New(env, VkSubpassResolvePerformanceQueryEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkSubpassResolvePerformanceQueryEXT_optimal_offsetof"] = Napi::Function::New(env, VkSubpassResolvePerformanceQueryEXT_optimal_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkMultisampledRenderToSingleSampledInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkMultisampledRenderToSingleSampledInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkMultisampledRenderToSingleSampledInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkMultisampledRenderToSingleSampledInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkMultisampledRenderToSingleSampledInfoEXT_multisampledRenderToSingleSampledEnable_offsetof"] = Napi::Function::New(env, VkMultisampledRenderToSingleSampledInfoEXT_multisampledRenderToSingleSampledEnable_offsetof);
#endif
#ifdef VK_EXT_multisampled_render_to_single_sampled
    exports["VkMultisampledRenderToSingleSampledInfoEXT_rasterizationSamples_offsetof"] = Napi::Function::New(env, VkMultisampledRenderToSingleSampledInfoEXT_rasterizationSamples_offsetof);
#endif
#ifdef VK_EXT_pipeline_protected_access
    exports["VkPhysicalDevicePipelineProtectedAccessFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_pipeline_protected_access
    exports["VkPhysicalDevicePipelineProtectedAccessFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_pipeline_protected_access
    exports["VkPhysicalDevicePipelineProtectedAccessFeaturesEXT_pipelineProtectedAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT_pipelineProtectedAccess_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkQueueFamilyVideoPropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkQueueFamilyVideoPropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkQueueFamilyVideoPropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkQueueFamilyVideoPropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkQueueFamilyVideoPropertiesKHR_videoCodecOperations_offsetof"] = Napi::Function::New(env, VkQueueFamilyVideoPropertiesKHR_videoCodecOperations_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkQueueFamilyQueryResultStatusPropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkQueueFamilyQueryResultStatusPropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkQueueFamilyQueryResultStatusPropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkQueueFamilyQueryResultStatusPropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkQueueFamilyQueryResultStatusPropertiesKHR_queryResultStatusSupport_offsetof"] = Napi::Function::New(env, VkQueueFamilyQueryResultStatusPropertiesKHR_queryResultStatusSupport_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileListInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoProfileListInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileListInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoProfileListInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileListInfoKHR_profileCount_offsetof"] = Napi::Function::New(env, VkVideoProfileListInfoKHR_profileCount_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileListInfoKHR_pProfiles_offsetof"] = Napi::Function::New(env, VkVideoProfileListInfoKHR_pProfiles_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkPhysicalDeviceVideoFormatInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVideoFormatInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkPhysicalDeviceVideoFormatInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVideoFormatInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkPhysicalDeviceVideoFormatInfoKHR_imageUsage_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceVideoFormatInfoKHR_imageUsage_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoFormatPropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoFormatPropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoFormatPropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoFormatPropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoFormatPropertiesKHR_format_offsetof"] = Napi::Function::New(env, VkVideoFormatPropertiesKHR_format_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoFormatPropertiesKHR_componentMapping_offsetof"] = Napi::Function::New(env, VkVideoFormatPropertiesKHR_componentMapping_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoFormatPropertiesKHR_imageCreateFlags_offsetof"] = Napi::Function::New(env, VkVideoFormatPropertiesKHR_imageCreateFlags_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoFormatPropertiesKHR_imageType_offsetof"] = Napi::Function::New(env, VkVideoFormatPropertiesKHR_imageType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoFormatPropertiesKHR_imageTiling_offsetof"] = Napi::Function::New(env, VkVideoFormatPropertiesKHR_imageTiling_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoFormatPropertiesKHR_imageUsageFlags_offsetof"] = Napi::Function::New(env, VkVideoFormatPropertiesKHR_imageUsageFlags_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoProfileInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoProfileInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileInfoKHR_videoCodecOperation_offsetof"] = Napi::Function::New(env, VkVideoProfileInfoKHR_videoCodecOperation_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileInfoKHR_chromaSubsampling_offsetof"] = Napi::Function::New(env, VkVideoProfileInfoKHR_chromaSubsampling_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileInfoKHR_lumaBitDepth_offsetof"] = Napi::Function::New(env, VkVideoProfileInfoKHR_lumaBitDepth_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoProfileInfoKHR_chromaBitDepth_offsetof"] = Napi::Function::New(env, VkVideoProfileInfoKHR_chromaBitDepth_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_minBitstreamBufferOffsetAlignment_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_minBitstreamBufferOffsetAlignment_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_minBitstreamBufferSizeAlignment_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_minBitstreamBufferSizeAlignment_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_pictureAccessGranularity_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_pictureAccessGranularity_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_minCodedExtent_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_minCodedExtent_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_maxCodedExtent_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_maxCodedExtent_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_maxDpbSlots_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_maxDpbSlots_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_maxActiveReferencePictures_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_maxActiveReferencePictures_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCapabilitiesKHR_stdHeaderVersion_offsetof"] = Napi::Function::New(env, VkVideoCapabilitiesKHR_stdHeaderVersion_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionMemoryRequirementsKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoSessionMemoryRequirementsKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionMemoryRequirementsKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoSessionMemoryRequirementsKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionMemoryRequirementsKHR_memoryBindIndex_offsetof"] = Napi::Function::New(env, VkVideoSessionMemoryRequirementsKHR_memoryBindIndex_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionMemoryRequirementsKHR_memoryRequirements_offsetof"] = Napi::Function::New(env, VkVideoSessionMemoryRequirementsKHR_memoryRequirements_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkBindVideoSessionMemoryInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkBindVideoSessionMemoryInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkBindVideoSessionMemoryInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkBindVideoSessionMemoryInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkBindVideoSessionMemoryInfoKHR_memoryBindIndex_offsetof"] = Napi::Function::New(env, VkBindVideoSessionMemoryInfoKHR_memoryBindIndex_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkBindVideoSessionMemoryInfoKHR_memory_offsetof"] = Napi::Function::New(env, VkBindVideoSessionMemoryInfoKHR_memory_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkBindVideoSessionMemoryInfoKHR_memoryOffset_offsetof"] = Napi::Function::New(env, VkBindVideoSessionMemoryInfoKHR_memoryOffset_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkBindVideoSessionMemoryInfoKHR_memorySize_offsetof"] = Napi::Function::New(env, VkBindVideoSessionMemoryInfoKHR_memorySize_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoPictureResourceInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoPictureResourceInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoPictureResourceInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoPictureResourceInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoPictureResourceInfoKHR_codedOffset_offsetof"] = Napi::Function::New(env, VkVideoPictureResourceInfoKHR_codedOffset_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoPictureResourceInfoKHR_codedExtent_offsetof"] = Napi::Function::New(env, VkVideoPictureResourceInfoKHR_codedExtent_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoPictureResourceInfoKHR_baseArrayLayer_offsetof"] = Napi::Function::New(env, VkVideoPictureResourceInfoKHR_baseArrayLayer_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoPictureResourceInfoKHR_imageViewBinding_offsetof"] = Napi::Function::New(env, VkVideoPictureResourceInfoKHR_imageViewBinding_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoReferenceSlotInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoReferenceSlotInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoReferenceSlotInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoReferenceSlotInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoReferenceSlotInfoKHR_slotIndex_offsetof"] = Napi::Function::New(env, VkVideoReferenceSlotInfoKHR_slotIndex_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoReferenceSlotInfoKHR_pPictureResource_offsetof"] = Napi::Function::New(env, VkVideoReferenceSlotInfoKHR_pPictureResource_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeCapabilitiesKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeCapabilitiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeCapabilitiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeCapabilitiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeCapabilitiesKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoDecodeCapabilitiesKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeUsageInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeUsageInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeUsageInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeUsageInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeUsageInfoKHR_videoUsageHints_offsetof"] = Napi::Function::New(env, VkVideoDecodeUsageInfoKHR_videoUsageHints_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_srcBuffer_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_srcBuffer_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_srcBufferOffset_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_srcBufferOffset_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_srcBufferRange_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_srcBufferRange_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_dstPictureResource_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_dstPictureResource_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_pSetupReferenceSlot_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_pSetupReferenceSlot_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_referenceSlotCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_referenceSlotCount_offsetof);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["VkVideoDecodeInfoKHR_pReferenceSlots_offsetof"] = Napi::Function::New(env, VkVideoDecodeInfoKHR_pReferenceSlots_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264ProfileInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264ProfileInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264ProfileInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264ProfileInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264ProfileInfoEXT_stdProfileIdc_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264ProfileInfoEXT_stdProfileIdc_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264ProfileInfoEXT_pictureLayout_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264ProfileInfoEXT_pictureLayout_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264CapabilitiesEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264CapabilitiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264CapabilitiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264CapabilitiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264CapabilitiesEXT_maxLevelIdc_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264CapabilitiesEXT_maxLevelIdc_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264CapabilitiesEXT_fieldOffsetGranularity_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264CapabilitiesEXT_fieldOffsetGranularity_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersAddInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersAddInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersAddInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersAddInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersAddInfoEXT_stdSPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersAddInfoEXT_stdSPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersAddInfoEXT_pStdSPSs_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersAddInfoEXT_pStdSPSs_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersAddInfoEXT_stdPPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersAddInfoEXT_stdPPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersAddInfoEXT_pStdPPSs_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersAddInfoEXT_pStdPPSs_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264PictureInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264PictureInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264PictureInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264PictureInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264PictureInfoEXT_pStdPictureInfo_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264PictureInfoEXT_pStdPictureInfo_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264PictureInfoEXT_sliceCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264PictureInfoEXT_sliceCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264PictureInfoEXT_pSliceOffsets_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264PictureInfoEXT_pSliceOffsets_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264DpbSlotInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264DpbSlotInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264DpbSlotInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264DpbSlotInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h264
    exports["VkVideoDecodeH264DpbSlotInfoEXT_pStdReferenceInfo_offsetof"] = Napi::Function::New(env, VkVideoDecodeH264DpbSlotInfoEXT_pStdReferenceInfo_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265ProfileInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265ProfileInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265ProfileInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265ProfileInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265ProfileInfoEXT_stdProfileIdc_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265ProfileInfoEXT_stdProfileIdc_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265CapabilitiesEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265CapabilitiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265CapabilitiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265CapabilitiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265CapabilitiesEXT_maxLevelIdc_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265CapabilitiesEXT_maxLevelIdc_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersAddInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersAddInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersAddInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersAddInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersAddInfoEXT_stdVPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersAddInfoEXT_stdVPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersAddInfoEXT_pStdVPSs_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersAddInfoEXT_pStdVPSs_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersAddInfoEXT_stdSPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersAddInfoEXT_stdSPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersAddInfoEXT_pStdSPSs_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersAddInfoEXT_pStdSPSs_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersAddInfoEXT_stdPPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersAddInfoEXT_stdPPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersAddInfoEXT_pStdPPSs_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersAddInfoEXT_pStdPPSs_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersCreateInfoEXT_maxStdVPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersCreateInfoEXT_maxStdVPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265PictureInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265PictureInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265PictureInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265PictureInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265PictureInfoEXT_pStdPictureInfo_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265PictureInfoEXT_pStdPictureInfo_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265PictureInfoEXT_sliceCount_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265PictureInfoEXT_sliceCount_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265PictureInfoEXT_pSliceOffsets_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265PictureInfoEXT_pSliceOffsets_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265DpbSlotInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265DpbSlotInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265DpbSlotInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265DpbSlotInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_decode_h265
    exports["VkVideoDecodeH265DpbSlotInfoEXT_pStdReferenceInfo_offsetof"] = Napi::Function::New(env, VkVideoDecodeH265DpbSlotInfoEXT_pStdReferenceInfo_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_queueFamilyIndex_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_queueFamilyIndex_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_pVideoProfile_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_pVideoProfile_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_pictureFormat_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_pictureFormat_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_maxCodedExtent_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_maxCodedExtent_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_referencePictureFormat_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_referencePictureFormat_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_maxDpbSlots_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_maxDpbSlots_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_maxActiveReferencePictures_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_maxActiveReferencePictures_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionCreateInfoKHR_pStdHeaderVersion_offsetof"] = Napi::Function::New(env, VkVideoSessionCreateInfoKHR_pStdHeaderVersion_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionParametersCreateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoSessionParametersCreateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionParametersCreateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoSessionParametersCreateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionParametersCreateInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoSessionParametersCreateInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionParametersCreateInfoKHR_videoSessionParametersTemplate_offsetof"] = Napi::Function::New(env, VkVideoSessionParametersCreateInfoKHR_videoSessionParametersTemplate_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionParametersCreateInfoKHR_videoSession_offsetof"] = Napi::Function::New(env, VkVideoSessionParametersCreateInfoKHR_videoSession_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionParametersUpdateInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoSessionParametersUpdateInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionParametersUpdateInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoSessionParametersUpdateInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoSessionParametersUpdateInfoKHR_updateSequenceCount_offsetof"] = Napi::Function::New(env, VkVideoSessionParametersUpdateInfoKHR_updateSequenceCount_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoBeginCodingInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoBeginCodingInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoBeginCodingInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoBeginCodingInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoBeginCodingInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoBeginCodingInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoBeginCodingInfoKHR_videoSession_offsetof"] = Napi::Function::New(env, VkVideoBeginCodingInfoKHR_videoSession_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoBeginCodingInfoKHR_videoSessionParameters_offsetof"] = Napi::Function::New(env, VkVideoBeginCodingInfoKHR_videoSessionParameters_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoBeginCodingInfoKHR_referenceSlotCount_offsetof"] = Napi::Function::New(env, VkVideoBeginCodingInfoKHR_referenceSlotCount_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoBeginCodingInfoKHR_pReferenceSlots_offsetof"] = Napi::Function::New(env, VkVideoBeginCodingInfoKHR_pReferenceSlots_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoEndCodingInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoEndCodingInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoEndCodingInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoEndCodingInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoEndCodingInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoEndCodingInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCodingControlInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoCodingControlInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCodingControlInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoCodingControlInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_queue
    exports["VkVideoCodingControlInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoCodingControlInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeUsageInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeUsageInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeUsageInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeUsageInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeUsageInfoKHR_videoUsageHints_offsetof"] = Napi::Function::New(env, VkVideoEncodeUsageInfoKHR_videoUsageHints_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeUsageInfoKHR_videoContentHints_offsetof"] = Napi::Function::New(env, VkVideoEncodeUsageInfoKHR_videoContentHints_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeUsageInfoKHR_tuningMode_offsetof"] = Napi::Function::New(env, VkVideoEncodeUsageInfoKHR_tuningMode_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_qualityLevel_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_qualityLevel_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_dstBitstreamBuffer_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_dstBitstreamBuffer_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_dstBitstreamBufferOffset_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_dstBitstreamBufferOffset_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_dstBitstreamBufferMaxRange_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_dstBitstreamBufferMaxRange_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_srcPictureResource_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_srcPictureResource_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_pSetupReferenceSlot_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_pSetupReferenceSlot_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_referenceSlotCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_referenceSlotCount_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_pReferenceSlots_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_pReferenceSlots_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeInfoKHR_precedingExternallyEncodedBytes_offsetof"] = Napi::Function::New(env, VkVideoEncodeInfoKHR_precedingExternallyEncodedBytes_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlInfoKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlInfoKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlInfoKHR_rateControlMode_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlInfoKHR_rateControlMode_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlInfoKHR_layerCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlInfoKHR_layerCount_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlInfoKHR_pLayerConfigs_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlInfoKHR_pLayerConfigs_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlLayerInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlLayerInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlLayerInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlLayerInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlLayerInfoKHR_averageBitrate_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlLayerInfoKHR_averageBitrate_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlLayerInfoKHR_maxBitrate_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlLayerInfoKHR_maxBitrate_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlLayerInfoKHR_frameRateNumerator_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlLayerInfoKHR_frameRateNumerator_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlLayerInfoKHR_frameRateDenominator_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlLayerInfoKHR_frameRateDenominator_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlLayerInfoKHR_virtualBufferSizeInMs_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlLayerInfoKHR_virtualBufferSizeInMs_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeRateControlLayerInfoKHR_initialVirtualBufferSizeInMs_offsetof"] = Napi::Function::New(env, VkVideoEncodeRateControlLayerInfoKHR_initialVirtualBufferSizeInMs_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeCapabilitiesKHR_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeCapabilitiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeCapabilitiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeCapabilitiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeCapabilitiesKHR_flags_offsetof"] = Napi::Function::New(env, VkVideoEncodeCapabilitiesKHR_flags_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeCapabilitiesKHR_rateControlModes_offsetof"] = Napi::Function::New(env, VkVideoEncodeCapabilitiesKHR_rateControlModes_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeCapabilitiesKHR_rateControlLayerCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeCapabilitiesKHR_rateControlLayerCount_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeCapabilitiesKHR_qualityLevelCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeCapabilitiesKHR_qualityLevelCount_offsetof);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["VkVideoEncodeCapabilitiesKHR_inputImageDataFillAlignment_offsetof"] = Napi::Function::New(env, VkVideoEncodeCapabilitiesKHR_inputImageDataFillAlignment_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_flags_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_flags_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_inputModeFlags_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_inputModeFlags_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_outputModeFlags_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_outputModeFlags_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_maxPPictureL0ReferenceCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_maxPPictureL0ReferenceCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_maxBPictureL0ReferenceCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_maxBPictureL0ReferenceCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_maxL1ReferenceCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_maxL1ReferenceCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_motionVectorsOverPicBoundariesFlag_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_motionVectorsOverPicBoundariesFlag_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_maxBytesPerPicDenom_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_maxBytesPerPicDenom_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_maxBitsPerMbDenom_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_maxBitsPerMbDenom_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_log2MaxMvLengthHorizontal_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_log2MaxMvLengthHorizontal_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264CapabilitiesEXT_log2MaxMvLengthVertical_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264CapabilitiesEXT_log2MaxMvLengthVertical_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersAddInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersAddInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersAddInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersAddInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersAddInfoEXT_stdSPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersAddInfoEXT_stdSPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersAddInfoEXT_pStdSPSs_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersAddInfoEXT_pStdSPSs_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersAddInfoEXT_stdPPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersAddInfoEXT_stdPPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersAddInfoEXT_pStdPPSs_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersAddInfoEXT_pStdPPSs_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264DpbSlotInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264DpbSlotInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264DpbSlotInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264DpbSlotInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264DpbSlotInfoEXT_slotIndex_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264DpbSlotInfoEXT_slotIndex_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264DpbSlotInfoEXT_pStdReferenceInfo_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264DpbSlotInfoEXT_pStdReferenceInfo_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264VclFrameInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264VclFrameInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264VclFrameInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264VclFrameInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264VclFrameInfoEXT_pReferenceFinalLists_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264VclFrameInfoEXT_pReferenceFinalLists_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264VclFrameInfoEXT_naluSliceEntryCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264VclFrameInfoEXT_naluSliceEntryCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264VclFrameInfoEXT_pNaluSliceEntries_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264VclFrameInfoEXT_pNaluSliceEntries_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264VclFrameInfoEXT_pCurrentPictureInfo_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264VclFrameInfoEXT_pCurrentPictureInfo_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ReferenceListsInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ReferenceListsInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ReferenceListsInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ReferenceListsInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ReferenceListsInfoEXT_referenceList0EntryCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ReferenceListsInfoEXT_referenceList0EntryCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ReferenceListsInfoEXT_pReferenceList0Entries_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ReferenceListsInfoEXT_pReferenceList0Entries_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ReferenceListsInfoEXT_referenceList1EntryCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ReferenceListsInfoEXT_referenceList1EntryCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ReferenceListsInfoEXT_pReferenceList1Entries_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ReferenceListsInfoEXT_pReferenceList1Entries_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ReferenceListsInfoEXT_pMemMgmtCtrlOperations_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ReferenceListsInfoEXT_pMemMgmtCtrlOperations_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264EmitPictureParametersInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264EmitPictureParametersInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264EmitPictureParametersInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264EmitPictureParametersInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264EmitPictureParametersInfoEXT_spsId_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264EmitPictureParametersInfoEXT_spsId_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264EmitPictureParametersInfoEXT_emitSpsEnable_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264EmitPictureParametersInfoEXT_emitSpsEnable_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264EmitPictureParametersInfoEXT_ppsIdEntryCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264EmitPictureParametersInfoEXT_ppsIdEntryCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264EmitPictureParametersInfoEXT_ppsIdEntries_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264EmitPictureParametersInfoEXT_ppsIdEntries_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ProfileInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ProfileInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ProfileInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ProfileInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264ProfileInfoEXT_stdProfileIdc_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264ProfileInfoEXT_stdProfileIdc_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264NaluSliceInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264NaluSliceInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264NaluSliceInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264NaluSliceInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264NaluSliceInfoEXT_mbCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264NaluSliceInfoEXT_mbCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264NaluSliceInfoEXT_pReferenceFinalLists_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264NaluSliceInfoEXT_pReferenceFinalLists_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264NaluSliceInfoEXT_pSliceHeaderStd_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264NaluSliceInfoEXT_pSliceHeaderStd_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlInfoEXT_gopFrameCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlInfoEXT_gopFrameCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlInfoEXT_idrPeriod_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlInfoEXT_idrPeriod_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlInfoEXT_consecutiveBFrameCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlInfoEXT_consecutiveBFrameCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlInfoEXT_rateControlStructure_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlInfoEXT_rateControlStructure_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlInfoEXT_temporalLayerCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlInfoEXT_temporalLayerCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264QpEXT_qpI_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264QpEXT_qpI_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264QpEXT_qpP_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264QpEXT_qpP_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264QpEXT_qpB_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264QpEXT_qpB_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264FrameSizeEXT_frameISize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264FrameSizeEXT_frameISize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264FrameSizeEXT_framePSize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264FrameSizeEXT_framePSize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264FrameSizeEXT_frameBSize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264FrameSizeEXT_frameBSize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_temporalLayerId_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_temporalLayerId_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_useInitialRcQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_useInitialRcQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_initialRcQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_initialRcQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_useMinQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_useMinQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_minQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_minQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_useMaxQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_useMaxQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_maxQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_maxQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_useMaxFrameSize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_useMaxFrameSize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h264
    exports["VkVideoEncodeH264RateControlLayerInfoEXT_maxFrameSize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH264RateControlLayerInfoEXT_maxFrameSize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_flags_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_flags_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_inputModeFlags_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_inputModeFlags_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_outputModeFlags_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_outputModeFlags_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_ctbSizes_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_ctbSizes_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_transformBlockSizes_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_transformBlockSizes_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxPPictureL0ReferenceCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxPPictureL0ReferenceCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxBPictureL0ReferenceCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxBPictureL0ReferenceCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxL1ReferenceCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxL1ReferenceCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxSubLayersCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxSubLayersCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_minLog2MinLumaCodingBlockSizeMinus3_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_minLog2MinLumaCodingBlockSizeMinus3_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxLog2MinLumaCodingBlockSizeMinus3_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxLog2MinLumaCodingBlockSizeMinus3_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_minLog2MinLumaTransformBlockSizeMinus2_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_minLog2MinLumaTransformBlockSizeMinus2_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxLog2MinLumaTransformBlockSizeMinus2_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxLog2MinLumaTransformBlockSizeMinus2_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_minMaxTransformHierarchyDepthInter_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_minMaxTransformHierarchyDepthInter_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxMaxTransformHierarchyDepthInter_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxMaxTransformHierarchyDepthInter_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_minMaxTransformHierarchyDepthIntra_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_minMaxTransformHierarchyDepthIntra_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxMaxTransformHierarchyDepthIntra_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxMaxTransformHierarchyDepthIntra_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxDiffCuQpDeltaDepth_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxDiffCuQpDeltaDepth_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_minMaxNumMergeCand_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_minMaxNumMergeCand_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265CapabilitiesEXT_maxMaxNumMergeCand_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265CapabilitiesEXT_maxMaxNumMergeCand_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersAddInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersAddInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersAddInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersAddInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersAddInfoEXT_stdVPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersAddInfoEXT_stdVPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersAddInfoEXT_pStdVPSs_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersAddInfoEXT_pStdVPSs_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersAddInfoEXT_stdSPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersAddInfoEXT_stdSPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersAddInfoEXT_pStdSPSs_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersAddInfoEXT_pStdSPSs_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersAddInfoEXT_stdPPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersAddInfoEXT_stdPPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersAddInfoEXT_pStdPPSs_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersAddInfoEXT_pStdPPSs_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersCreateInfoEXT_maxStdVPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersCreateInfoEXT_maxStdVPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersCreateInfoEXT_maxStdSPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersCreateInfoEXT_maxStdPPSCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265SessionParametersCreateInfoEXT_pParametersAddInfo_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265VclFrameInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265VclFrameInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265VclFrameInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265VclFrameInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265VclFrameInfoEXT_pReferenceFinalLists_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265VclFrameInfoEXT_pReferenceFinalLists_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265VclFrameInfoEXT_naluSliceSegmentEntryCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265VclFrameInfoEXT_naluSliceSegmentEntryCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265VclFrameInfoEXT_pNaluSliceSegmentEntries_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265VclFrameInfoEXT_pNaluSliceSegmentEntries_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265VclFrameInfoEXT_pCurrentPictureInfo_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265VclFrameInfoEXT_pCurrentPictureInfo_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265EmitPictureParametersInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265EmitPictureParametersInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265EmitPictureParametersInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265EmitPictureParametersInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265EmitPictureParametersInfoEXT_vpsId_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265EmitPictureParametersInfoEXT_vpsId_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265EmitPictureParametersInfoEXT_spsId_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265EmitPictureParametersInfoEXT_spsId_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265EmitPictureParametersInfoEXT_emitVpsEnable_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265EmitPictureParametersInfoEXT_emitVpsEnable_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265EmitPictureParametersInfoEXT_emitSpsEnable_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265EmitPictureParametersInfoEXT_emitSpsEnable_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265EmitPictureParametersInfoEXT_ppsIdEntryCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265EmitPictureParametersInfoEXT_ppsIdEntryCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265EmitPictureParametersInfoEXT_ppsIdEntries_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265EmitPictureParametersInfoEXT_ppsIdEntries_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265NaluSliceSegmentInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265NaluSliceSegmentInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265NaluSliceSegmentInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265NaluSliceSegmentInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265NaluSliceSegmentInfoEXT_ctbCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265NaluSliceSegmentInfoEXT_ctbCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265NaluSliceSegmentInfoEXT_pReferenceFinalLists_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265NaluSliceSegmentInfoEXT_pReferenceFinalLists_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265NaluSliceSegmentInfoEXT_pSliceSegmentHeaderStd_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265NaluSliceSegmentInfoEXT_pSliceSegmentHeaderStd_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlInfoEXT_gopFrameCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlInfoEXT_gopFrameCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlInfoEXT_idrPeriod_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlInfoEXT_idrPeriod_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlInfoEXT_consecutiveBFrameCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlInfoEXT_consecutiveBFrameCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlInfoEXT_rateControlStructure_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlInfoEXT_rateControlStructure_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlInfoEXT_subLayerCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlInfoEXT_subLayerCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265QpEXT_qpI_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265QpEXT_qpI_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265QpEXT_qpP_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265QpEXT_qpP_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265QpEXT_qpB_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265QpEXT_qpB_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265FrameSizeEXT_frameISize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265FrameSizeEXT_frameISize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265FrameSizeEXT_framePSize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265FrameSizeEXT_framePSize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265FrameSizeEXT_frameBSize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265FrameSizeEXT_frameBSize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_temporalId_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_temporalId_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_useInitialRcQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_useInitialRcQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_initialRcQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_initialRcQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_useMinQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_useMinQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_minQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_minQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_useMaxQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_useMaxQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_maxQp_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_maxQp_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_useMaxFrameSize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_useMaxFrameSize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265RateControlLayerInfoEXT_maxFrameSize_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265RateControlLayerInfoEXT_maxFrameSize_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ProfileInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ProfileInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ProfileInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ProfileInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ProfileInfoEXT_stdProfileIdc_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ProfileInfoEXT_stdProfileIdc_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265DpbSlotInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265DpbSlotInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265DpbSlotInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265DpbSlotInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265DpbSlotInfoEXT_slotIndex_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265DpbSlotInfoEXT_slotIndex_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265DpbSlotInfoEXT_pStdReferenceInfo_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265DpbSlotInfoEXT_pStdReferenceInfo_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ReferenceListsInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ReferenceListsInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ReferenceListsInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ReferenceListsInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ReferenceListsInfoEXT_referenceList0EntryCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ReferenceListsInfoEXT_referenceList0EntryCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ReferenceListsInfoEXT_pReferenceList0Entries_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ReferenceListsInfoEXT_pReferenceList0Entries_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ReferenceListsInfoEXT_referenceList1EntryCount_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ReferenceListsInfoEXT_referenceList1EntryCount_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ReferenceListsInfoEXT_pReferenceList1Entries_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ReferenceListsInfoEXT_pReferenceList1Entries_offsetof);
#endif
#ifdef VK_EXT_video_encode_h265
    exports["VkVideoEncodeH265ReferenceListsInfoEXT_pReferenceModifications_offsetof"] = Napi::Function::New(env, VkVideoEncodeH265ReferenceListsInfoEXT_pReferenceModifications_offsetof);
#endif
#ifdef VK_NV_inherited_viewport_scissor
    exports["VkPhysicalDeviceInheritedViewportScissorFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInheritedViewportScissorFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_inherited_viewport_scissor
    exports["VkPhysicalDeviceInheritedViewportScissorFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInheritedViewportScissorFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_inherited_viewport_scissor
    exports["VkPhysicalDeviceInheritedViewportScissorFeaturesNV_inheritedViewportScissor2D_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceInheritedViewportScissorFeaturesNV_inheritedViewportScissor2D_offsetof);
#endif
#ifdef VK_NV_inherited_viewport_scissor
    exports["VkCommandBufferInheritanceViewportScissorInfoNV_sType_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceViewportScissorInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_inherited_viewport_scissor
    exports["VkCommandBufferInheritanceViewportScissorInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceViewportScissorInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_inherited_viewport_scissor
    exports["VkCommandBufferInheritanceViewportScissorInfoNV_viewportScissor2D_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceViewportScissorInfoNV_viewportScissor2D_offsetof);
#endif
#ifdef VK_NV_inherited_viewport_scissor
    exports["VkCommandBufferInheritanceViewportScissorInfoNV_viewportDepthCount_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceViewportScissorInfoNV_viewportDepthCount_offsetof);
#endif
#ifdef VK_NV_inherited_viewport_scissor
    exports["VkCommandBufferInheritanceViewportScissorInfoNV_pViewportDepths_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceViewportScissorInfoNV_pViewportDepths_offsetof);
#endif
#ifdef VK_EXT_ycbcr_2plane_444_formats
    exports["VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_ycbcr_2plane_444_formats
    exports["VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_ycbcr_2plane_444_formats
    exports["VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_ycbcr2plane444Formats_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_ycbcr2plane444Formats_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPhysicalDeviceProvokingVertexFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProvokingVertexFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPhysicalDeviceProvokingVertexFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProvokingVertexFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPhysicalDeviceProvokingVertexFeaturesEXT_provokingVertexLast_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProvokingVertexFeaturesEXT_provokingVertexLast_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPhysicalDeviceProvokingVertexFeaturesEXT_transformFeedbackPreservesProvokingVertex_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProvokingVertexFeaturesEXT_transformFeedbackPreservesProvokingVertex_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPhysicalDeviceProvokingVertexPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProvokingVertexPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPhysicalDeviceProvokingVertexPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProvokingVertexPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPhysicalDeviceProvokingVertexPropertiesEXT_provokingVertexModePerPipeline_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProvokingVertexPropertiesEXT_provokingVertexModePerPipeline_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPhysicalDeviceProvokingVertexPropertiesEXT_transformFeedbackPreservesTriangleFanProvokingVertex_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceProvokingVertexPropertiesEXT_transformFeedbackPreservesTriangleFanProvokingVertex_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_provoking_vertex
    exports["VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_provokingVertexMode_offsetof"] = Napi::Function::New(env, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_provokingVertexMode_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuModuleCreateInfoNVX_sType_offsetof"] = Napi::Function::New(env, VkCuModuleCreateInfoNVX_sType_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuModuleCreateInfoNVX_pNext_offsetof"] = Napi::Function::New(env, VkCuModuleCreateInfoNVX_pNext_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuModuleCreateInfoNVX_dataSize_offsetof"] = Napi::Function::New(env, VkCuModuleCreateInfoNVX_dataSize_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuModuleCreateInfoNVX_pData_offsetof"] = Napi::Function::New(env, VkCuModuleCreateInfoNVX_pData_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuFunctionCreateInfoNVX_sType_offsetof"] = Napi::Function::New(env, VkCuFunctionCreateInfoNVX_sType_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuFunctionCreateInfoNVX_pNext_offsetof"] = Napi::Function::New(env, VkCuFunctionCreateInfoNVX_pNext_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuFunctionCreateInfoNVX_module_offsetof"] = Napi::Function::New(env, VkCuFunctionCreateInfoNVX_module_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuFunctionCreateInfoNVX_pName_offsetof"] = Napi::Function::New(env, VkCuFunctionCreateInfoNVX_pName_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_sType_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_sType_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_pNext_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_pNext_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_function_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_function_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_gridDimX_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_gridDimX_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_gridDimY_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_gridDimY_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_gridDimZ_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_gridDimZ_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_blockDimX_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_blockDimX_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_blockDimY_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_blockDimY_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_blockDimZ_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_blockDimZ_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_sharedMemBytes_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_sharedMemBytes_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_paramCount_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_paramCount_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_pParams_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_pParams_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_extraCount_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_extraCount_offsetof);
#endif
#ifdef VK_NVX_binary_import
    exports["VkCuLaunchInfoNVX_pExtras_offsetof"] = Napi::Function::New(env, VkCuLaunchInfoNVX_pExtras_offsetof);
#endif
    exports["VkPhysicalDeviceShaderIntegerDotProductFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductFeatures_sType_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductFeatures_shaderIntegerDotProduct_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductFeatures_shaderIntegerDotProduct_offsetof);

    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_sType_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_pNext_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct8BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct8BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct8BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct8BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct8BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct8BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct4x8BitPackedUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct4x8BitPackedUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct4x8BitPackedSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct4x8BitPackedSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct4x8BitPackedMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct4x8BitPackedMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct16BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct16BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct16BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct16BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct16BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct16BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct32BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct32BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct32BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct32BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct32BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct32BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct64BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct64BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct64BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct64BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct64BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProduct64BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating8BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating8BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating8BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating8BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating16BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating16BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating16BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating16BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating32BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating32BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating32BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating32BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating64BitUnsignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating64BitUnsignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating64BitSignedAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating64BitSignedAccelerated_offsetof);
    exports["VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderIntegerDotProductProperties_integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated_offsetof);

#ifdef VK_EXT_physical_device_drm
    exports["VkPhysicalDeviceDrmPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDrmPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_physical_device_drm
    exports["VkPhysicalDeviceDrmPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDrmPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_physical_device_drm
    exports["VkPhysicalDeviceDrmPropertiesEXT_hasPrimary_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDrmPropertiesEXT_hasPrimary_offsetof);
#endif
#ifdef VK_EXT_physical_device_drm
    exports["VkPhysicalDeviceDrmPropertiesEXT_hasRender_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDrmPropertiesEXT_hasRender_offsetof);
#endif
#ifdef VK_EXT_physical_device_drm
    exports["VkPhysicalDeviceDrmPropertiesEXT_primaryMajor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDrmPropertiesEXT_primaryMajor_offsetof);
#endif
#ifdef VK_EXT_physical_device_drm
    exports["VkPhysicalDeviceDrmPropertiesEXT_primaryMinor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDrmPropertiesEXT_primaryMinor_offsetof);
#endif
#ifdef VK_EXT_physical_device_drm
    exports["VkPhysicalDeviceDrmPropertiesEXT_renderMajor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDrmPropertiesEXT_renderMajor_offsetof);
#endif
#ifdef VK_EXT_physical_device_drm
    exports["VkPhysicalDeviceDrmPropertiesEXT_renderMinor_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDrmPropertiesEXT_renderMinor_offsetof);
#endif
#ifdef VK_KHR_fragment_shader_barycentric
    exports["VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_fragment_shader_barycentric
    exports["VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_fragment_shader_barycentric
    exports["VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_fragmentShaderBarycentric_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_fragmentShaderBarycentric_offsetof);
#endif
#ifdef VK_KHR_fragment_shader_barycentric
    exports["VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_sType_offsetof);
#endif
#ifdef VK_KHR_fragment_shader_barycentric
    exports["VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_fragment_shader_barycentric
    exports["VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_triStripVertexOrderIndependentOfProvokingVertex_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_triStripVertexOrderIndependentOfProvokingVertex_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_rayTracingMotionBlur_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_rayTracingMotionBlur_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_rayTracingMotionBlurPipelineTraceRaysIndirect_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_rayTracingMotionBlurPipelineTraceRaysIndirect_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureGeometryMotionTrianglesDataNV_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryMotionTrianglesDataNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureGeometryMotionTrianglesDataNV_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryMotionTrianglesDataNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureGeometryMotionTrianglesDataNV_vertexData_offsetof"] = Napi::Function::New(env, VkAccelerationStructureGeometryMotionTrianglesDataNV_vertexData_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMotionInfoNV_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMotionInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMotionInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMotionInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMotionInfoNV_maxInstances_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMotionInfoNV_maxInstances_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMotionInfoNV_flags_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMotionInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_sx_offsetof"] = Napi::Function::New(env, VkSRTDataNV_sx_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_a_offsetof"] = Napi::Function::New(env, VkSRTDataNV_a_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_b_offsetof"] = Napi::Function::New(env, VkSRTDataNV_b_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_pvx_offsetof"] = Napi::Function::New(env, VkSRTDataNV_pvx_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_sy_offsetof"] = Napi::Function::New(env, VkSRTDataNV_sy_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_c_offsetof"] = Napi::Function::New(env, VkSRTDataNV_c_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_pvy_offsetof"] = Napi::Function::New(env, VkSRTDataNV_pvy_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_sz_offsetof"] = Napi::Function::New(env, VkSRTDataNV_sz_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_pvz_offsetof"] = Napi::Function::New(env, VkSRTDataNV_pvz_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_qx_offsetof"] = Napi::Function::New(env, VkSRTDataNV_qx_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_qy_offsetof"] = Napi::Function::New(env, VkSRTDataNV_qy_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_qz_offsetof"] = Napi::Function::New(env, VkSRTDataNV_qz_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_qw_offsetof"] = Napi::Function::New(env, VkSRTDataNV_qw_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_tx_offsetof"] = Napi::Function::New(env, VkSRTDataNV_tx_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_ty_offsetof"] = Napi::Function::New(env, VkSRTDataNV_ty_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkSRTDataNV_tz_offsetof"] = Napi::Function::New(env, VkSRTDataNV_tz_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureSRTMotionInstanceNV_transformT0_offsetof"] = Napi::Function::New(env, VkAccelerationStructureSRTMotionInstanceNV_transformT0_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureSRTMotionInstanceNV_transformT1_offsetof"] = Napi::Function::New(env, VkAccelerationStructureSRTMotionInstanceNV_transformT1_offsetof);
#endif




#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureSRTMotionInstanceNV_accelerationStructureReference_offsetof"] = Napi::Function::New(env, VkAccelerationStructureSRTMotionInstanceNV_accelerationStructureReference_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMatrixMotionInstanceNV_transformT0_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMatrixMotionInstanceNV_transformT0_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMatrixMotionInstanceNV_transformT1_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMatrixMotionInstanceNV_transformT1_offsetof);
#endif




#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMatrixMotionInstanceNV_accelerationStructureReference_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMatrixMotionInstanceNV_accelerationStructureReference_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMotionInstanceNV_type_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMotionInstanceNV_type_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMotionInstanceNV_flags_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMotionInstanceNV_flags_offsetof);
#endif
#ifdef VK_NV_ray_tracing_motion_blur
    exports["VkAccelerationStructureMotionInstanceNV_data_offsetof"] = Napi::Function::New(env, VkAccelerationStructureMotionInstanceNV_data_offsetof);
#endif
#ifdef VK_NV_external_memory_rdma
    exports["VkMemoryGetRemoteAddressInfoNV_sType_offsetof"] = Napi::Function::New(env, VkMemoryGetRemoteAddressInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_external_memory_rdma
    exports["VkMemoryGetRemoteAddressInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkMemoryGetRemoteAddressInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_external_memory_rdma
    exports["VkMemoryGetRemoteAddressInfoNV_memory_offsetof"] = Napi::Function::New(env, VkMemoryGetRemoteAddressInfoNV_memory_offsetof);
#endif
#ifdef VK_NV_external_memory_rdma
    exports["VkMemoryGetRemoteAddressInfoNV_handleType_offsetof"] = Napi::Function::New(env, VkMemoryGetRemoteAddressInfoNV_handleType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImportMemoryBufferCollectionFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkImportMemoryBufferCollectionFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImportMemoryBufferCollectionFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkImportMemoryBufferCollectionFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImportMemoryBufferCollectionFUCHSIA_collection_offsetof"] = Napi::Function::New(env, VkImportMemoryBufferCollectionFUCHSIA_collection_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImportMemoryBufferCollectionFUCHSIA_index_offsetof"] = Napi::Function::New(env, VkImportMemoryBufferCollectionFUCHSIA_index_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionImageCreateInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkBufferCollectionImageCreateInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionImageCreateInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkBufferCollectionImageCreateInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionImageCreateInfoFUCHSIA_collection_offsetof"] = Napi::Function::New(env, VkBufferCollectionImageCreateInfoFUCHSIA_collection_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionImageCreateInfoFUCHSIA_index_offsetof"] = Napi::Function::New(env, VkBufferCollectionImageCreateInfoFUCHSIA_index_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionBufferCreateInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkBufferCollectionBufferCreateInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionBufferCreateInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkBufferCollectionBufferCreateInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionBufferCreateInfoFUCHSIA_collection_offsetof"] = Napi::Function::New(env, VkBufferCollectionBufferCreateInfoFUCHSIA_collection_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionBufferCreateInfoFUCHSIA_index_offsetof"] = Napi::Function::New(env, VkBufferCollectionBufferCreateInfoFUCHSIA_index_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionCreateInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkBufferCollectionCreateInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionCreateInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkBufferCollectionCreateInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionCreateInfoFUCHSIA_collectionToken_offsetof"] = Napi::Function::New(env, VkBufferCollectionCreateInfoFUCHSIA_collectionToken_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_memoryTypeBits_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_memoryTypeBits_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_bufferCount_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_bufferCount_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_createInfoIndex_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_createInfoIndex_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_sysmemPixelFormat_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_sysmemPixelFormat_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_formatFeatures_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_formatFeatures_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_sysmemColorSpaceIndex_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_sysmemColorSpaceIndex_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_samplerYcbcrConversionComponents_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_samplerYcbcrConversionComponents_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_suggestedYcbcrModel_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_suggestedYcbcrModel_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_suggestedYcbcrRange_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_suggestedYcbcrRange_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_suggestedXChromaOffset_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_suggestedXChromaOffset_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionPropertiesFUCHSIA_suggestedYChromaOffset_offsetof"] = Napi::Function::New(env, VkBufferCollectionPropertiesFUCHSIA_suggestedYChromaOffset_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferConstraintsInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkBufferConstraintsInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferConstraintsInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkBufferConstraintsInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferConstraintsInfoFUCHSIA_createInfo_offsetof"] = Napi::Function::New(env, VkBufferConstraintsInfoFUCHSIA_createInfo_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferConstraintsInfoFUCHSIA_requiredFormatFeatures_offsetof"] = Napi::Function::New(env, VkBufferConstraintsInfoFUCHSIA_requiredFormatFeatures_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferConstraintsInfoFUCHSIA_bufferCollectionConstraints_offsetof"] = Napi::Function::New(env, VkBufferConstraintsInfoFUCHSIA_bufferCollectionConstraints_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkSysmemColorSpaceFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkSysmemColorSpaceFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkSysmemColorSpaceFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkSysmemColorSpaceFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkSysmemColorSpaceFUCHSIA_colorSpace_offsetof"] = Napi::Function::New(env, VkSysmemColorSpaceFUCHSIA_colorSpace_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageFormatConstraintsInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkImageFormatConstraintsInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageFormatConstraintsInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkImageFormatConstraintsInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageFormatConstraintsInfoFUCHSIA_imageCreateInfo_offsetof"] = Napi::Function::New(env, VkImageFormatConstraintsInfoFUCHSIA_imageCreateInfo_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageFormatConstraintsInfoFUCHSIA_requiredFormatFeatures_offsetof"] = Napi::Function::New(env, VkImageFormatConstraintsInfoFUCHSIA_requiredFormatFeatures_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageFormatConstraintsInfoFUCHSIA_flags_offsetof"] = Napi::Function::New(env, VkImageFormatConstraintsInfoFUCHSIA_flags_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageFormatConstraintsInfoFUCHSIA_sysmemPixelFormat_offsetof"] = Napi::Function::New(env, VkImageFormatConstraintsInfoFUCHSIA_sysmemPixelFormat_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageFormatConstraintsInfoFUCHSIA_colorSpaceCount_offsetof"] = Napi::Function::New(env, VkImageFormatConstraintsInfoFUCHSIA_colorSpaceCount_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageFormatConstraintsInfoFUCHSIA_pColorSpaces_offsetof"] = Napi::Function::New(env, VkImageFormatConstraintsInfoFUCHSIA_pColorSpaces_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageConstraintsInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkImageConstraintsInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageConstraintsInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkImageConstraintsInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageConstraintsInfoFUCHSIA_formatConstraintsCount_offsetof"] = Napi::Function::New(env, VkImageConstraintsInfoFUCHSIA_formatConstraintsCount_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageConstraintsInfoFUCHSIA_pFormatConstraints_offsetof"] = Napi::Function::New(env, VkImageConstraintsInfoFUCHSIA_pFormatConstraints_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageConstraintsInfoFUCHSIA_bufferCollectionConstraints_offsetof"] = Napi::Function::New(env, VkImageConstraintsInfoFUCHSIA_bufferCollectionConstraints_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkImageConstraintsInfoFUCHSIA_flags_offsetof"] = Napi::Function::New(env, VkImageConstraintsInfoFUCHSIA_flags_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionConstraintsInfoFUCHSIA_sType_offsetof"] = Napi::Function::New(env, VkBufferCollectionConstraintsInfoFUCHSIA_sType_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionConstraintsInfoFUCHSIA_pNext_offsetof"] = Napi::Function::New(env, VkBufferCollectionConstraintsInfoFUCHSIA_pNext_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCount_offsetof"] = Napi::Function::New(env, VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCount_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionConstraintsInfoFUCHSIA_maxBufferCount_offsetof"] = Napi::Function::New(env, VkBufferCollectionConstraintsInfoFUCHSIA_maxBufferCount_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCountForCamping_offsetof"] = Napi::Function::New(env, VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCountForCamping_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCountForDedicatedSlack_offsetof"] = Napi::Function::New(env, VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCountForDedicatedSlack_offsetof);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCountForSharedSlack_offsetof"] = Napi::Function::New(env, VkBufferCollectionConstraintsInfoFUCHSIA_minBufferCountForSharedSlack_offsetof);
#endif
#ifdef VK_EXT_rgba10x6_formats
    exports["VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_rgba10x6_formats
    exports["VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_rgba10x6_formats
    exports["VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_formatRgba10x6WithoutYCbCrSampler_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_formatRgba10x6WithoutYCbCrSampler_offsetof);
#endif
    exports["VkFormatProperties3_sType_offsetof"] = Napi::Function::New(env, VkFormatProperties3_sType_offsetof);
    exports["VkFormatProperties3_pNext_offsetof"] = Napi::Function::New(env, VkFormatProperties3_pNext_offsetof);
    exports["VkFormatProperties3_linearTilingFeatures_offsetof"] = Napi::Function::New(env, VkFormatProperties3_linearTilingFeatures_offsetof);
    exports["VkFormatProperties3_optimalTilingFeatures_offsetof"] = Napi::Function::New(env, VkFormatProperties3_optimalTilingFeatures_offsetof);
    exports["VkFormatProperties3_bufferFeatures_offsetof"] = Napi::Function::New(env, VkFormatProperties3_bufferFeatures_offsetof);

#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesList2EXT_sType_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesList2EXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesList2EXT_pNext_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesList2EXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesList2EXT_drmFormatModifierCount_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesList2EXT_drmFormatModifierCount_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierPropertiesList2EXT_pDrmFormatModifierProperties_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierPropertiesList2EXT_pDrmFormatModifierProperties_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierProperties2EXT_drmFormatModifier_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierProperties2EXT_drmFormatModifier_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierProperties2EXT_drmFormatModifierPlaneCount_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierProperties2EXT_drmFormatModifierPlaneCount_offsetof);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["VkDrmFormatModifierProperties2EXT_drmFormatModifierTilingFeatures_offsetof"] = Napi::Function::New(env, VkDrmFormatModifierProperties2EXT_drmFormatModifierTilingFeatures_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_sType_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_sType_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_pNext_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_pNext_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_format_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_format_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_externalFormat_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_externalFormat_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_formatFeatures_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_formatFeatures_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_samplerYcbcrConversionComponents_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_samplerYcbcrConversionComponents_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedYcbcrModel_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedYcbcrModel_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedYcbcrRange_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedYcbcrRange_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedXChromaOffset_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedXChromaOffset_offsetof);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedYChromaOffset_offsetof"] = Napi::Function::New(env, VkAndroidHardwareBufferFormatProperties2ANDROID_suggestedYChromaOffset_offsetof);
#endif
    exports["VkPipelineRenderingCreateInfo_sType_offsetof"] = Napi::Function::New(env, VkPipelineRenderingCreateInfo_sType_offsetof);
    exports["VkPipelineRenderingCreateInfo_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRenderingCreateInfo_pNext_offsetof);
    exports["VkPipelineRenderingCreateInfo_viewMask_offsetof"] = Napi::Function::New(env, VkPipelineRenderingCreateInfo_viewMask_offsetof);
    exports["VkPipelineRenderingCreateInfo_colorAttachmentCount_offsetof"] = Napi::Function::New(env, VkPipelineRenderingCreateInfo_colorAttachmentCount_offsetof);
    exports["VkPipelineRenderingCreateInfo_pColorAttachmentFormats_offsetof"] = Napi::Function::New(env, VkPipelineRenderingCreateInfo_pColorAttachmentFormats_offsetof);
    exports["VkPipelineRenderingCreateInfo_depthAttachmentFormat_offsetof"] = Napi::Function::New(env, VkPipelineRenderingCreateInfo_depthAttachmentFormat_offsetof);
    exports["VkPipelineRenderingCreateInfo_stencilAttachmentFormat_offsetof"] = Napi::Function::New(env, VkPipelineRenderingCreateInfo_stencilAttachmentFormat_offsetof);

    exports["VkRenderingInfo_sType_offsetof"] = Napi::Function::New(env, VkRenderingInfo_sType_offsetof);
    exports["VkRenderingInfo_pNext_offsetof"] = Napi::Function::New(env, VkRenderingInfo_pNext_offsetof);
    exports["VkRenderingInfo_flags_offsetof"] = Napi::Function::New(env, VkRenderingInfo_flags_offsetof);
    exports["VkRenderingInfo_renderArea_offsetof"] = Napi::Function::New(env, VkRenderingInfo_renderArea_offsetof);
    exports["VkRenderingInfo_layerCount_offsetof"] = Napi::Function::New(env, VkRenderingInfo_layerCount_offsetof);
    exports["VkRenderingInfo_viewMask_offsetof"] = Napi::Function::New(env, VkRenderingInfo_viewMask_offsetof);
    exports["VkRenderingInfo_colorAttachmentCount_offsetof"] = Napi::Function::New(env, VkRenderingInfo_colorAttachmentCount_offsetof);
    exports["VkRenderingInfo_pColorAttachments_offsetof"] = Napi::Function::New(env, VkRenderingInfo_pColorAttachments_offsetof);
    exports["VkRenderingInfo_pDepthAttachment_offsetof"] = Napi::Function::New(env, VkRenderingInfo_pDepthAttachment_offsetof);
    exports["VkRenderingInfo_pStencilAttachment_offsetof"] = Napi::Function::New(env, VkRenderingInfo_pStencilAttachment_offsetof);

    exports["VkRenderingAttachmentInfo_sType_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_sType_offsetof);
    exports["VkRenderingAttachmentInfo_pNext_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_pNext_offsetof);
    exports["VkRenderingAttachmentInfo_imageView_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_imageView_offsetof);
    exports["VkRenderingAttachmentInfo_imageLayout_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_imageLayout_offsetof);
    exports["VkRenderingAttachmentInfo_resolveMode_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_resolveMode_offsetof);
    exports["VkRenderingAttachmentInfo_resolveImageView_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_resolveImageView_offsetof);
    exports["VkRenderingAttachmentInfo_resolveImageLayout_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_resolveImageLayout_offsetof);
    exports["VkRenderingAttachmentInfo_loadOp_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_loadOp_offsetof);
    exports["VkRenderingAttachmentInfo_storeOp_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_storeOp_offsetof);
    exports["VkRenderingAttachmentInfo_clearValue_offsetof"] = Napi::Function::New(env, VkRenderingAttachmentInfo_clearValue_offsetof);

#ifdef VK_KHR_dynamic_rendering
    exports["VkRenderingFragmentShadingRateAttachmentInfoKHR_sType_offsetof"] = Napi::Function::New(env, VkRenderingFragmentShadingRateAttachmentInfoKHR_sType_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkRenderingFragmentShadingRateAttachmentInfoKHR_pNext_offsetof"] = Napi::Function::New(env, VkRenderingFragmentShadingRateAttachmentInfoKHR_pNext_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkRenderingFragmentShadingRateAttachmentInfoKHR_imageView_offsetof"] = Napi::Function::New(env, VkRenderingFragmentShadingRateAttachmentInfoKHR_imageView_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkRenderingFragmentShadingRateAttachmentInfoKHR_imageLayout_offsetof"] = Napi::Function::New(env, VkRenderingFragmentShadingRateAttachmentInfoKHR_imageLayout_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkRenderingFragmentShadingRateAttachmentInfoKHR_shadingRateAttachmentTexelSize_offsetof"] = Napi::Function::New(env, VkRenderingFragmentShadingRateAttachmentInfoKHR_shadingRateAttachmentTexelSize_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkRenderingFragmentDensityMapAttachmentInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkRenderingFragmentDensityMapAttachmentInfoEXT_sType_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkRenderingFragmentDensityMapAttachmentInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkRenderingFragmentDensityMapAttachmentInfoEXT_pNext_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkRenderingFragmentDensityMapAttachmentInfoEXT_imageView_offsetof"] = Napi::Function::New(env, VkRenderingFragmentDensityMapAttachmentInfoEXT_imageView_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkRenderingFragmentDensityMapAttachmentInfoEXT_imageLayout_offsetof"] = Napi::Function::New(env, VkRenderingFragmentDensityMapAttachmentInfoEXT_imageLayout_offsetof);
#endif
    exports["VkPhysicalDeviceDynamicRenderingFeatures_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDynamicRenderingFeatures_sType_offsetof);
    exports["VkPhysicalDeviceDynamicRenderingFeatures_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDynamicRenderingFeatures_pNext_offsetof);
    exports["VkPhysicalDeviceDynamicRenderingFeatures_dynamicRendering_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDynamicRenderingFeatures_dynamicRendering_offsetof);

    exports["VkCommandBufferInheritanceRenderingInfo_sType_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderingInfo_sType_offsetof);
    exports["VkCommandBufferInheritanceRenderingInfo_pNext_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderingInfo_pNext_offsetof);
    exports["VkCommandBufferInheritanceRenderingInfo_flags_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderingInfo_flags_offsetof);
    exports["VkCommandBufferInheritanceRenderingInfo_viewMask_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderingInfo_viewMask_offsetof);
    exports["VkCommandBufferInheritanceRenderingInfo_colorAttachmentCount_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderingInfo_colorAttachmentCount_offsetof);
    exports["VkCommandBufferInheritanceRenderingInfo_pColorAttachmentFormats_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderingInfo_pColorAttachmentFormats_offsetof);
    exports["VkCommandBufferInheritanceRenderingInfo_depthAttachmentFormat_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderingInfo_depthAttachmentFormat_offsetof);
    exports["VkCommandBufferInheritanceRenderingInfo_stencilAttachmentFormat_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderingInfo_stencilAttachmentFormat_offsetof);
    exports["VkCommandBufferInheritanceRenderingInfo_rasterizationSamples_offsetof"] = Napi::Function::New(env, VkCommandBufferInheritanceRenderingInfo_rasterizationSamples_offsetof);

#ifdef VK_KHR_dynamic_rendering
    exports["VkAttachmentSampleCountInfoAMD_sType_offsetof"] = Napi::Function::New(env, VkAttachmentSampleCountInfoAMD_sType_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkAttachmentSampleCountInfoAMD_pNext_offsetof"] = Napi::Function::New(env, VkAttachmentSampleCountInfoAMD_pNext_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkAttachmentSampleCountInfoAMD_colorAttachmentCount_offsetof"] = Napi::Function::New(env, VkAttachmentSampleCountInfoAMD_colorAttachmentCount_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkAttachmentSampleCountInfoAMD_pColorAttachmentSamples_offsetof"] = Napi::Function::New(env, VkAttachmentSampleCountInfoAMD_pColorAttachmentSamples_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkAttachmentSampleCountInfoAMD_depthStencilAttachmentSamples_offsetof"] = Napi::Function::New(env, VkAttachmentSampleCountInfoAMD_depthStencilAttachmentSamples_offsetof);
#endif

#ifdef VK_KHR_dynamic_rendering
    exports["VkMultiviewPerViewAttributesInfoNVX_sType_offsetof"] = Napi::Function::New(env, VkMultiviewPerViewAttributesInfoNVX_sType_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkMultiviewPerViewAttributesInfoNVX_pNext_offsetof"] = Napi::Function::New(env, VkMultiviewPerViewAttributesInfoNVX_pNext_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkMultiviewPerViewAttributesInfoNVX_perViewAttributes_offsetof"] = Napi::Function::New(env, VkMultiviewPerViewAttributesInfoNVX_perViewAttributes_offsetof);
#endif
#ifdef VK_KHR_dynamic_rendering
    exports["VkMultiviewPerViewAttributesInfoNVX_perViewAttributesPositionXOnly_offsetof"] = Napi::Function::New(env, VkMultiviewPerViewAttributesInfoNVX_perViewAttributesPositionXOnly_offsetof);
#endif
#ifdef VK_EXT_image_view_min_lod
    exports["VkPhysicalDeviceImageViewMinLodFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageViewMinLodFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_view_min_lod
    exports["VkPhysicalDeviceImageViewMinLodFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageViewMinLodFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_view_min_lod
    exports["VkPhysicalDeviceImageViewMinLodFeaturesEXT_minLod_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageViewMinLodFeaturesEXT_minLod_offsetof);
#endif
#ifdef VK_EXT_image_view_min_lod
    exports["VkImageViewMinLodCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkImageViewMinLodCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_view_min_lod
    exports["VkImageViewMinLodCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkImageViewMinLodCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_view_min_lod
    exports["VkImageViewMinLodCreateInfoEXT_minLod_offsetof"] = Napi::Function::New(env, VkImageViewMinLodCreateInfoEXT_minLod_offsetof);
#endif
#ifdef VK_EXT_rasterization_order_attachment_access
    exports["VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_rasterization_order_attachment_access
    exports["VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_rasterization_order_attachment_access
    exports["VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_rasterizationOrderColorAttachmentAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_rasterizationOrderColorAttachmentAccess_offsetof);
#endif
#ifdef VK_EXT_rasterization_order_attachment_access
    exports["VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_rasterizationOrderDepthAttachmentAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_rasterizationOrderDepthAttachmentAccess_offsetof);
#endif
#ifdef VK_EXT_rasterization_order_attachment_access
    exports["VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_rasterizationOrderStencilAttachmentAccess_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT_rasterizationOrderStencilAttachmentAccess_offsetof);
#endif

#ifdef VK_NV_linear_color_attachment
    exports["VkPhysicalDeviceLinearColorAttachmentFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLinearColorAttachmentFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_linear_color_attachment
    exports["VkPhysicalDeviceLinearColorAttachmentFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLinearColorAttachmentFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_linear_color_attachment
    exports["VkPhysicalDeviceLinearColorAttachmentFeaturesNV_linearColorAttachment_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceLinearColorAttachmentFeaturesNV_linearColorAttachment_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_graphicsPipelineLibrary_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_graphicsPipelineLibrary_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_graphicsPipelineLibraryFastLinking_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_graphicsPipelineLibraryFastLinking_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_graphicsPipelineLibraryIndependentInterpolationDecoration_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_graphicsPipelineLibraryIndependentInterpolationDecoration_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkGraphicsPipelineLibraryCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineLibraryCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkGraphicsPipelineLibraryCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineLibraryCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_graphics_pipeline_library
    exports["VkGraphicsPipelineLibraryCreateInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkGraphicsPipelineLibraryCreateInfoEXT_flags_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_sType_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_pNext_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_descriptorSetHostMapping_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_descriptorSetHostMapping_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkDescriptorSetBindingReferenceVALVE_sType_offsetof"] = Napi::Function::New(env, VkDescriptorSetBindingReferenceVALVE_sType_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkDescriptorSetBindingReferenceVALVE_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorSetBindingReferenceVALVE_pNext_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkDescriptorSetBindingReferenceVALVE_descriptorSetLayout_offsetof"] = Napi::Function::New(env, VkDescriptorSetBindingReferenceVALVE_descriptorSetLayout_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkDescriptorSetBindingReferenceVALVE_binding_offsetof"] = Napi::Function::New(env, VkDescriptorSetBindingReferenceVALVE_binding_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkDescriptorSetLayoutHostMappingInfoVALVE_sType_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutHostMappingInfoVALVE_sType_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkDescriptorSetLayoutHostMappingInfoVALVE_pNext_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutHostMappingInfoVALVE_pNext_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkDescriptorSetLayoutHostMappingInfoVALVE_descriptorOffset_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutHostMappingInfoVALVE_descriptorOffset_offsetof);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["VkDescriptorSetLayoutHostMappingInfoVALVE_descriptorSize_offsetof"] = Napi::Function::New(env, VkDescriptorSetLayoutHostMappingInfoVALVE_descriptorSize_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_shaderModuleIdentifier_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_shaderModuleIdentifier_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_shaderModuleIdentifierAlgorithmUUID_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_shaderModuleIdentifierAlgorithmUUID_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPipelineShaderStageModuleIdentifierCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageModuleIdentifierCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPipelineShaderStageModuleIdentifierCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageModuleIdentifierCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPipelineShaderStageModuleIdentifierCreateInfoEXT_identifierSize_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageModuleIdentifierCreateInfoEXT_identifierSize_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkPipelineShaderStageModuleIdentifierCreateInfoEXT_pIdentifier_offsetof"] = Napi::Function::New(env, VkPipelineShaderStageModuleIdentifierCreateInfoEXT_pIdentifier_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkShaderModuleIdentifierEXT_sType_offsetof"] = Napi::Function::New(env, VkShaderModuleIdentifierEXT_sType_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkShaderModuleIdentifierEXT_pNext_offsetof"] = Napi::Function::New(env, VkShaderModuleIdentifierEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkShaderModuleIdentifierEXT_identifierSize_offsetof"] = Napi::Function::New(env, VkShaderModuleIdentifierEXT_identifierSize_offsetof);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["VkShaderModuleIdentifierEXT_identifier_offsetof"] = Napi::Function::New(env, VkShaderModuleIdentifierEXT_identifier_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageCompressionControlEXT_sType_offsetof"] = Napi::Function::New(env, VkImageCompressionControlEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageCompressionControlEXT_pNext_offsetof"] = Napi::Function::New(env, VkImageCompressionControlEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageCompressionControlEXT_flags_offsetof"] = Napi::Function::New(env, VkImageCompressionControlEXT_flags_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageCompressionControlEXT_compressionControlPlaneCount_offsetof"] = Napi::Function::New(env, VkImageCompressionControlEXT_compressionControlPlaneCount_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageCompressionControlEXT_pFixedRateFlags_offsetof"] = Napi::Function::New(env, VkImageCompressionControlEXT_pFixedRateFlags_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkPhysicalDeviceImageCompressionControlFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageCompressionControlFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkPhysicalDeviceImageCompressionControlFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageCompressionControlFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkPhysicalDeviceImageCompressionControlFeaturesEXT_imageCompressionControl_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageCompressionControlFeaturesEXT_imageCompressionControl_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageCompressionPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkImageCompressionPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageCompressionPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkImageCompressionPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageCompressionPropertiesEXT_imageCompressionFlags_offsetof"] = Napi::Function::New(env, VkImageCompressionPropertiesEXT_imageCompressionFlags_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageCompressionPropertiesEXT_imageCompressionFixedRateFlags_offsetof"] = Napi::Function::New(env, VkImageCompressionPropertiesEXT_imageCompressionFixedRateFlags_offsetof);
#endif
#ifdef VK_EXT_image_compression_control_swapchain
    exports["VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_compression_control_swapchain
    exports["VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_compression_control_swapchain
    exports["VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_imageCompressionControlSwapchain_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_imageCompressionControlSwapchain_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageSubresource2EXT_sType_offsetof"] = Napi::Function::New(env, VkImageSubresource2EXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageSubresource2EXT_pNext_offsetof"] = Napi::Function::New(env, VkImageSubresource2EXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkImageSubresource2EXT_imageSubresource_offsetof"] = Napi::Function::New(env, VkImageSubresource2EXT_imageSubresource_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkSubresourceLayout2EXT_sType_offsetof"] = Napi::Function::New(env, VkSubresourceLayout2EXT_sType_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkSubresourceLayout2EXT_pNext_offsetof"] = Napi::Function::New(env, VkSubresourceLayout2EXT_pNext_offsetof);
#endif
#ifdef VK_EXT_image_compression_control
    exports["VkSubresourceLayout2EXT_subresourceLayout_offsetof"] = Napi::Function::New(env, VkSubresourceLayout2EXT_subresourceLayout_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassCreationControlEXT_sType_offsetof"] = Napi::Function::New(env, VkRenderPassCreationControlEXT_sType_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassCreationControlEXT_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassCreationControlEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassCreationControlEXT_disallowMerging_offsetof"] = Napi::Function::New(env, VkRenderPassCreationControlEXT_disallowMerging_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassCreationFeedbackInfoEXT_postMergeSubpassCount_offsetof"] = Napi::Function::New(env, VkRenderPassCreationFeedbackInfoEXT_postMergeSubpassCount_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassCreationFeedbackCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkRenderPassCreationFeedbackCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassCreationFeedbackCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassCreationFeedbackCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassCreationFeedbackCreateInfoEXT_pRenderPassFeedback_offsetof"] = Napi::Function::New(env, VkRenderPassCreationFeedbackCreateInfoEXT_pRenderPassFeedback_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassSubpassFeedbackInfoEXT_subpassMergeStatus_offsetof"] = Napi::Function::New(env, VkRenderPassSubpassFeedbackInfoEXT_subpassMergeStatus_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassSubpassFeedbackInfoEXT_description_offsetof"] = Napi::Function::New(env, VkRenderPassSubpassFeedbackInfoEXT_description_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassSubpassFeedbackInfoEXT_postMergeIndex_offsetof"] = Napi::Function::New(env, VkRenderPassSubpassFeedbackInfoEXT_postMergeIndex_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassSubpassFeedbackCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkRenderPassSubpassFeedbackCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassSubpassFeedbackCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkRenderPassSubpassFeedbackCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkRenderPassSubpassFeedbackCreateInfoEXT_pSubpassFeedback_offsetof"] = Napi::Function::New(env, VkRenderPassSubpassFeedbackCreateInfoEXT_pSubpassFeedback_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_subpass_merge_feedback
    exports["VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_subpassMergeFeedback_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_subpassMergeFeedback_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_type_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_type_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_flags_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_flags_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_mode_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_mode_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_dstMicromap_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_dstMicromap_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_usageCountsCount_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_usageCountsCount_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_pUsageCounts_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_pUsageCounts_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_ppUsageCounts_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_ppUsageCounts_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_data_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_data_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_scratchData_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_scratchData_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_triangleArray_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_triangleArray_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildInfoEXT_triangleArrayStride_offsetof"] = Napi::Function::New(env, VkMicromapBuildInfoEXT_triangleArrayStride_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkMicromapCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkMicromapCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapCreateInfoEXT_createFlags_offsetof"] = Napi::Function::New(env, VkMicromapCreateInfoEXT_createFlags_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapCreateInfoEXT_buffer_offsetof"] = Napi::Function::New(env, VkMicromapCreateInfoEXT_buffer_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapCreateInfoEXT_offset_offsetof"] = Napi::Function::New(env, VkMicromapCreateInfoEXT_offset_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapCreateInfoEXT_size_offsetof"] = Napi::Function::New(env, VkMicromapCreateInfoEXT_size_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapCreateInfoEXT_type_offsetof"] = Napi::Function::New(env, VkMicromapCreateInfoEXT_type_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapCreateInfoEXT_deviceAddress_offsetof"] = Napi::Function::New(env, VkMicromapCreateInfoEXT_deviceAddress_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapVersionInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkMicromapVersionInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapVersionInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkMicromapVersionInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapVersionInfoEXT_pVersionData_offsetof"] = Napi::Function::New(env, VkMicromapVersionInfoEXT_pVersionData_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkCopyMicromapInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkCopyMicromapInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapInfoEXT_src_offsetof"] = Napi::Function::New(env, VkCopyMicromapInfoEXT_src_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapInfoEXT_dst_offsetof"] = Napi::Function::New(env, VkCopyMicromapInfoEXT_dst_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapInfoEXT_mode_offsetof"] = Napi::Function::New(env, VkCopyMicromapInfoEXT_mode_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapToMemoryInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkCopyMicromapToMemoryInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapToMemoryInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkCopyMicromapToMemoryInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapToMemoryInfoEXT_src_offsetof"] = Napi::Function::New(env, VkCopyMicromapToMemoryInfoEXT_src_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapToMemoryInfoEXT_dst_offsetof"] = Napi::Function::New(env, VkCopyMicromapToMemoryInfoEXT_dst_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMicromapToMemoryInfoEXT_mode_offsetof"] = Napi::Function::New(env, VkCopyMicromapToMemoryInfoEXT_mode_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMemoryToMicromapInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkCopyMemoryToMicromapInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMemoryToMicromapInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkCopyMemoryToMicromapInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMemoryToMicromapInfoEXT_src_offsetof"] = Napi::Function::New(env, VkCopyMemoryToMicromapInfoEXT_src_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMemoryToMicromapInfoEXT_dst_offsetof"] = Napi::Function::New(env, VkCopyMemoryToMicromapInfoEXT_dst_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkCopyMemoryToMicromapInfoEXT_mode_offsetof"] = Napi::Function::New(env, VkCopyMemoryToMicromapInfoEXT_mode_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildSizesInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkMicromapBuildSizesInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildSizesInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkMicromapBuildSizesInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildSizesInfoEXT_micromapSize_offsetof"] = Napi::Function::New(env, VkMicromapBuildSizesInfoEXT_micromapSize_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildSizesInfoEXT_buildScratchSize_offsetof"] = Napi::Function::New(env, VkMicromapBuildSizesInfoEXT_buildScratchSize_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapBuildSizesInfoEXT_discardable_offsetof"] = Napi::Function::New(env, VkMicromapBuildSizesInfoEXT_discardable_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapUsageEXT_count_offsetof"] = Napi::Function::New(env, VkMicromapUsageEXT_count_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapUsageEXT_subdivisionLevel_offsetof"] = Napi::Function::New(env, VkMicromapUsageEXT_subdivisionLevel_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapUsageEXT_format_offsetof"] = Napi::Function::New(env, VkMicromapUsageEXT_format_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapTriangleEXT_dataOffset_offsetof"] = Napi::Function::New(env, VkMicromapTriangleEXT_dataOffset_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapTriangleEXT_subdivisionLevel_offsetof"] = Napi::Function::New(env, VkMicromapTriangleEXT_subdivisionLevel_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkMicromapTriangleEXT_format_offsetof"] = Napi::Function::New(env, VkMicromapTriangleEXT_format_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkPhysicalDeviceOpacityMicromapFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpacityMicromapFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkPhysicalDeviceOpacityMicromapFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpacityMicromapFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkPhysicalDeviceOpacityMicromapFeaturesEXT_micromap_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpacityMicromapFeaturesEXT_micromap_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkPhysicalDeviceOpacityMicromapFeaturesEXT_micromapCaptureReplay_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpacityMicromapFeaturesEXT_micromapCaptureReplay_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkPhysicalDeviceOpacityMicromapFeaturesEXT_micromapHostCommands_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpacityMicromapFeaturesEXT_micromapHostCommands_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkPhysicalDeviceOpacityMicromapPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpacityMicromapPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkPhysicalDeviceOpacityMicromapPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpacityMicromapPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkPhysicalDeviceOpacityMicromapPropertiesEXT_maxOpacity2StateSubdivisionLevel_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpacityMicromapPropertiesEXT_maxOpacity2StateSubdivisionLevel_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkPhysicalDeviceOpacityMicromapPropertiesEXT_maxOpacity4StateSubdivisionLevel_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpacityMicromapPropertiesEXT_maxOpacity4StateSubdivisionLevel_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_sType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_sType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_pNext_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_indexType_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_indexType_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_indexBuffer_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_indexBuffer_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_indexStride_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_indexStride_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_baseTriangle_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_baseTriangle_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_usageCountsCount_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_usageCountsCount_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_pUsageCounts_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_pUsageCounts_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_ppUsageCounts_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_ppUsageCounts_offsetof);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["VkAccelerationStructureTrianglesOpacityMicromapEXT_micromap_offsetof"] = Napi::Function::New(env, VkAccelerationStructureTrianglesOpacityMicromapEXT_micromap_offsetof);
#endif
#ifdef VK_EXT_pipeline_properties
    exports["VkPipelinePropertiesIdentifierEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelinePropertiesIdentifierEXT_sType_offsetof);
#endif
#ifdef VK_EXT_pipeline_properties
    exports["VkPipelinePropertiesIdentifierEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelinePropertiesIdentifierEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_pipeline_properties
    exports["VkPipelinePropertiesIdentifierEXT_pipelineIdentifier_offsetof"] = Napi::Function::New(env, VkPipelinePropertiesIdentifierEXT_pipelineIdentifier_offsetof);
#endif
#ifdef VK_EXT_pipeline_properties
    exports["VkPhysicalDevicePipelinePropertiesFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelinePropertiesFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_pipeline_properties
    exports["VkPhysicalDevicePipelinePropertiesFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelinePropertiesFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_pipeline_properties
    exports["VkPhysicalDevicePipelinePropertiesFeaturesEXT_pipelinePropertiesIdentifier_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelinePropertiesFeaturesEXT_pipelinePropertiesIdentifier_offsetof);
#endif
#ifdef VK_AMD_shader_early_and_late_fragment_tests
    exports["VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_sType_offsetof);
#endif
#ifdef VK_AMD_shader_early_and_late_fragment_tests
    exports["VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_pNext_offsetof);
#endif
#ifdef VK_AMD_shader_early_and_late_fragment_tests
    exports["VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_shaderEarlyAndLateFragmentTests_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_shaderEarlyAndLateFragmentTests_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalObjectCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkExportMetalObjectCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalObjectCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkExportMetalObjectCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalObjectCreateInfoEXT_exportObjectType_offsetof"] = Napi::Function::New(env, VkExportMetalObjectCreateInfoEXT_exportObjectType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalObjectsInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkExportMetalObjectsInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalObjectsInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkExportMetalObjectsInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalDeviceInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkExportMetalDeviceInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalDeviceInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkExportMetalDeviceInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalDeviceInfoEXT_mtlDevice_offsetof"] = Napi::Function::New(env, VkExportMetalDeviceInfoEXT_mtlDevice_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalCommandQueueInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkExportMetalCommandQueueInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalCommandQueueInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkExportMetalCommandQueueInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalCommandQueueInfoEXT_queue_offsetof"] = Napi::Function::New(env, VkExportMetalCommandQueueInfoEXT_queue_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalCommandQueueInfoEXT_mtlCommandQueue_offsetof"] = Napi::Function::New(env, VkExportMetalCommandQueueInfoEXT_mtlCommandQueue_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalBufferInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkExportMetalBufferInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalBufferInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkExportMetalBufferInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalBufferInfoEXT_memory_offsetof"] = Napi::Function::New(env, VkExportMetalBufferInfoEXT_memory_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalBufferInfoEXT_mtlBuffer_offsetof"] = Napi::Function::New(env, VkExportMetalBufferInfoEXT_mtlBuffer_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalBufferInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkImportMetalBufferInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalBufferInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkImportMetalBufferInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalBufferInfoEXT_mtlBuffer_offsetof"] = Napi::Function::New(env, VkImportMetalBufferInfoEXT_mtlBuffer_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalTextureInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkExportMetalTextureInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalTextureInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkExportMetalTextureInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalTextureInfoEXT_image_offsetof"] = Napi::Function::New(env, VkExportMetalTextureInfoEXT_image_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalTextureInfoEXT_imageView_offsetof"] = Napi::Function::New(env, VkExportMetalTextureInfoEXT_imageView_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalTextureInfoEXT_bufferView_offsetof"] = Napi::Function::New(env, VkExportMetalTextureInfoEXT_bufferView_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalTextureInfoEXT_plane_offsetof"] = Napi::Function::New(env, VkExportMetalTextureInfoEXT_plane_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalTextureInfoEXT_mtlTexture_offsetof"] = Napi::Function::New(env, VkExportMetalTextureInfoEXT_mtlTexture_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalTextureInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkImportMetalTextureInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalTextureInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkImportMetalTextureInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalTextureInfoEXT_plane_offsetof"] = Napi::Function::New(env, VkImportMetalTextureInfoEXT_plane_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalTextureInfoEXT_mtlTexture_offsetof"] = Napi::Function::New(env, VkImportMetalTextureInfoEXT_mtlTexture_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalIOSurfaceInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkExportMetalIOSurfaceInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalIOSurfaceInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkExportMetalIOSurfaceInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalIOSurfaceInfoEXT_image_offsetof"] = Napi::Function::New(env, VkExportMetalIOSurfaceInfoEXT_image_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalIOSurfaceInfoEXT_ioSurface_offsetof"] = Napi::Function::New(env, VkExportMetalIOSurfaceInfoEXT_ioSurface_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalIOSurfaceInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkImportMetalIOSurfaceInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalIOSurfaceInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkImportMetalIOSurfaceInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalIOSurfaceInfoEXT_ioSurface_offsetof"] = Napi::Function::New(env, VkImportMetalIOSurfaceInfoEXT_ioSurface_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalSharedEventInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkExportMetalSharedEventInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalSharedEventInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkExportMetalSharedEventInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalSharedEventInfoEXT_semaphore_offsetof"] = Napi::Function::New(env, VkExportMetalSharedEventInfoEXT_semaphore_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalSharedEventInfoEXT_event_offsetof"] = Napi::Function::New(env, VkExportMetalSharedEventInfoEXT_event_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkExportMetalSharedEventInfoEXT_mtlSharedEvent_offsetof"] = Napi::Function::New(env, VkExportMetalSharedEventInfoEXT_mtlSharedEvent_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalSharedEventInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkImportMetalSharedEventInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalSharedEventInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkImportMetalSharedEventInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_metal_objects
    exports["VkImportMetalSharedEventInfoEXT_mtlSharedEvent_offsetof"] = Napi::Function::New(env, VkImportMetalSharedEventInfoEXT_mtlSharedEvent_offsetof);
#endif
#ifdef VK_EXT_non_seamless_cube_map
    exports["VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_non_seamless_cube_map
    exports["VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_non_seamless_cube_map
    exports["VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_nonSeamlessCubeMap_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_nonSeamlessCubeMap_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPhysicalDevicePipelineRobustnessFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineRobustnessFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPhysicalDevicePipelineRobustnessFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineRobustnessFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPhysicalDevicePipelineRobustnessFeaturesEXT_pipelineRobustness_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineRobustnessFeaturesEXT_pipelineRobustness_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPipelineRobustnessCreateInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkPipelineRobustnessCreateInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPipelineRobustnessCreateInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkPipelineRobustnessCreateInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPipelineRobustnessCreateInfoEXT_storageBuffers_offsetof"] = Napi::Function::New(env, VkPipelineRobustnessCreateInfoEXT_storageBuffers_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPipelineRobustnessCreateInfoEXT_uniformBuffers_offsetof"] = Napi::Function::New(env, VkPipelineRobustnessCreateInfoEXT_uniformBuffers_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPipelineRobustnessCreateInfoEXT_vertexInputs_offsetof"] = Napi::Function::New(env, VkPipelineRobustnessCreateInfoEXT_vertexInputs_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPipelineRobustnessCreateInfoEXT_images_offsetof"] = Napi::Function::New(env, VkPipelineRobustnessCreateInfoEXT_images_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPhysicalDevicePipelineRobustnessPropertiesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineRobustnessPropertiesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPhysicalDevicePipelineRobustnessPropertiesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineRobustnessPropertiesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessStorageBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessStorageBuffers_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessUniformBuffers_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessUniformBuffers_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessVertexInputs_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessVertexInputs_offsetof);
#endif
#ifdef VK_EXT_pipeline_robustness
    exports["VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessImages_offsetof"] = Napi::Function::New(env, VkPhysicalDevicePipelineRobustnessPropertiesEXT_defaultRobustnessImages_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkImageViewSampleWeightCreateInfoQCOM_sType_offsetof"] = Napi::Function::New(env, VkImageViewSampleWeightCreateInfoQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkImageViewSampleWeightCreateInfoQCOM_pNext_offsetof"] = Napi::Function::New(env, VkImageViewSampleWeightCreateInfoQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkImageViewSampleWeightCreateInfoQCOM_filterCenter_offsetof"] = Napi::Function::New(env, VkImageViewSampleWeightCreateInfoQCOM_filterCenter_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkImageViewSampleWeightCreateInfoQCOM_filterSize_offsetof"] = Napi::Function::New(env, VkImageViewSampleWeightCreateInfoQCOM_filterSize_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkImageViewSampleWeightCreateInfoQCOM_numPhases_offsetof"] = Napi::Function::New(env, VkImageViewSampleWeightCreateInfoQCOM_numPhases_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingFeaturesQCOM_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingFeaturesQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingFeaturesQCOM_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingFeaturesQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingFeaturesQCOM_textureSampleWeighted_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingFeaturesQCOM_textureSampleWeighted_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingFeaturesQCOM_textureBoxFilter_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingFeaturesQCOM_textureBoxFilter_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingFeaturesQCOM_textureBlockMatch_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingFeaturesQCOM_textureBlockMatch_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingPropertiesQCOM_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingPropertiesQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingPropertiesQCOM_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingPropertiesQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingPropertiesQCOM_maxWeightFilterPhases_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingPropertiesQCOM_maxWeightFilterPhases_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingPropertiesQCOM_maxWeightFilterDimension_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingPropertiesQCOM_maxWeightFilterDimension_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingPropertiesQCOM_maxBlockMatchRegion_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingPropertiesQCOM_maxBlockMatchRegion_offsetof);
#endif
#ifdef VK_QCOM_image_processing
    exports["VkPhysicalDeviceImageProcessingPropertiesQCOM_maxBoxFilterBlockSize_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceImageProcessingPropertiesQCOM_maxBoxFilterBlockSize_offsetof);
#endif
#ifdef VK_QCOM_tile_properties
    exports["VkPhysicalDeviceTilePropertiesFeaturesQCOM_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTilePropertiesFeaturesQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_tile_properties
    exports["VkPhysicalDeviceTilePropertiesFeaturesQCOM_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTilePropertiesFeaturesQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_tile_properties
    exports["VkPhysicalDeviceTilePropertiesFeaturesQCOM_tileProperties_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceTilePropertiesFeaturesQCOM_tileProperties_offsetof);
#endif
#ifdef VK_QCOM_tile_properties
    exports["VkTilePropertiesQCOM_sType_offsetof"] = Napi::Function::New(env, VkTilePropertiesQCOM_sType_offsetof);
#endif
#ifdef VK_QCOM_tile_properties
    exports["VkTilePropertiesQCOM_pNext_offsetof"] = Napi::Function::New(env, VkTilePropertiesQCOM_pNext_offsetof);
#endif
#ifdef VK_QCOM_tile_properties
    exports["VkTilePropertiesQCOM_tileSize_offsetof"] = Napi::Function::New(env, VkTilePropertiesQCOM_tileSize_offsetof);
#endif
#ifdef VK_QCOM_tile_properties
    exports["VkTilePropertiesQCOM_apronSize_offsetof"] = Napi::Function::New(env, VkTilePropertiesQCOM_apronSize_offsetof);
#endif
#ifdef VK_QCOM_tile_properties
    exports["VkTilePropertiesQCOM_origin_offsetof"] = Napi::Function::New(env, VkTilePropertiesQCOM_origin_offsetof);
#endif
#ifdef VK_SEC_amigo_profiling
    exports["VkPhysicalDeviceAmigoProfilingFeaturesSEC_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAmigoProfilingFeaturesSEC_sType_offsetof);
#endif
#ifdef VK_SEC_amigo_profiling
    exports["VkPhysicalDeviceAmigoProfilingFeaturesSEC_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAmigoProfilingFeaturesSEC_pNext_offsetof);
#endif
#ifdef VK_SEC_amigo_profiling
    exports["VkPhysicalDeviceAmigoProfilingFeaturesSEC_amigoProfiling_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAmigoProfilingFeaturesSEC_amigoProfiling_offsetof);
#endif
#ifdef VK_SEC_amigo_profiling
    exports["VkAmigoProfilingSubmitInfoSEC_sType_offsetof"] = Napi::Function::New(env, VkAmigoProfilingSubmitInfoSEC_sType_offsetof);
#endif
#ifdef VK_SEC_amigo_profiling
    exports["VkAmigoProfilingSubmitInfoSEC_pNext_offsetof"] = Napi::Function::New(env, VkAmigoProfilingSubmitInfoSEC_pNext_offsetof);
#endif
#ifdef VK_SEC_amigo_profiling
    exports["VkAmigoProfilingSubmitInfoSEC_firstDrawTimestamp_offsetof"] = Napi::Function::New(env, VkAmigoProfilingSubmitInfoSEC_firstDrawTimestamp_offsetof);
#endif
#ifdef VK_SEC_amigo_profiling
    exports["VkAmigoProfilingSubmitInfoSEC_swapBufferTimestamp_offsetof"] = Napi::Function::New(env, VkAmigoProfilingSubmitInfoSEC_swapBufferTimestamp_offsetof);
#endif
#ifdef VK_EXT_attachment_feedback_loop_layout
    exports["VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_attachment_feedback_loop_layout
    exports["VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_attachment_feedback_loop_layout
    exports["VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_attachmentFeedbackLoopLayout_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_attachmentFeedbackLoopLayout_offsetof);
#endif
#ifdef VK_EXT_depth_clamp_zero_one
    exports["VkPhysicalDeviceDepthClampZeroOneFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_depth_clamp_zero_one
    exports["VkPhysicalDeviceDepthClampZeroOneFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_depth_clamp_zero_one
    exports["VkPhysicalDeviceDepthClampZeroOneFeaturesEXT_depthClampZeroOne_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT_depthClampZeroOne_offsetof);
#endif
#ifdef VK_EXT_device_address_binding_report
    exports["VkPhysicalDeviceAddressBindingReportFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAddressBindingReportFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_device_address_binding_report
    exports["VkPhysicalDeviceAddressBindingReportFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAddressBindingReportFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_device_address_binding_report
    exports["VkPhysicalDeviceAddressBindingReportFeaturesEXT_reportAddressBinding_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceAddressBindingReportFeaturesEXT_reportAddressBinding_offsetof);
#endif
#ifdef VK_EXT_device_address_binding_report
    exports["VkDeviceAddressBindingCallbackDataEXT_sType_offsetof"] = Napi::Function::New(env, VkDeviceAddressBindingCallbackDataEXT_sType_offsetof);
#endif
#ifdef VK_EXT_device_address_binding_report
    exports["VkDeviceAddressBindingCallbackDataEXT_pNext_offsetof"] = Napi::Function::New(env, VkDeviceAddressBindingCallbackDataEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_device_address_binding_report
    exports["VkDeviceAddressBindingCallbackDataEXT_flags_offsetof"] = Napi::Function::New(env, VkDeviceAddressBindingCallbackDataEXT_flags_offsetof);
#endif
#ifdef VK_EXT_device_address_binding_report
    exports["VkDeviceAddressBindingCallbackDataEXT_baseAddress_offsetof"] = Napi::Function::New(env, VkDeviceAddressBindingCallbackDataEXT_baseAddress_offsetof);
#endif
#ifdef VK_EXT_device_address_binding_report
    exports["VkDeviceAddressBindingCallbackDataEXT_size_offsetof"] = Napi::Function::New(env, VkDeviceAddressBindingCallbackDataEXT_size_offsetof);
#endif
#ifdef VK_EXT_device_address_binding_report
    exports["VkDeviceAddressBindingCallbackDataEXT_bindingType_offsetof"] = Napi::Function::New(env, VkDeviceAddressBindingCallbackDataEXT_bindingType_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowFeaturesNV_opticalFlow_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowFeaturesNV_opticalFlow_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_supportedOutputGridSizes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_supportedOutputGridSizes_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_supportedHintGridSizes_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_supportedHintGridSizes_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_hintSupported_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_hintSupported_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_costSupported_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_costSupported_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_bidirectionalFlowSupported_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_bidirectionalFlowSupported_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_globalFlowSupported_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_globalFlowSupported_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_minWidth_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_minWidth_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_minHeight_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_minHeight_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_maxWidth_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_maxWidth_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_maxHeight_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_maxHeight_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkPhysicalDeviceOpticalFlowPropertiesNV_maxNumRegionsOfInterest_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceOpticalFlowPropertiesNV_maxNumRegionsOfInterest_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowImageFormatInfoNV_sType_offsetof"] = Napi::Function::New(env, VkOpticalFlowImageFormatInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowImageFormatInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkOpticalFlowImageFormatInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowImageFormatInfoNV_usage_offsetof"] = Napi::Function::New(env, VkOpticalFlowImageFormatInfoNV_usage_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowImageFormatPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkOpticalFlowImageFormatPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowImageFormatPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkOpticalFlowImageFormatPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowImageFormatPropertiesNV_format_offsetof"] = Napi::Function::New(env, VkOpticalFlowImageFormatPropertiesNV_format_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_sType_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_width_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_width_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_height_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_height_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_imageFormat_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_imageFormat_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_flowVectorFormat_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_flowVectorFormat_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_costFormat_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_costFormat_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_outputGridSize_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_outputGridSize_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_hintGridSize_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_hintGridSize_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_performanceLevel_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_performanceLevel_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreateInfoNV_flags_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreateInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreatePrivateDataInfoNV_sType_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreatePrivateDataInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreatePrivateDataInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreatePrivateDataInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreatePrivateDataInfoNV_id_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreatePrivateDataInfoNV_id_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreatePrivateDataInfoNV_size_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreatePrivateDataInfoNV_size_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowSessionCreatePrivateDataInfoNV_pPrivateData_offsetof"] = Napi::Function::New(env, VkOpticalFlowSessionCreatePrivateDataInfoNV_pPrivateData_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowExecuteInfoNV_sType_offsetof"] = Napi::Function::New(env, VkOpticalFlowExecuteInfoNV_sType_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowExecuteInfoNV_pNext_offsetof"] = Napi::Function::New(env, VkOpticalFlowExecuteInfoNV_pNext_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowExecuteInfoNV_flags_offsetof"] = Napi::Function::New(env, VkOpticalFlowExecuteInfoNV_flags_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowExecuteInfoNV_regionCount_offsetof"] = Napi::Function::New(env, VkOpticalFlowExecuteInfoNV_regionCount_offsetof);
#endif
#ifdef VK_NV_optical_flow
    exports["VkOpticalFlowExecuteInfoNV_pRegions_offsetof"] = Napi::Function::New(env, VkOpticalFlowExecuteInfoNV_pRegions_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkPhysicalDeviceFaultFeaturesEXT_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFaultFeaturesEXT_sType_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkPhysicalDeviceFaultFeaturesEXT_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFaultFeaturesEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkPhysicalDeviceFaultFeaturesEXT_deviceFault_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFaultFeaturesEXT_deviceFault_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkPhysicalDeviceFaultFeaturesEXT_deviceFaultVendorBinary_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceFaultFeaturesEXT_deviceFaultVendorBinary_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultAddressInfoEXT_addressType_offsetof"] = Napi::Function::New(env, VkDeviceFaultAddressInfoEXT_addressType_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultAddressInfoEXT_reportedAddress_offsetof"] = Napi::Function::New(env, VkDeviceFaultAddressInfoEXT_reportedAddress_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultAddressInfoEXT_addressPrecision_offsetof"] = Napi::Function::New(env, VkDeviceFaultAddressInfoEXT_addressPrecision_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorInfoEXT_description_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorInfoEXT_description_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorInfoEXT_vendorFaultCode_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorInfoEXT_vendorFaultCode_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorInfoEXT_vendorFaultData_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorInfoEXT_vendorFaultData_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultCountsEXT_sType_offsetof"] = Napi::Function::New(env, VkDeviceFaultCountsEXT_sType_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultCountsEXT_pNext_offsetof"] = Napi::Function::New(env, VkDeviceFaultCountsEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultCountsEXT_addressInfoCount_offsetof"] = Napi::Function::New(env, VkDeviceFaultCountsEXT_addressInfoCount_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultCountsEXT_vendorInfoCount_offsetof"] = Napi::Function::New(env, VkDeviceFaultCountsEXT_vendorInfoCount_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultCountsEXT_vendorBinarySize_offsetof"] = Napi::Function::New(env, VkDeviceFaultCountsEXT_vendorBinarySize_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultInfoEXT_sType_offsetof"] = Napi::Function::New(env, VkDeviceFaultInfoEXT_sType_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultInfoEXT_pNext_offsetof"] = Napi::Function::New(env, VkDeviceFaultInfoEXT_pNext_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultInfoEXT_description_offsetof"] = Napi::Function::New(env, VkDeviceFaultInfoEXT_description_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultInfoEXT_pAddressInfos_offsetof"] = Napi::Function::New(env, VkDeviceFaultInfoEXT_pAddressInfos_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultInfoEXT_pVendorInfos_offsetof"] = Napi::Function::New(env, VkDeviceFaultInfoEXT_pVendorInfos_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultInfoEXT_pVendorBinaryData_offsetof"] = Napi::Function::New(env, VkDeviceFaultInfoEXT_pVendorBinaryData_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorBinaryHeaderVersionOneEXT_headerSize_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorBinaryHeaderVersionOneEXT_headerSize_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorBinaryHeaderVersionOneEXT_headerVersion_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorBinaryHeaderVersionOneEXT_headerVersion_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorBinaryHeaderVersionOneEXT_vendorID_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorBinaryHeaderVersionOneEXT_vendorID_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorBinaryHeaderVersionOneEXT_deviceID_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorBinaryHeaderVersionOneEXT_deviceID_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorBinaryHeaderVersionOneEXT_driverVersion_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorBinaryHeaderVersionOneEXT_driverVersion_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorBinaryHeaderVersionOneEXT_pipelineCacheUUID_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorBinaryHeaderVersionOneEXT_pipelineCacheUUID_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorBinaryHeaderVersionOneEXT_applicationNameOffset_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorBinaryHeaderVersionOneEXT_applicationNameOffset_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorBinaryHeaderVersionOneEXT_applicationVersion_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorBinaryHeaderVersionOneEXT_applicationVersion_offsetof);
#endif
#ifdef VK_EXT_device_fault
    exports["VkDeviceFaultVendorBinaryHeaderVersionOneEXT_engineNameOffset_offsetof"] = Napi::Function::New(env, VkDeviceFaultVendorBinaryHeaderVersionOneEXT_engineNameOffset_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkDecompressMemoryRegionNV_srcAddress_offsetof"] = Napi::Function::New(env, VkDecompressMemoryRegionNV_srcAddress_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkDecompressMemoryRegionNV_dstAddress_offsetof"] = Napi::Function::New(env, VkDecompressMemoryRegionNV_dstAddress_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkDecompressMemoryRegionNV_compressedSize_offsetof"] = Napi::Function::New(env, VkDecompressMemoryRegionNV_compressedSize_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkDecompressMemoryRegionNV_decompressedSize_offsetof"] = Napi::Function::New(env, VkDecompressMemoryRegionNV_decompressedSize_offsetof);
#endif
#ifdef VK_NV_memory_decompression
    exports["VkDecompressMemoryRegionNV_decompressionMethod_offsetof"] = Napi::Function::New(env, VkDecompressMemoryRegionNV_decompressionMethod_offsetof);
#endif
#ifdef VK_ARM_shader_core_builtins
    exports["VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_sType_offsetof);
#endif
#ifdef VK_ARM_shader_core_builtins
    exports["VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_pNext_offsetof);
#endif
#ifdef VK_ARM_shader_core_builtins
    exports["VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_shaderCoreMask_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_shaderCoreMask_offsetof);
#endif
#ifdef VK_ARM_shader_core_builtins
    exports["VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_shaderCoreCount_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_shaderCoreCount_offsetof);
#endif
#ifdef VK_ARM_shader_core_builtins
    exports["VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_shaderWarpsPerCore_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM_shaderWarpsPerCore_offsetof);
#endif
#ifdef VK_ARM_shader_core_builtins
    exports["VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM_sType_offsetof);
#endif
#ifdef VK_ARM_shader_core_builtins
    exports["VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM_pNext_offsetof);
#endif
#ifdef VK_ARM_shader_core_builtins
    exports["VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM_shaderCoreBuiltins_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM_shaderCoreBuiltins_offsetof);
#endif
#ifdef VK_NV_ray_tracing_invocation_reorder
    exports["VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing_invocation_reorder
    exports["VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing_invocation_reorder
    exports["VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV_rayTracingInvocationReorder_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV_rayTracingInvocationReorder_offsetof);
#endif
#ifdef VK_NV_ray_tracing_invocation_reorder
    exports["VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV_sType_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV_sType_offsetof);
#endif
#ifdef VK_NV_ray_tracing_invocation_reorder
    exports["VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV_pNext_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV_pNext_offsetof);
#endif
#ifdef VK_NV_ray_tracing_invocation_reorder
    exports["VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV_rayTracingInvocationReorderReorderingHint_offsetof"] = Napi::Function::New(env, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV_rayTracingInvocationReorderReorderingHint_offsetof);
#endif

    exports["vkCreateInstance"] = Napi::Function::New(env, rawCreateInstance);
    exports["vkDestroyInstance"] = Napi::Function::New(env, rawDestroyInstance);
    exports["vkEnumeratePhysicalDevices"] = Napi::Function::New(env, rawEnumeratePhysicalDevices);
    exports["vkGetDeviceProcAddr"] = Napi::Function::New(env, rawGetDeviceProcAddr);
    exports["vkGetInstanceProcAddr"] = Napi::Function::New(env, rawGetInstanceProcAddr);
    exports["vkGetPhysicalDeviceProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceProperties);
    exports["vkGetPhysicalDeviceQueueFamilyProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceQueueFamilyProperties);
    exports["vkGetPhysicalDeviceMemoryProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceMemoryProperties);
    exports["vkGetPhysicalDeviceFeatures"] = Napi::Function::New(env, rawGetPhysicalDeviceFeatures);
    exports["vkGetPhysicalDeviceFormatProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceFormatProperties);
    exports["vkGetPhysicalDeviceImageFormatProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceImageFormatProperties);
    exports["vkCreateDevice"] = Napi::Function::New(env, rawCreateDevice);
    exports["vkDestroyDevice"] = Napi::Function::New(env, rawDestroyDevice);
    exports["vkEnumerateInstanceVersion"] = Napi::Function::New(env, rawEnumerateInstanceVersion);
    exports["vkEnumerateInstanceLayerProperties"] = Napi::Function::New(env, rawEnumerateInstanceLayerProperties);
    exports["vkEnumerateInstanceExtensionProperties"] = Napi::Function::New(env, rawEnumerateInstanceExtensionProperties);
    exports["vkEnumerateDeviceLayerProperties"] = Napi::Function::New(env, rawEnumerateDeviceLayerProperties);
    exports["vkEnumerateDeviceExtensionProperties"] = Napi::Function::New(env, rawEnumerateDeviceExtensionProperties);
    exports["vkGetDeviceQueue"] = Napi::Function::New(env, rawGetDeviceQueue);
    exports["vkQueueSubmit"] = Napi::Function::New(env, rawQueueSubmit);
    exports["vkQueueWaitIdle"] = Napi::Function::New(env, rawQueueWaitIdle);
    exports["vkDeviceWaitIdle"] = Napi::Function::New(env, rawDeviceWaitIdle);
    exports["vkAllocateMemory"] = Napi::Function::New(env, rawAllocateMemory);
    exports["vkFreeMemory"] = Napi::Function::New(env, rawFreeMemory);
    exports["vkMapMemory"] = Napi::Function::New(env, rawMapMemory);
    exports["vkUnmapMemory"] = Napi::Function::New(env, rawUnmapMemory);
    exports["vkFlushMappedMemoryRanges"] = Napi::Function::New(env, rawFlushMappedMemoryRanges);
    exports["vkInvalidateMappedMemoryRanges"] = Napi::Function::New(env, rawInvalidateMappedMemoryRanges);
    exports["vkGetDeviceMemoryCommitment"] = Napi::Function::New(env, rawGetDeviceMemoryCommitment);
    exports["vkGetBufferMemoryRequirements"] = Napi::Function::New(env, rawGetBufferMemoryRequirements);
    exports["vkBindBufferMemory"] = Napi::Function::New(env, rawBindBufferMemory);
    exports["vkGetImageMemoryRequirements"] = Napi::Function::New(env, rawGetImageMemoryRequirements);
    exports["vkBindImageMemory"] = Napi::Function::New(env, rawBindImageMemory);
    exports["vkGetImageSparseMemoryRequirements"] = Napi::Function::New(env, rawGetImageSparseMemoryRequirements);
    exports["vkGetPhysicalDeviceSparseImageFormatProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceSparseImageFormatProperties);
    exports["vkQueueBindSparse"] = Napi::Function::New(env, rawQueueBindSparse);
    exports["vkCreateFence"] = Napi::Function::New(env, rawCreateFence);
    exports["vkDestroyFence"] = Napi::Function::New(env, rawDestroyFence);
    exports["vkResetFences"] = Napi::Function::New(env, rawResetFences);
    exports["vkGetFenceStatus"] = Napi::Function::New(env, rawGetFenceStatus);
    exports["vkWaitForFences"] = Napi::Function::New(env, rawWaitForFences);
    exports["vkCreateSemaphore"] = Napi::Function::New(env, rawCreateSemaphore);
    exports["vkDestroySemaphore"] = Napi::Function::New(env, rawDestroySemaphore);
    exports["vkCreateEvent"] = Napi::Function::New(env, rawCreateEvent);
    exports["vkDestroyEvent"] = Napi::Function::New(env, rawDestroyEvent);
    exports["vkGetEventStatus"] = Napi::Function::New(env, rawGetEventStatus);
    exports["vkSetEvent"] = Napi::Function::New(env, rawSetEvent);
    exports["vkResetEvent"] = Napi::Function::New(env, rawResetEvent);
    exports["vkCreateQueryPool"] = Napi::Function::New(env, rawCreateQueryPool);
    exports["vkDestroyQueryPool"] = Napi::Function::New(env, rawDestroyQueryPool);
    exports["vkGetQueryPoolResults"] = Napi::Function::New(env, rawGetQueryPoolResults);
    exports["vkResetQueryPool"] = Napi::Function::New(env, rawResetQueryPool);
    exports["vkCreateBuffer"] = Napi::Function::New(env, rawCreateBuffer);
    exports["vkDestroyBuffer"] = Napi::Function::New(env, rawDestroyBuffer);
    exports["vkCreateBufferView"] = Napi::Function::New(env, rawCreateBufferView);
    exports["vkDestroyBufferView"] = Napi::Function::New(env, rawDestroyBufferView);
    exports["vkCreateImage"] = Napi::Function::New(env, rawCreateImage);
    exports["vkDestroyImage"] = Napi::Function::New(env, rawDestroyImage);
    exports["vkGetImageSubresourceLayout"] = Napi::Function::New(env, rawGetImageSubresourceLayout);
    exports["vkCreateImageView"] = Napi::Function::New(env, rawCreateImageView);
    exports["vkDestroyImageView"] = Napi::Function::New(env, rawDestroyImageView);
    exports["vkCreateShaderModule"] = Napi::Function::New(env, rawCreateShaderModule);
    exports["vkDestroyShaderModule"] = Napi::Function::New(env, rawDestroyShaderModule);
    exports["vkCreatePipelineCache"] = Napi::Function::New(env, rawCreatePipelineCache);
    exports["vkDestroyPipelineCache"] = Napi::Function::New(env, rawDestroyPipelineCache);
    exports["vkGetPipelineCacheData"] = Napi::Function::New(env, rawGetPipelineCacheData);
    exports["vkMergePipelineCaches"] = Napi::Function::New(env, rawMergePipelineCaches);
    exports["vkCreateGraphicsPipelines"] = Napi::Function::New(env, rawCreateGraphicsPipelines);
    exports["vkCreateComputePipelines"] = Napi::Function::New(env, rawCreateComputePipelines);
#ifdef VK_HUAWEI_subpass_shading
    exports["vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"] = Napi::Function::New(env, rawGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI);
#endif
    exports["vkDestroyPipeline"] = Napi::Function::New(env, rawDestroyPipeline);
    exports["vkCreatePipelineLayout"] = Napi::Function::New(env, rawCreatePipelineLayout);
    exports["vkDestroyPipelineLayout"] = Napi::Function::New(env, rawDestroyPipelineLayout);
    exports["vkCreateSampler"] = Napi::Function::New(env, rawCreateSampler);
    exports["vkDestroySampler"] = Napi::Function::New(env, rawDestroySampler);
    exports["vkCreateDescriptorSetLayout"] = Napi::Function::New(env, rawCreateDescriptorSetLayout);
    exports["vkDestroyDescriptorSetLayout"] = Napi::Function::New(env, rawDestroyDescriptorSetLayout);
    exports["vkCreateDescriptorPool"] = Napi::Function::New(env, rawCreateDescriptorPool);
    exports["vkDestroyDescriptorPool"] = Napi::Function::New(env, rawDestroyDescriptorPool);
    exports["vkResetDescriptorPool"] = Napi::Function::New(env, rawResetDescriptorPool);
    exports["vkAllocateDescriptorSets"] = Napi::Function::New(env, rawAllocateDescriptorSets);
    exports["vkFreeDescriptorSets"] = Napi::Function::New(env, rawFreeDescriptorSets);
    exports["vkUpdateDescriptorSets"] = Napi::Function::New(env, rawUpdateDescriptorSets);
    exports["vkCreateFramebuffer"] = Napi::Function::New(env, rawCreateFramebuffer);
    exports["vkDestroyFramebuffer"] = Napi::Function::New(env, rawDestroyFramebuffer);
    exports["vkCreateRenderPass"] = Napi::Function::New(env, rawCreateRenderPass);
    exports["vkDestroyRenderPass"] = Napi::Function::New(env, rawDestroyRenderPass);
    exports["vkGetRenderAreaGranularity"] = Napi::Function::New(env, rawGetRenderAreaGranularity);
    exports["vkCreateCommandPool"] = Napi::Function::New(env, rawCreateCommandPool);
    exports["vkDestroyCommandPool"] = Napi::Function::New(env, rawDestroyCommandPool);
    exports["vkResetCommandPool"] = Napi::Function::New(env, rawResetCommandPool);
    exports["vkAllocateCommandBuffers"] = Napi::Function::New(env, rawAllocateCommandBuffers);
    exports["vkFreeCommandBuffers"] = Napi::Function::New(env, rawFreeCommandBuffers);
    exports["vkBeginCommandBuffer"] = Napi::Function::New(env, rawBeginCommandBuffer);
    exports["vkEndCommandBuffer"] = Napi::Function::New(env, rawEndCommandBuffer);
    exports["vkResetCommandBuffer"] = Napi::Function::New(env, rawResetCommandBuffer);
    exports["vkCmdBindPipeline"] = Napi::Function::New(env, rawCmdBindPipeline);
    exports["vkCmdSetViewport"] = Napi::Function::New(env, rawCmdSetViewport);
    exports["vkCmdSetScissor"] = Napi::Function::New(env, rawCmdSetScissor);
    exports["vkCmdSetLineWidth"] = Napi::Function::New(env, rawCmdSetLineWidth);
    exports["vkCmdSetDepthBias"] = Napi::Function::New(env, rawCmdSetDepthBias);
    exports["vkCmdSetBlendConstants"] = Napi::Function::New(env, rawCmdSetBlendConstants);
    exports["vkCmdSetDepthBounds"] = Napi::Function::New(env, rawCmdSetDepthBounds);
    exports["vkCmdSetStencilCompareMask"] = Napi::Function::New(env, rawCmdSetStencilCompareMask);
    exports["vkCmdSetStencilWriteMask"] = Napi::Function::New(env, rawCmdSetStencilWriteMask);
    exports["vkCmdSetStencilReference"] = Napi::Function::New(env, rawCmdSetStencilReference);
    exports["vkCmdBindDescriptorSets"] = Napi::Function::New(env, rawCmdBindDescriptorSets);
    exports["vkCmdBindIndexBuffer"] = Napi::Function::New(env, rawCmdBindIndexBuffer);
    exports["vkCmdBindVertexBuffers"] = Napi::Function::New(env, rawCmdBindVertexBuffers);
    exports["vkCmdDraw"] = Napi::Function::New(env, rawCmdDraw);
    exports["vkCmdDrawIndexed"] = Napi::Function::New(env, rawCmdDrawIndexed);
#ifdef VK_EXT_multi_draw
    exports["vkCmdDrawMultiEXT"] = Napi::Function::New(env, rawCmdDrawMultiEXT);
#endif
#ifdef VK_EXT_multi_draw
    exports["vkCmdDrawMultiIndexedEXT"] = Napi::Function::New(env, rawCmdDrawMultiIndexedEXT);
#endif
    exports["vkCmdDrawIndirect"] = Napi::Function::New(env, rawCmdDrawIndirect);
    exports["vkCmdDrawIndexedIndirect"] = Napi::Function::New(env, rawCmdDrawIndexedIndirect);
    exports["vkCmdDispatch"] = Napi::Function::New(env, rawCmdDispatch);
    exports["vkCmdDispatchIndirect"] = Napi::Function::New(env, rawCmdDispatchIndirect);
#ifdef VK_HUAWEI_subpass_shading
    exports["vkCmdSubpassShadingHUAWEI"] = Napi::Function::New(env, rawCmdSubpassShadingHUAWEI);
#endif
    exports["vkCmdCopyBuffer"] = Napi::Function::New(env, rawCmdCopyBuffer);
    exports["vkCmdCopyImage"] = Napi::Function::New(env, rawCmdCopyImage);
    exports["vkCmdBlitImage"] = Napi::Function::New(env, rawCmdBlitImage);
    exports["vkCmdCopyBufferToImage"] = Napi::Function::New(env, rawCmdCopyBufferToImage);
    exports["vkCmdCopyImageToBuffer"] = Napi::Function::New(env, rawCmdCopyImageToBuffer);
#ifdef VK_NV_copy_memory_indirect
    exports["vkCmdCopyMemoryIndirectNV"] = Napi::Function::New(env, rawCmdCopyMemoryIndirectNV);
#endif
#ifdef VK_NV_copy_memory_indirect
    exports["vkCmdCopyMemoryToImageIndirectNV"] = Napi::Function::New(env, rawCmdCopyMemoryToImageIndirectNV);
#endif
    exports["vkCmdUpdateBuffer"] = Napi::Function::New(env, rawCmdUpdateBuffer);
    exports["vkCmdFillBuffer"] = Napi::Function::New(env, rawCmdFillBuffer);
    exports["vkCmdClearColorImage"] = Napi::Function::New(env, rawCmdClearColorImage);
    exports["vkCmdClearDepthStencilImage"] = Napi::Function::New(env, rawCmdClearDepthStencilImage);
    exports["vkCmdClearAttachments"] = Napi::Function::New(env, rawCmdClearAttachments);
    exports["vkCmdResolveImage"] = Napi::Function::New(env, rawCmdResolveImage);
    exports["vkCmdSetEvent"] = Napi::Function::New(env, rawCmdSetEvent);
    exports["vkCmdResetEvent"] = Napi::Function::New(env, rawCmdResetEvent);
    exports["vkCmdWaitEvents"] = Napi::Function::New(env, rawCmdWaitEvents);
    exports["vkCmdPipelineBarrier"] = Napi::Function::New(env, rawCmdPipelineBarrier);
    exports["vkCmdBeginQuery"] = Napi::Function::New(env, rawCmdBeginQuery);
    exports["vkCmdEndQuery"] = Napi::Function::New(env, rawCmdEndQuery);
#ifdef VK_EXT_conditional_rendering
    exports["vkCmdBeginConditionalRenderingEXT"] = Napi::Function::New(env, rawCmdBeginConditionalRenderingEXT);
#endif
#ifdef VK_EXT_conditional_rendering
    exports["vkCmdEndConditionalRenderingEXT"] = Napi::Function::New(env, rawCmdEndConditionalRenderingEXT);
#endif
    exports["vkCmdResetQueryPool"] = Napi::Function::New(env, rawCmdResetQueryPool);
    exports["vkCmdWriteTimestamp"] = Napi::Function::New(env, rawCmdWriteTimestamp);
    exports["vkCmdCopyQueryPoolResults"] = Napi::Function::New(env, rawCmdCopyQueryPoolResults);
    exports["vkCmdPushConstants"] = Napi::Function::New(env, rawCmdPushConstants);
    exports["vkCmdBeginRenderPass"] = Napi::Function::New(env, rawCmdBeginRenderPass);
    exports["vkCmdNextSubpass"] = Napi::Function::New(env, rawCmdNextSubpass);
    exports["vkCmdEndRenderPass"] = Napi::Function::New(env, rawCmdEndRenderPass);
    exports["vkCmdExecuteCommands"] = Napi::Function::New(env, rawCmdExecuteCommands);
#ifdef VK_KHR_android_surface
    exports["vkCreateAndroidSurfaceKHR"] = Napi::Function::New(env, rawCreateAndroidSurfaceKHR);
#endif
#ifdef VK_KHR_display
    exports["vkGetPhysicalDeviceDisplayPropertiesKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceDisplayPropertiesKHR);
#endif
#ifdef VK_KHR_display
    exports["vkGetPhysicalDeviceDisplayPlanePropertiesKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceDisplayPlanePropertiesKHR);
#endif
#ifdef VK_KHR_display
    exports["vkGetDisplayPlaneSupportedDisplaysKHR"] = Napi::Function::New(env, rawGetDisplayPlaneSupportedDisplaysKHR);
#endif
#ifdef VK_KHR_display
    exports["vkGetDisplayModePropertiesKHR"] = Napi::Function::New(env, rawGetDisplayModePropertiesKHR);
#endif
#ifdef VK_KHR_display
    exports["vkCreateDisplayModeKHR"] = Napi::Function::New(env, rawCreateDisplayModeKHR);
#endif
#ifdef VK_KHR_display
    exports["vkGetDisplayPlaneCapabilitiesKHR"] = Napi::Function::New(env, rawGetDisplayPlaneCapabilitiesKHR);
#endif
#ifdef VK_KHR_display
    exports["vkCreateDisplayPlaneSurfaceKHR"] = Napi::Function::New(env, rawCreateDisplayPlaneSurfaceKHR);
#endif
#ifdef VK_KHR_display_swapchain
    exports["vkCreateSharedSwapchainsKHR"] = Napi::Function::New(env, rawCreateSharedSwapchainsKHR);
#endif
#ifdef VK_KHR_surface
    exports["vkDestroySurfaceKHR"] = Napi::Function::New(env, rawDestroySurfaceKHR);
#endif
#ifdef VK_KHR_surface
    exports["vkGetPhysicalDeviceSurfaceSupportKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceSurfaceSupportKHR);
#endif
#ifdef VK_KHR_surface
    exports["vkGetPhysicalDeviceSurfaceCapabilitiesKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceSurfaceCapabilitiesKHR);
#endif
#ifdef VK_KHR_surface
    exports["vkGetPhysicalDeviceSurfaceFormatsKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceSurfaceFormatsKHR);
#endif
#ifdef VK_KHR_surface
    exports["vkGetPhysicalDeviceSurfacePresentModesKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceSurfacePresentModesKHR);
#endif
#ifdef VK_KHR_swapchain
    exports["vkCreateSwapchainKHR"] = Napi::Function::New(env, rawCreateSwapchainKHR);
#endif
#ifdef VK_KHR_swapchain
    exports["vkDestroySwapchainKHR"] = Napi::Function::New(env, rawDestroySwapchainKHR);
#endif
#ifdef VK_KHR_swapchain
    exports["vkGetSwapchainImagesKHR"] = Napi::Function::New(env, rawGetSwapchainImagesKHR);
#endif
#ifdef VK_KHR_swapchain
    exports["vkAcquireNextImageKHR"] = Napi::Function::New(env, rawAcquireNextImageKHR);
#endif
#ifdef VK_KHR_swapchain
    exports["vkQueuePresentKHR"] = Napi::Function::New(env, rawQueuePresentKHR);
#endif
#ifdef VK_NN_vi_surface
    exports["vkCreateViSurfaceNN"] = Napi::Function::New(env, rawCreateViSurfaceNN);
#endif
#ifdef VK_KHR_wayland_surface
    exports["vkCreateWaylandSurfaceKHR"] = Napi::Function::New(env, rawCreateWaylandSurfaceKHR);
#endif
#ifdef VK_KHR_wayland_surface
    exports["vkGetPhysicalDeviceWaylandPresentationSupportKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceWaylandPresentationSupportKHR);
#endif
#ifdef VK_KHR_win32_surface
    exports["vkCreateWin32SurfaceKHR"] = Napi::Function::New(env, rawCreateWin32SurfaceKHR);
#endif
#ifdef VK_KHR_win32_surface
    exports["vkGetPhysicalDeviceWin32PresentationSupportKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceWin32PresentationSupportKHR);
#endif
#ifdef VK_KHR_xlib_surface
    exports["vkCreateXlibSurfaceKHR"] = Napi::Function::New(env, rawCreateXlibSurfaceKHR);
#endif
#ifdef VK_KHR_xlib_surface
    exports["vkGetPhysicalDeviceXlibPresentationSupportKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceXlibPresentationSupportKHR);
#endif
#ifdef VK_KHR_xcb_surface
    exports["vkCreateXcbSurfaceKHR"] = Napi::Function::New(env, rawCreateXcbSurfaceKHR);
#endif
#ifdef VK_KHR_xcb_surface
    exports["vkGetPhysicalDeviceXcbPresentationSupportKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceXcbPresentationSupportKHR);
#endif
#ifdef VK_EXT_directfb_surface
    exports["vkCreateDirectFBSurfaceEXT"] = Napi::Function::New(env, rawCreateDirectFBSurfaceEXT);
#endif
#ifdef VK_EXT_directfb_surface
    exports["vkGetPhysicalDeviceDirectFBPresentationSupportEXT"] = Napi::Function::New(env, rawGetPhysicalDeviceDirectFBPresentationSupportEXT);
#endif
#ifdef VK_FUCHSIA_imagepipe_surface
    exports["vkCreateImagePipeSurfaceFUCHSIA"] = Napi::Function::New(env, rawCreateImagePipeSurfaceFUCHSIA);
#endif
#ifdef VK_GGP_stream_descriptor_surface
    exports["vkCreateStreamDescriptorSurfaceGGP"] = Napi::Function::New(env, rawCreateStreamDescriptorSurfaceGGP);
#endif
#ifdef VK_QNX_screen_surface
    exports["vkCreateScreenSurfaceQNX"] = Napi::Function::New(env, rawCreateScreenSurfaceQNX);
#endif
#ifdef VK_QNX_screen_surface
    exports["vkGetPhysicalDeviceScreenPresentationSupportQNX"] = Napi::Function::New(env, rawGetPhysicalDeviceScreenPresentationSupportQNX);
#endif
#ifdef VK_EXT_debug_report
    exports["vkCreateDebugReportCallbackEXT"] = Napi::Function::New(env, rawCreateDebugReportCallbackEXT);
#endif
#ifdef VK_EXT_debug_report
    exports["vkDestroyDebugReportCallbackEXT"] = Napi::Function::New(env, rawDestroyDebugReportCallbackEXT);
#endif
#ifdef VK_EXT_debug_report
    exports["vkDebugReportMessageEXT"] = Napi::Function::New(env, rawDebugReportMessageEXT);
#endif
#ifdef VK_EXT_debug_marker
    exports["vkDebugMarkerSetObjectNameEXT"] = Napi::Function::New(env, rawDebugMarkerSetObjectNameEXT);
#endif
#ifdef VK_EXT_debug_marker
    exports["vkDebugMarkerSetObjectTagEXT"] = Napi::Function::New(env, rawDebugMarkerSetObjectTagEXT);
#endif
#ifdef VK_EXT_debug_marker
    exports["vkCmdDebugMarkerBeginEXT"] = Napi::Function::New(env, rawCmdDebugMarkerBeginEXT);
#endif
#ifdef VK_EXT_debug_marker
    exports["vkCmdDebugMarkerEndEXT"] = Napi::Function::New(env, rawCmdDebugMarkerEndEXT);
#endif
#ifdef VK_EXT_debug_marker
    exports["vkCmdDebugMarkerInsertEXT"] = Napi::Function::New(env, rawCmdDebugMarkerInsertEXT);
#endif
#ifdef VK_NV_external_memory_capabilities
    exports["vkGetPhysicalDeviceExternalImageFormatPropertiesNV"] = Napi::Function::New(env, rawGetPhysicalDeviceExternalImageFormatPropertiesNV);
#endif
#ifdef VK_NV_external_memory_win32
    exports["vkGetMemoryWin32HandleNV"] = Napi::Function::New(env, rawGetMemoryWin32HandleNV);
#endif
#ifdef VK_NV_device_generated_commands
    exports["vkCmdExecuteGeneratedCommandsNV"] = Napi::Function::New(env, rawCmdExecuteGeneratedCommandsNV);
#endif
#ifdef VK_NV_device_generated_commands
    exports["vkCmdPreprocessGeneratedCommandsNV"] = Napi::Function::New(env, rawCmdPreprocessGeneratedCommandsNV);
#endif
#ifdef VK_NV_device_generated_commands
    exports["vkCmdBindPipelineShaderGroupNV"] = Napi::Function::New(env, rawCmdBindPipelineShaderGroupNV);
#endif
#ifdef VK_NV_device_generated_commands
    exports["vkGetGeneratedCommandsMemoryRequirementsNV"] = Napi::Function::New(env, rawGetGeneratedCommandsMemoryRequirementsNV);
#endif
#ifdef VK_NV_device_generated_commands
    exports["vkCreateIndirectCommandsLayoutNV"] = Napi::Function::New(env, rawCreateIndirectCommandsLayoutNV);
#endif
#ifdef VK_NV_device_generated_commands
    exports["vkDestroyIndirectCommandsLayoutNV"] = Napi::Function::New(env, rawDestroyIndirectCommandsLayoutNV);
#endif
    exports["vkGetPhysicalDeviceFeatures2"] = Napi::Function::New(env, rawGetPhysicalDeviceFeatures2);
    exports["vkGetPhysicalDeviceProperties2"] = Napi::Function::New(env, rawGetPhysicalDeviceProperties2);
    exports["vkGetPhysicalDeviceFormatProperties2"] = Napi::Function::New(env, rawGetPhysicalDeviceFormatProperties2);
    exports["vkGetPhysicalDeviceImageFormatProperties2"] = Napi::Function::New(env, rawGetPhysicalDeviceImageFormatProperties2);
    exports["vkGetPhysicalDeviceQueueFamilyProperties2"] = Napi::Function::New(env, rawGetPhysicalDeviceQueueFamilyProperties2);
    exports["vkGetPhysicalDeviceMemoryProperties2"] = Napi::Function::New(env, rawGetPhysicalDeviceMemoryProperties2);
    exports["vkGetPhysicalDeviceSparseImageFormatProperties2"] = Napi::Function::New(env, rawGetPhysicalDeviceSparseImageFormatProperties2);
#ifdef VK_KHR_push_descriptor
    exports["vkCmdPushDescriptorSetKHR"] = Napi::Function::New(env, rawCmdPushDescriptorSetKHR);
#endif
    exports["vkTrimCommandPool"] = Napi::Function::New(env, rawTrimCommandPool);
    exports["vkGetPhysicalDeviceExternalBufferProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceExternalBufferProperties);
#ifdef VK_KHR_external_memory_win32
    exports["vkGetMemoryWin32HandleKHR"] = Napi::Function::New(env, rawGetMemoryWin32HandleKHR);
#endif
#ifdef VK_KHR_external_memory_win32
    exports["vkGetMemoryWin32HandlePropertiesKHR"] = Napi::Function::New(env, rawGetMemoryWin32HandlePropertiesKHR);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["vkGetMemoryFdKHR"] = Napi::Function::New(env, rawGetMemoryFdKHR);
#endif
#ifdef VK_KHR_external_memory_fd
    exports["vkGetMemoryFdPropertiesKHR"] = Napi::Function::New(env, rawGetMemoryFdPropertiesKHR);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["vkGetMemoryZirconHandleFUCHSIA"] = Napi::Function::New(env, rawGetMemoryZirconHandleFUCHSIA);
#endif
#ifdef VK_FUCHSIA_external_memory
    exports["vkGetMemoryZirconHandlePropertiesFUCHSIA"] = Napi::Function::New(env, rawGetMemoryZirconHandlePropertiesFUCHSIA);
#endif
#ifdef VK_NV_external_memory_rdma
    exports["vkGetMemoryRemoteAddressNV"] = Napi::Function::New(env, rawGetMemoryRemoteAddressNV);
#endif
    exports["vkGetPhysicalDeviceExternalSemaphoreProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceExternalSemaphoreProperties);
#ifdef VK_KHR_external_semaphore_win32
    exports["vkGetSemaphoreWin32HandleKHR"] = Napi::Function::New(env, rawGetSemaphoreWin32HandleKHR);
#endif
#ifdef VK_KHR_external_semaphore_win32
    exports["vkImportSemaphoreWin32HandleKHR"] = Napi::Function::New(env, rawImportSemaphoreWin32HandleKHR);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["vkGetSemaphoreFdKHR"] = Napi::Function::New(env, rawGetSemaphoreFdKHR);
#endif
#ifdef VK_KHR_external_semaphore_fd
    exports["vkImportSemaphoreFdKHR"] = Napi::Function::New(env, rawImportSemaphoreFdKHR);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["vkGetSemaphoreZirconHandleFUCHSIA"] = Napi::Function::New(env, rawGetSemaphoreZirconHandleFUCHSIA);
#endif
#ifdef VK_FUCHSIA_external_semaphore
    exports["vkImportSemaphoreZirconHandleFUCHSIA"] = Napi::Function::New(env, rawImportSemaphoreZirconHandleFUCHSIA);
#endif
    exports["vkGetPhysicalDeviceExternalFenceProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceExternalFenceProperties);
#ifdef VK_KHR_external_fence_win32
    exports["vkGetFenceWin32HandleKHR"] = Napi::Function::New(env, rawGetFenceWin32HandleKHR);
#endif
#ifdef VK_KHR_external_fence_win32
    exports["vkImportFenceWin32HandleKHR"] = Napi::Function::New(env, rawImportFenceWin32HandleKHR);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["vkGetFenceFdKHR"] = Napi::Function::New(env, rawGetFenceFdKHR);
#endif
#ifdef VK_KHR_external_fence_fd
    exports["vkImportFenceFdKHR"] = Napi::Function::New(env, rawImportFenceFdKHR);
#endif
#ifdef VK_EXT_direct_mode_display
    exports["vkReleaseDisplayEXT"] = Napi::Function::New(env, rawReleaseDisplayEXT);
#endif
#ifdef VK_EXT_acquire_xlib_display
    exports["vkAcquireXlibDisplayEXT"] = Napi::Function::New(env, rawAcquireXlibDisplayEXT);
#endif
#ifdef VK_EXT_acquire_xlib_display
    exports["vkGetRandROutputDisplayEXT"] = Napi::Function::New(env, rawGetRandROutputDisplayEXT);
#endif
#ifdef VK_NV_acquire_winrt_display
    exports["vkAcquireWinrtDisplayNV"] = Napi::Function::New(env, rawAcquireWinrtDisplayNV);
#endif
#ifdef VK_NV_acquire_winrt_display
    exports["vkGetWinrtDisplayNV"] = Napi::Function::New(env, rawGetWinrtDisplayNV);
#endif
#ifdef VK_EXT_display_control
    exports["vkDisplayPowerControlEXT"] = Napi::Function::New(env, rawDisplayPowerControlEXT);
#endif
#ifdef VK_EXT_display_control
    exports["vkRegisterDeviceEventEXT"] = Napi::Function::New(env, rawRegisterDeviceEventEXT);
#endif
#ifdef VK_EXT_display_control
    exports["vkRegisterDisplayEventEXT"] = Napi::Function::New(env, rawRegisterDisplayEventEXT);
#endif
#ifdef VK_EXT_display_control
    exports["vkGetSwapchainCounterEXT"] = Napi::Function::New(env, rawGetSwapchainCounterEXT);
#endif
#ifdef VK_EXT_display_surface_counter
    exports["vkGetPhysicalDeviceSurfaceCapabilities2EXT"] = Napi::Function::New(env, rawGetPhysicalDeviceSurfaceCapabilities2EXT);
#endif
    exports["vkEnumeratePhysicalDeviceGroups"] = Napi::Function::New(env, rawEnumeratePhysicalDeviceGroups);
    exports["vkGetDeviceGroupPeerMemoryFeatures"] = Napi::Function::New(env, rawGetDeviceGroupPeerMemoryFeatures);
    exports["vkBindBufferMemory2"] = Napi::Function::New(env, rawBindBufferMemory2);
    exports["vkBindImageMemory2"] = Napi::Function::New(env, rawBindImageMemory2);
    exports["vkCmdSetDeviceMask"] = Napi::Function::New(env, rawCmdSetDeviceMask);
#ifdef VK_KHR_device_group
    exports["vkGetDeviceGroupPresentCapabilitiesKHR"] = Napi::Function::New(env, rawGetDeviceGroupPresentCapabilitiesKHR);
#endif
#ifdef VK_KHR_device_group
    exports["vkGetDeviceGroupSurfacePresentModesKHR"] = Napi::Function::New(env, rawGetDeviceGroupSurfacePresentModesKHR);
#endif
#ifdef VK_KHR_device_group
    exports["vkAcquireNextImage2KHR"] = Napi::Function::New(env, rawAcquireNextImage2KHR);
#endif
    exports["vkCmdDispatchBase"] = Napi::Function::New(env, rawCmdDispatchBase);
#ifdef VK_KHR_device_group
    exports["vkGetPhysicalDevicePresentRectanglesKHR"] = Napi::Function::New(env, rawGetPhysicalDevicePresentRectanglesKHR);
#endif
    exports["vkCreateDescriptorUpdateTemplate"] = Napi::Function::New(env, rawCreateDescriptorUpdateTemplate);
    exports["vkDestroyDescriptorUpdateTemplate"] = Napi::Function::New(env, rawDestroyDescriptorUpdateTemplate);
    exports["vkUpdateDescriptorSetWithTemplate"] = Napi::Function::New(env, rawUpdateDescriptorSetWithTemplate);
#ifdef VK_KHR_descriptor_update_template
    exports["vkCmdPushDescriptorSetWithTemplateKHR"] = Napi::Function::New(env, rawCmdPushDescriptorSetWithTemplateKHR);
#endif
#ifdef VK_EXT_hdr_metadata
    exports["vkSetHdrMetadataEXT"] = Napi::Function::New(env, rawSetHdrMetadataEXT);
#endif
#ifdef VK_KHR_shared_presentable_image
    exports["vkGetSwapchainStatusKHR"] = Napi::Function::New(env, rawGetSwapchainStatusKHR);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["vkGetRefreshCycleDurationGOOGLE"] = Napi::Function::New(env, rawGetRefreshCycleDurationGOOGLE);
#endif
#ifdef VK_GOOGLE_display_timing
    exports["vkGetPastPresentationTimingGOOGLE"] = Napi::Function::New(env, rawGetPastPresentationTimingGOOGLE);
#endif
#ifdef VK_MVK_ios_surface
    exports["vkCreateIOSSurfaceMVK"] = Napi::Function::New(env, rawCreateIOSSurfaceMVK);
#endif
#ifdef VK_MVK_macos_surface
    exports["vkCreateMacOSSurfaceMVK"] = Napi::Function::New(env, rawCreateMacOSSurfaceMVK);
#endif
#ifdef VK_EXT_metal_surface
    exports["vkCreateMetalSurfaceEXT"] = Napi::Function::New(env, rawCreateMetalSurfaceEXT);
#endif
#ifdef VK_NV_clip_space_w_scaling
    exports["vkCmdSetViewportWScalingNV"] = Napi::Function::New(env, rawCmdSetViewportWScalingNV);
#endif
#ifdef VK_EXT_discard_rectangles
    exports["vkCmdSetDiscardRectangleEXT"] = Napi::Function::New(env, rawCmdSetDiscardRectangleEXT);
#endif
#ifdef VK_EXT_sample_locations
    exports["vkCmdSetSampleLocationsEXT"] = Napi::Function::New(env, rawCmdSetSampleLocationsEXT);
#endif
#ifdef VK_EXT_sample_locations
    exports["vkGetPhysicalDeviceMultisamplePropertiesEXT"] = Napi::Function::New(env, rawGetPhysicalDeviceMultisamplePropertiesEXT);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["vkGetPhysicalDeviceSurfaceCapabilities2KHR"] = Napi::Function::New(env, rawGetPhysicalDeviceSurfaceCapabilities2KHR);
#endif
#ifdef VK_KHR_get_surface_capabilities2
    exports["vkGetPhysicalDeviceSurfaceFormats2KHR"] = Napi::Function::New(env, rawGetPhysicalDeviceSurfaceFormats2KHR);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["vkGetPhysicalDeviceDisplayProperties2KHR"] = Napi::Function::New(env, rawGetPhysicalDeviceDisplayProperties2KHR);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["vkGetPhysicalDeviceDisplayPlaneProperties2KHR"] = Napi::Function::New(env, rawGetPhysicalDeviceDisplayPlaneProperties2KHR);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["vkGetDisplayModeProperties2KHR"] = Napi::Function::New(env, rawGetDisplayModeProperties2KHR);
#endif
#ifdef VK_KHR_get_display_properties2
    exports["vkGetDisplayPlaneCapabilities2KHR"] = Napi::Function::New(env, rawGetDisplayPlaneCapabilities2KHR);
#endif
    exports["vkGetBufferMemoryRequirements2"] = Napi::Function::New(env, rawGetBufferMemoryRequirements2);
    exports["vkGetImageMemoryRequirements2"] = Napi::Function::New(env, rawGetImageMemoryRequirements2);
    exports["vkGetImageSparseMemoryRequirements2"] = Napi::Function::New(env, rawGetImageSparseMemoryRequirements2);
    exports["vkGetDeviceBufferMemoryRequirements"] = Napi::Function::New(env, rawGetDeviceBufferMemoryRequirements);
    exports["vkGetDeviceImageMemoryRequirements"] = Napi::Function::New(env, rawGetDeviceImageMemoryRequirements);
    exports["vkGetDeviceImageSparseMemoryRequirements"] = Napi::Function::New(env, rawGetDeviceImageSparseMemoryRequirements);
    exports["vkCreateSamplerYcbcrConversion"] = Napi::Function::New(env, rawCreateSamplerYcbcrConversion);
    exports["vkDestroySamplerYcbcrConversion"] = Napi::Function::New(env, rawDestroySamplerYcbcrConversion);
    exports["vkGetDeviceQueue2"] = Napi::Function::New(env, rawGetDeviceQueue2);
#ifdef VK_EXT_validation_cache
    exports["vkCreateValidationCacheEXT"] = Napi::Function::New(env, rawCreateValidationCacheEXT);
#endif
#ifdef VK_EXT_validation_cache
    exports["vkDestroyValidationCacheEXT"] = Napi::Function::New(env, rawDestroyValidationCacheEXT);
#endif
#ifdef VK_EXT_validation_cache
    exports["vkGetValidationCacheDataEXT"] = Napi::Function::New(env, rawGetValidationCacheDataEXT);
#endif
#ifdef VK_EXT_validation_cache
    exports["vkMergeValidationCachesEXT"] = Napi::Function::New(env, rawMergeValidationCachesEXT);
#endif
    exports["vkGetDescriptorSetLayoutSupport"] = Napi::Function::New(env, rawGetDescriptorSetLayoutSupport);
#ifdef VK_ANDROID_native_buffer
    exports["vkGetSwapchainGrallocUsageANDROID"] = Napi::Function::New(env, rawGetSwapchainGrallocUsageANDROID);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["vkGetSwapchainGrallocUsage2ANDROID"] = Napi::Function::New(env, rawGetSwapchainGrallocUsage2ANDROID);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["vkAcquireImageANDROID"] = Napi::Function::New(env, rawAcquireImageANDROID);
#endif
#ifdef VK_ANDROID_native_buffer
    exports["vkQueueSignalReleaseImageANDROID"] = Napi::Function::New(env, rawQueueSignalReleaseImageANDROID);
#endif
#ifdef VK_AMD_shader_info
    exports["vkGetShaderInfoAMD"] = Napi::Function::New(env, rawGetShaderInfoAMD);
#endif
#ifdef VK_AMD_display_native_hdr
    exports["vkSetLocalDimmingAMD"] = Napi::Function::New(env, rawSetLocalDimmingAMD);
#endif
#ifdef VK_EXT_calibrated_timestamps
    exports["vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"] = Napi::Function::New(env, rawGetPhysicalDeviceCalibrateableTimeDomainsEXT);
#endif
#ifdef VK_EXT_calibrated_timestamps
    exports["vkGetCalibratedTimestampsEXT"] = Napi::Function::New(env, rawGetCalibratedTimestampsEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkSetDebugUtilsObjectNameEXT"] = Napi::Function::New(env, rawSetDebugUtilsObjectNameEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkSetDebugUtilsObjectTagEXT"] = Napi::Function::New(env, rawSetDebugUtilsObjectTagEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkQueueBeginDebugUtilsLabelEXT"] = Napi::Function::New(env, rawQueueBeginDebugUtilsLabelEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkQueueEndDebugUtilsLabelEXT"] = Napi::Function::New(env, rawQueueEndDebugUtilsLabelEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkQueueInsertDebugUtilsLabelEXT"] = Napi::Function::New(env, rawQueueInsertDebugUtilsLabelEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkCmdBeginDebugUtilsLabelEXT"] = Napi::Function::New(env, rawCmdBeginDebugUtilsLabelEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkCmdEndDebugUtilsLabelEXT"] = Napi::Function::New(env, rawCmdEndDebugUtilsLabelEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkCmdInsertDebugUtilsLabelEXT"] = Napi::Function::New(env, rawCmdInsertDebugUtilsLabelEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkCreateDebugUtilsMessengerEXT"] = Napi::Function::New(env, rawCreateDebugUtilsMessengerEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkDestroyDebugUtilsMessengerEXT"] = Napi::Function::New(env, rawDestroyDebugUtilsMessengerEXT);
#endif
#ifdef VK_EXT_debug_utils
    exports["vkSubmitDebugUtilsMessageEXT"] = Napi::Function::New(env, rawSubmitDebugUtilsMessageEXT);
#endif
#ifdef VK_EXT_external_memory_host
    exports["vkGetMemoryHostPointerPropertiesEXT"] = Napi::Function::New(env, rawGetMemoryHostPointerPropertiesEXT);
#endif
#ifdef VK_AMD_buffer_marker
    exports["vkCmdWriteBufferMarkerAMD"] = Napi::Function::New(env, rawCmdWriteBufferMarkerAMD);
#endif
    exports["vkCreateRenderPass2"] = Napi::Function::New(env, rawCreateRenderPass2);
    exports["vkCmdBeginRenderPass2"] = Napi::Function::New(env, rawCmdBeginRenderPass2);
    exports["vkCmdNextSubpass2"] = Napi::Function::New(env, rawCmdNextSubpass2);
    exports["vkCmdEndRenderPass2"] = Napi::Function::New(env, rawCmdEndRenderPass2);
    exports["vkGetSemaphoreCounterValue"] = Napi::Function::New(env, rawGetSemaphoreCounterValue);
    exports["vkWaitSemaphores"] = Napi::Function::New(env, rawWaitSemaphores);
    exports["vkSignalSemaphore"] = Napi::Function::New(env, rawSignalSemaphore);
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["vkGetAndroidHardwareBufferPropertiesANDROID"] = Napi::Function::New(env, rawGetAndroidHardwareBufferPropertiesANDROID);
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
    exports["vkGetMemoryAndroidHardwareBufferANDROID"] = Napi::Function::New(env, rawGetMemoryAndroidHardwareBufferANDROID);
#endif
    exports["vkCmdDrawIndirectCount"] = Napi::Function::New(env, rawCmdDrawIndirectCount);
    exports["vkCmdDrawIndexedIndirectCount"] = Napi::Function::New(env, rawCmdDrawIndexedIndirectCount);
#ifdef VK_NV_device_diagnostic_checkpoints
    exports["vkCmdSetCheckpointNV"] = Napi::Function::New(env, rawCmdSetCheckpointNV);
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
    exports["vkGetQueueCheckpointDataNV"] = Napi::Function::New(env, rawGetQueueCheckpointDataNV);
#endif
#ifdef VK_EXT_transform_feedback
    exports["vkCmdBindTransformFeedbackBuffersEXT"] = Napi::Function::New(env, rawCmdBindTransformFeedbackBuffersEXT);
#endif
#ifdef VK_EXT_transform_feedback
    exports["vkCmdBeginTransformFeedbackEXT"] = Napi::Function::New(env, rawCmdBeginTransformFeedbackEXT);
#endif
#ifdef VK_EXT_transform_feedback
    exports["vkCmdEndTransformFeedbackEXT"] = Napi::Function::New(env, rawCmdEndTransformFeedbackEXT);
#endif
#ifdef VK_EXT_transform_feedback
    exports["vkCmdBeginQueryIndexedEXT"] = Napi::Function::New(env, rawCmdBeginQueryIndexedEXT);
#endif
#ifdef VK_EXT_transform_feedback
    exports["vkCmdEndQueryIndexedEXT"] = Napi::Function::New(env, rawCmdEndQueryIndexedEXT);
#endif
#ifdef VK_EXT_transform_feedback
    exports["vkCmdDrawIndirectByteCountEXT"] = Napi::Function::New(env, rawCmdDrawIndirectByteCountEXT);
#endif
#ifdef VK_NV_scissor_exclusive
    exports["vkCmdSetExclusiveScissorNV"] = Napi::Function::New(env, rawCmdSetExclusiveScissorNV);
#endif
#ifdef VK_NV_shading_rate_image
    exports["vkCmdBindShadingRateImageNV"] = Napi::Function::New(env, rawCmdBindShadingRateImageNV);
#endif
#ifdef VK_NV_shading_rate_image
    exports["vkCmdSetViewportShadingRatePaletteNV"] = Napi::Function::New(env, rawCmdSetViewportShadingRatePaletteNV);
#endif
#ifdef VK_NV_shading_rate_image
    exports["vkCmdSetCoarseSampleOrderNV"] = Napi::Function::New(env, rawCmdSetCoarseSampleOrderNV);
#endif
#ifdef VK_NV_mesh_shader
    exports["vkCmdDrawMeshTasksNV"] = Napi::Function::New(env, rawCmdDrawMeshTasksNV);
#endif
#ifdef VK_NV_mesh_shader
    exports["vkCmdDrawMeshTasksIndirectNV"] = Napi::Function::New(env, rawCmdDrawMeshTasksIndirectNV);
#endif
#ifdef VK_NV_mesh_shader
    exports["vkCmdDrawMeshTasksIndirectCountNV"] = Napi::Function::New(env, rawCmdDrawMeshTasksIndirectCountNV);
#endif
#ifdef VK_EXT_mesh_shader
    exports["vkCmdDrawMeshTasksEXT"] = Napi::Function::New(env, rawCmdDrawMeshTasksEXT);
#endif
#ifdef VK_EXT_mesh_shader
    exports["vkCmdDrawMeshTasksIndirectEXT"] = Napi::Function::New(env, rawCmdDrawMeshTasksIndirectEXT);
#endif
#ifdef VK_EXT_mesh_shader
    exports["vkCmdDrawMeshTasksIndirectCountEXT"] = Napi::Function::New(env, rawCmdDrawMeshTasksIndirectCountEXT);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkCompileDeferredNV"] = Napi::Function::New(env, rawCompileDeferredNV);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkCreateAccelerationStructureNV"] = Napi::Function::New(env, rawCreateAccelerationStructureNV);
#endif
#ifdef VK_HUAWEI_invocation_mask
    exports["vkCmdBindInvocationMaskHUAWEI"] = Napi::Function::New(env, rawCmdBindInvocationMaskHUAWEI);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkDestroyAccelerationStructureKHR"] = Napi::Function::New(env, rawDestroyAccelerationStructureKHR);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkDestroyAccelerationStructureNV"] = Napi::Function::New(env, rawDestroyAccelerationStructureNV);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkGetAccelerationStructureMemoryRequirementsNV"] = Napi::Function::New(env, rawGetAccelerationStructureMemoryRequirementsNV);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkBindAccelerationStructureMemoryNV"] = Napi::Function::New(env, rawBindAccelerationStructureMemoryNV);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkCmdCopyAccelerationStructureNV"] = Napi::Function::New(env, rawCmdCopyAccelerationStructureNV);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkCmdCopyAccelerationStructureKHR"] = Napi::Function::New(env, rawCmdCopyAccelerationStructureKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkCopyAccelerationStructureKHR"] = Napi::Function::New(env, rawCopyAccelerationStructureKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkCmdCopyAccelerationStructureToMemoryKHR"] = Napi::Function::New(env, rawCmdCopyAccelerationStructureToMemoryKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkCopyAccelerationStructureToMemoryKHR"] = Napi::Function::New(env, rawCopyAccelerationStructureToMemoryKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkCmdCopyMemoryToAccelerationStructureKHR"] = Napi::Function::New(env, rawCmdCopyMemoryToAccelerationStructureKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkCopyMemoryToAccelerationStructureKHR"] = Napi::Function::New(env, rawCopyMemoryToAccelerationStructureKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkCmdWriteAccelerationStructuresPropertiesKHR"] = Napi::Function::New(env, rawCmdWriteAccelerationStructuresPropertiesKHR);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkCmdWriteAccelerationStructuresPropertiesNV"] = Napi::Function::New(env, rawCmdWriteAccelerationStructuresPropertiesNV);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkCmdBuildAccelerationStructureNV"] = Napi::Function::New(env, rawCmdBuildAccelerationStructureNV);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkWriteAccelerationStructuresPropertiesKHR"] = Napi::Function::New(env, rawWriteAccelerationStructuresPropertiesKHR);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["vkCmdTraceRaysKHR"] = Napi::Function::New(env, rawCmdTraceRaysKHR);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkCmdTraceRaysNV"] = Napi::Function::New(env, rawCmdTraceRaysNV);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["vkGetRayTracingShaderGroupHandlesKHR"] = Napi::Function::New(env, rawGetRayTracingShaderGroupHandlesKHR);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"] = Napi::Function::New(env, rawGetRayTracingCaptureReplayShaderGroupHandlesKHR);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkGetAccelerationStructureHandleNV"] = Napi::Function::New(env, rawGetAccelerationStructureHandleNV);
#endif
#ifdef VK_NV_ray_tracing
    exports["vkCreateRayTracingPipelinesNV"] = Napi::Function::New(env, rawCreateRayTracingPipelinesNV);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["vkCreateRayTracingPipelinesKHR"] = Napi::Function::New(env, rawCreateRayTracingPipelinesKHR);
#endif
#ifdef VK_NV_cooperative_matrix
    exports["vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"] = Napi::Function::New(env, rawGetPhysicalDeviceCooperativeMatrixPropertiesNV);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["vkCmdTraceRaysIndirectKHR"] = Napi::Function::New(env, rawCmdTraceRaysIndirectKHR);
#endif
#ifdef VK_KHR_ray_tracing_maintenance1
    exports["vkCmdTraceRaysIndirect2KHR"] = Napi::Function::New(env, rawCmdTraceRaysIndirect2KHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkGetDeviceAccelerationStructureCompatibilityKHR"] = Napi::Function::New(env, rawGetDeviceAccelerationStructureCompatibilityKHR);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["vkGetRayTracingShaderGroupStackSizeKHR"] = Napi::Function::New(env, rawGetRayTracingShaderGroupStackSizeKHR);
#endif
#ifdef VK_KHR_ray_tracing_pipeline
    exports["vkCmdSetRayTracingPipelineStackSizeKHR"] = Napi::Function::New(env, rawCmdSetRayTracingPipelineStackSizeKHR);
#endif
#ifdef VK_NVX_image_view_handle
    exports["vkGetImageViewHandleNVX"] = Napi::Function::New(env, rawGetImageViewHandleNVX);
#endif
#ifdef VK_NVX_image_view_handle
    exports["vkGetImageViewAddressNVX"] = Napi::Function::New(env, rawGetImageViewAddressNVX);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["vkGetPhysicalDeviceSurfacePresentModes2EXT"] = Napi::Function::New(env, rawGetPhysicalDeviceSurfacePresentModes2EXT);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["vkGetDeviceGroupSurfacePresentModes2EXT"] = Napi::Function::New(env, rawGetDeviceGroupSurfacePresentModes2EXT);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["vkAcquireFullScreenExclusiveModeEXT"] = Napi::Function::New(env, rawAcquireFullScreenExclusiveModeEXT);
#endif
#ifdef VK_EXT_full_screen_exclusive
    exports["vkReleaseFullScreenExclusiveModeEXT"] = Napi::Function::New(env, rawReleaseFullScreenExclusiveModeEXT);
#endif
#ifdef VK_KHR_performance_query
    exports["vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"] = Napi::Function::New(env, rawEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR);
#endif
#ifdef VK_KHR_performance_query
    exports["vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR);
#endif
#ifdef VK_KHR_performance_query
    exports["vkAcquireProfilingLockKHR"] = Napi::Function::New(env, rawAcquireProfilingLockKHR);
#endif
#ifdef VK_KHR_performance_query
    exports["vkReleaseProfilingLockKHR"] = Napi::Function::New(env, rawReleaseProfilingLockKHR);
#endif
#ifdef VK_EXT_image_drm_format_modifier
    exports["vkGetImageDrmFormatModifierPropertiesEXT"] = Napi::Function::New(env, rawGetImageDrmFormatModifierPropertiesEXT);
#endif
    exports["vkGetBufferOpaqueCaptureAddress"] = Napi::Function::New(env, rawGetBufferOpaqueCaptureAddress);
    exports["vkGetBufferDeviceAddress"] = Napi::Function::New(env, rawGetBufferDeviceAddress);
#ifdef VK_EXT_headless_surface
    exports["vkCreateHeadlessSurfaceEXT"] = Napi::Function::New(env, rawCreateHeadlessSurfaceEXT);
#endif
#ifdef VK_NV_coverage_reduction_mode
    exports["vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"] = Napi::Function::New(env, rawGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV);
#endif
#ifdef VK_INTEL_performance_query
    exports["vkInitializePerformanceApiINTEL"] = Napi::Function::New(env, rawInitializePerformanceApiINTEL);
#endif
#ifdef VK_INTEL_performance_query
    exports["vkUninitializePerformanceApiINTEL"] = Napi::Function::New(env, rawUninitializePerformanceApiINTEL);
#endif
#ifdef VK_INTEL_performance_query
    exports["vkCmdSetPerformanceMarkerINTEL"] = Napi::Function::New(env, rawCmdSetPerformanceMarkerINTEL);
#endif
#ifdef VK_INTEL_performance_query
    exports["vkCmdSetPerformanceStreamMarkerINTEL"] = Napi::Function::New(env, rawCmdSetPerformanceStreamMarkerINTEL);
#endif
#ifdef VK_INTEL_performance_query
    exports["vkCmdSetPerformanceOverrideINTEL"] = Napi::Function::New(env, rawCmdSetPerformanceOverrideINTEL);
#endif
#ifdef VK_INTEL_performance_query
    exports["vkAcquirePerformanceConfigurationINTEL"] = Napi::Function::New(env, rawAcquirePerformanceConfigurationINTEL);
#endif
#ifdef VK_INTEL_performance_query
    exports["vkReleasePerformanceConfigurationINTEL"] = Napi::Function::New(env, rawReleasePerformanceConfigurationINTEL);
#endif
#ifdef VK_INTEL_performance_query
    exports["vkQueueSetPerformanceConfigurationINTEL"] = Napi::Function::New(env, rawQueueSetPerformanceConfigurationINTEL);
#endif
#ifdef VK_INTEL_performance_query
    exports["vkGetPerformanceParameterINTEL"] = Napi::Function::New(env, rawGetPerformanceParameterINTEL);
#endif
    exports["vkGetDeviceMemoryOpaqueCaptureAddress"] = Napi::Function::New(env, rawGetDeviceMemoryOpaqueCaptureAddress);
#ifdef VK_KHR_pipeline_executable_properties
    exports["vkGetPipelineExecutablePropertiesKHR"] = Napi::Function::New(env, rawGetPipelineExecutablePropertiesKHR);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["vkGetPipelineExecutableStatisticsKHR"] = Napi::Function::New(env, rawGetPipelineExecutableStatisticsKHR);
#endif
#ifdef VK_KHR_pipeline_executable_properties
    exports["vkGetPipelineExecutableInternalRepresentationsKHR"] = Napi::Function::New(env, rawGetPipelineExecutableInternalRepresentationsKHR);
#endif
#ifdef VK_EXT_line_rasterization
    exports["vkCmdSetLineStippleEXT"] = Napi::Function::New(env, rawCmdSetLineStippleEXT);
#endif
    exports["vkGetPhysicalDeviceToolProperties"] = Napi::Function::New(env, rawGetPhysicalDeviceToolProperties);
#ifdef VK_KHR_acceleration_structure
    exports["vkCreateAccelerationStructureKHR"] = Napi::Function::New(env, rawCreateAccelerationStructureKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkCmdBuildAccelerationStructuresKHR"] = Napi::Function::New(env, rawCmdBuildAccelerationStructuresKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkCmdBuildAccelerationStructuresIndirectKHR"] = Napi::Function::New(env, rawCmdBuildAccelerationStructuresIndirectKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkBuildAccelerationStructuresKHR"] = Napi::Function::New(env, rawBuildAccelerationStructuresKHR);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkGetAccelerationStructureDeviceAddressKHR"] = Napi::Function::New(env, rawGetAccelerationStructureDeviceAddressKHR);
#endif
#ifdef VK_KHR_deferred_host_operations
    exports["vkCreateDeferredOperationKHR"] = Napi::Function::New(env, rawCreateDeferredOperationKHR);
#endif
#ifdef VK_KHR_deferred_host_operations
    exports["vkDestroyDeferredOperationKHR"] = Napi::Function::New(env, rawDestroyDeferredOperationKHR);
#endif
#ifdef VK_KHR_deferred_host_operations
    exports["vkGetDeferredOperationMaxConcurrencyKHR"] = Napi::Function::New(env, rawGetDeferredOperationMaxConcurrencyKHR);
#endif
#ifdef VK_KHR_deferred_host_operations
    exports["vkGetDeferredOperationResultKHR"] = Napi::Function::New(env, rawGetDeferredOperationResultKHR);
#endif
#ifdef VK_KHR_deferred_host_operations
    exports["vkDeferredOperationJoinKHR"] = Napi::Function::New(env, rawDeferredOperationJoinKHR);
#endif
    exports["vkCmdSetCullMode"] = Napi::Function::New(env, rawCmdSetCullMode);
    exports["vkCmdSetFrontFace"] = Napi::Function::New(env, rawCmdSetFrontFace);
    exports["vkCmdSetPrimitiveTopology"] = Napi::Function::New(env, rawCmdSetPrimitiveTopology);
    exports["vkCmdSetViewportWithCount"] = Napi::Function::New(env, rawCmdSetViewportWithCount);
    exports["vkCmdSetScissorWithCount"] = Napi::Function::New(env, rawCmdSetScissorWithCount);
    exports["vkCmdBindVertexBuffers2"] = Napi::Function::New(env, rawCmdBindVertexBuffers2);
    exports["vkCmdSetDepthTestEnable"] = Napi::Function::New(env, rawCmdSetDepthTestEnable);
    exports["vkCmdSetDepthWriteEnable"] = Napi::Function::New(env, rawCmdSetDepthWriteEnable);
    exports["vkCmdSetDepthCompareOp"] = Napi::Function::New(env, rawCmdSetDepthCompareOp);
    exports["vkCmdSetDepthBoundsTestEnable"] = Napi::Function::New(env, rawCmdSetDepthBoundsTestEnable);
    exports["vkCmdSetStencilTestEnable"] = Napi::Function::New(env, rawCmdSetStencilTestEnable);
    exports["vkCmdSetStencilOp"] = Napi::Function::New(env, rawCmdSetStencilOp);
#ifdef VK_EXT_extended_dynamic_state2
    exports["vkCmdSetPatchControlPointsEXT"] = Napi::Function::New(env, rawCmdSetPatchControlPointsEXT);
#endif
    exports["vkCmdSetRasterizerDiscardEnable"] = Napi::Function::New(env, rawCmdSetRasterizerDiscardEnable);
    exports["vkCmdSetDepthBiasEnable"] = Napi::Function::New(env, rawCmdSetDepthBiasEnable);
#ifdef VK_EXT_extended_dynamic_state2
    exports["vkCmdSetLogicOpEXT"] = Napi::Function::New(env, rawCmdSetLogicOpEXT);
#endif
    exports["vkCmdSetPrimitiveRestartEnable"] = Napi::Function::New(env, rawCmdSetPrimitiveRestartEnable);
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetTessellationDomainOriginEXT"] = Napi::Function::New(env, rawCmdSetTessellationDomainOriginEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetDepthClampEnableEXT"] = Napi::Function::New(env, rawCmdSetDepthClampEnableEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetPolygonModeEXT"] = Napi::Function::New(env, rawCmdSetPolygonModeEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetRasterizationSamplesEXT"] = Napi::Function::New(env, rawCmdSetRasterizationSamplesEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetSampleMaskEXT"] = Napi::Function::New(env, rawCmdSetSampleMaskEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetAlphaToCoverageEnableEXT"] = Napi::Function::New(env, rawCmdSetAlphaToCoverageEnableEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetAlphaToOneEnableEXT"] = Napi::Function::New(env, rawCmdSetAlphaToOneEnableEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetLogicOpEnableEXT"] = Napi::Function::New(env, rawCmdSetLogicOpEnableEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetColorBlendEnableEXT"] = Napi::Function::New(env, rawCmdSetColorBlendEnableEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetColorBlendEquationEXT"] = Napi::Function::New(env, rawCmdSetColorBlendEquationEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetColorWriteMaskEXT"] = Napi::Function::New(env, rawCmdSetColorWriteMaskEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetRasterizationStreamEXT"] = Napi::Function::New(env, rawCmdSetRasterizationStreamEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetConservativeRasterizationModeEXT"] = Napi::Function::New(env, rawCmdSetConservativeRasterizationModeEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetExtraPrimitiveOverestimationSizeEXT"] = Napi::Function::New(env, rawCmdSetExtraPrimitiveOverestimationSizeEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetDepthClipEnableEXT"] = Napi::Function::New(env, rawCmdSetDepthClipEnableEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetSampleLocationsEnableEXT"] = Napi::Function::New(env, rawCmdSetSampleLocationsEnableEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetColorBlendAdvancedEXT"] = Napi::Function::New(env, rawCmdSetColorBlendAdvancedEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetProvokingVertexModeEXT"] = Napi::Function::New(env, rawCmdSetProvokingVertexModeEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetLineRasterizationModeEXT"] = Napi::Function::New(env, rawCmdSetLineRasterizationModeEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetLineStippleEnableEXT"] = Napi::Function::New(env, rawCmdSetLineStippleEnableEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetDepthClipNegativeOneToOneEXT"] = Napi::Function::New(env, rawCmdSetDepthClipNegativeOneToOneEXT);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetViewportWScalingEnableNV"] = Napi::Function::New(env, rawCmdSetViewportWScalingEnableNV);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetViewportSwizzleNV"] = Napi::Function::New(env, rawCmdSetViewportSwizzleNV);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetCoverageToColorEnableNV"] = Napi::Function::New(env, rawCmdSetCoverageToColorEnableNV);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetCoverageToColorLocationNV"] = Napi::Function::New(env, rawCmdSetCoverageToColorLocationNV);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetCoverageModulationModeNV"] = Napi::Function::New(env, rawCmdSetCoverageModulationModeNV);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetCoverageModulationTableEnableNV"] = Napi::Function::New(env, rawCmdSetCoverageModulationTableEnableNV);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetCoverageModulationTableNV"] = Napi::Function::New(env, rawCmdSetCoverageModulationTableNV);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetShadingRateImageEnableNV"] = Napi::Function::New(env, rawCmdSetShadingRateImageEnableNV);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetCoverageReductionModeNV"] = Napi::Function::New(env, rawCmdSetCoverageReductionModeNV);
#endif
#ifdef VK_EXT_extended_dynamic_state3
    exports["vkCmdSetRepresentativeFragmentTestEnableNV"] = Napi::Function::New(env, rawCmdSetRepresentativeFragmentTestEnableNV);
#endif
    exports["vkCreatePrivateDataSlot"] = Napi::Function::New(env, rawCreatePrivateDataSlot);
    exports["vkDestroyPrivateDataSlot"] = Napi::Function::New(env, rawDestroyPrivateDataSlot);
    exports["vkSetPrivateData"] = Napi::Function::New(env, rawSetPrivateData);
    exports["vkGetPrivateData"] = Napi::Function::New(env, rawGetPrivateData);
    exports["vkCmdCopyBuffer2"] = Napi::Function::New(env, rawCmdCopyBuffer2);
    exports["vkCmdCopyImage2"] = Napi::Function::New(env, rawCmdCopyImage2);
    exports["vkCmdBlitImage2"] = Napi::Function::New(env, rawCmdBlitImage2);
    exports["vkCmdCopyBufferToImage2"] = Napi::Function::New(env, rawCmdCopyBufferToImage2);
    exports["vkCmdCopyImageToBuffer2"] = Napi::Function::New(env, rawCmdCopyImageToBuffer2);
    exports["vkCmdResolveImage2"] = Napi::Function::New(env, rawCmdResolveImage2);
#ifdef VK_KHR_fragment_shading_rate
    exports["vkCmdSetFragmentShadingRateKHR"] = Napi::Function::New(env, rawCmdSetFragmentShadingRateKHR);
#endif
#ifdef VK_KHR_fragment_shading_rate
    exports["vkGetPhysicalDeviceFragmentShadingRatesKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceFragmentShadingRatesKHR);
#endif
#ifdef VK_NV_fragment_shading_rate_enums
    exports["vkCmdSetFragmentShadingRateEnumNV"] = Napi::Function::New(env, rawCmdSetFragmentShadingRateEnumNV);
#endif
#ifdef VK_KHR_acceleration_structure
    exports["vkGetAccelerationStructureBuildSizesKHR"] = Napi::Function::New(env, rawGetAccelerationStructureBuildSizesKHR);
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
    exports["vkCmdSetVertexInputEXT"] = Napi::Function::New(env, rawCmdSetVertexInputEXT);
#endif
#ifdef VK_EXT_color_write_enable
    exports["vkCmdSetColorWriteEnableEXT"] = Napi::Function::New(env, rawCmdSetColorWriteEnableEXT);
#endif
    exports["vkCmdSetEvent2"] = Napi::Function::New(env, rawCmdSetEvent2);
    exports["vkCmdResetEvent2"] = Napi::Function::New(env, rawCmdResetEvent2);
    exports["vkCmdWaitEvents2"] = Napi::Function::New(env, rawCmdWaitEvents2);
    exports["vkCmdPipelineBarrier2"] = Napi::Function::New(env, rawCmdPipelineBarrier2);
    exports["vkQueueSubmit2"] = Napi::Function::New(env, rawQueueSubmit2);
    exports["vkCmdWriteTimestamp2"] = Napi::Function::New(env, rawCmdWriteTimestamp2);
#ifdef VK_KHR_synchronization2
    exports["vkCmdWriteBufferMarker2AMD"] = Napi::Function::New(env, rawCmdWriteBufferMarker2AMD);
#endif
#ifdef VK_KHR_synchronization2
    exports["vkGetQueueCheckpointData2NV"] = Napi::Function::New(env, rawGetQueueCheckpointData2NV);
#endif
#ifdef VK_KHR_video_queue
    exports["vkGetPhysicalDeviceVideoCapabilitiesKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceVideoCapabilitiesKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkGetPhysicalDeviceVideoFormatPropertiesKHR"] = Napi::Function::New(env, rawGetPhysicalDeviceVideoFormatPropertiesKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkCreateVideoSessionKHR"] = Napi::Function::New(env, rawCreateVideoSessionKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkDestroyVideoSessionKHR"] = Napi::Function::New(env, rawDestroyVideoSessionKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkCreateVideoSessionParametersKHR"] = Napi::Function::New(env, rawCreateVideoSessionParametersKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkUpdateVideoSessionParametersKHR"] = Napi::Function::New(env, rawUpdateVideoSessionParametersKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkDestroyVideoSessionParametersKHR"] = Napi::Function::New(env, rawDestroyVideoSessionParametersKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkGetVideoSessionMemoryRequirementsKHR"] = Napi::Function::New(env, rawGetVideoSessionMemoryRequirementsKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkBindVideoSessionMemoryKHR"] = Napi::Function::New(env, rawBindVideoSessionMemoryKHR);
#endif
#ifdef VK_KHR_video_decode_queue
    exports["vkCmdDecodeVideoKHR"] = Napi::Function::New(env, rawCmdDecodeVideoKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkCmdBeginVideoCodingKHR"] = Napi::Function::New(env, rawCmdBeginVideoCodingKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkCmdControlVideoCodingKHR"] = Napi::Function::New(env, rawCmdControlVideoCodingKHR);
#endif
#ifdef VK_KHR_video_queue
    exports["vkCmdEndVideoCodingKHR"] = Napi::Function::New(env, rawCmdEndVideoCodingKHR);
#endif
#ifdef VK_KHR_video_encode_queue
    exports["vkCmdEncodeVideoKHR"] = Napi::Function::New(env, rawCmdEncodeVideoKHR);
#endif
#ifdef VK_NV_memory_decompression
    exports["vkCmdDecompressMemoryNV"] = Napi::Function::New(env, rawCmdDecompressMemoryNV);
#endif
#ifdef VK_NV_memory_decompression
    exports["vkCmdDecompressMemoryIndirectCountNV"] = Napi::Function::New(env, rawCmdDecompressMemoryIndirectCountNV);
#endif
#ifdef VK_NVX_binary_import
    exports["vkCreateCuModuleNVX"] = Napi::Function::New(env, rawCreateCuModuleNVX);
#endif
#ifdef VK_NVX_binary_import
    exports["vkCreateCuFunctionNVX"] = Napi::Function::New(env, rawCreateCuFunctionNVX);
#endif
#ifdef VK_NVX_binary_import
    exports["vkDestroyCuModuleNVX"] = Napi::Function::New(env, rawDestroyCuModuleNVX);
#endif
#ifdef VK_NVX_binary_import
    exports["vkDestroyCuFunctionNVX"] = Napi::Function::New(env, rawDestroyCuFunctionNVX);
#endif
#ifdef VK_NVX_binary_import
    exports["vkCmdCuLaunchKernelNVX"] = Napi::Function::New(env, rawCmdCuLaunchKernelNVX);
#endif
#ifdef VK_EXT_pageable_device_local_memory
    exports["vkSetDeviceMemoryPriorityEXT"] = Napi::Function::New(env, rawSetDeviceMemoryPriorityEXT);
#endif
#ifdef VK_EXT_acquire_drm_display
    exports["vkAcquireDrmDisplayEXT"] = Napi::Function::New(env, rawAcquireDrmDisplayEXT);
#endif
#ifdef VK_EXT_acquire_drm_display
    exports["vkGetDrmDisplayEXT"] = Napi::Function::New(env, rawGetDrmDisplayEXT);
#endif
#ifdef VK_KHR_present_wait
    exports["vkWaitForPresentKHR"] = Napi::Function::New(env, rawWaitForPresentKHR);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["vkCreateBufferCollectionFUCHSIA"] = Napi::Function::New(env, rawCreateBufferCollectionFUCHSIA);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["vkSetBufferCollectionBufferConstraintsFUCHSIA"] = Napi::Function::New(env, rawSetBufferCollectionBufferConstraintsFUCHSIA);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["vkSetBufferCollectionImageConstraintsFUCHSIA"] = Napi::Function::New(env, rawSetBufferCollectionImageConstraintsFUCHSIA);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["vkDestroyBufferCollectionFUCHSIA"] = Napi::Function::New(env, rawDestroyBufferCollectionFUCHSIA);
#endif
#ifdef VK_FUCHSIA_buffer_collection
    exports["vkGetBufferCollectionPropertiesFUCHSIA"] = Napi::Function::New(env, rawGetBufferCollectionPropertiesFUCHSIA);
#endif
    exports["vkCmdBeginRendering"] = Napi::Function::New(env, rawCmdBeginRendering);
    exports["vkCmdEndRendering"] = Napi::Function::New(env, rawCmdEndRendering);
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["vkGetDescriptorSetLayoutHostMappingInfoVALVE"] = Napi::Function::New(env, rawGetDescriptorSetLayoutHostMappingInfoVALVE);
#endif
#ifdef VK_VALVE_descriptor_set_host_mapping
    exports["vkGetDescriptorSetHostMappingVALVE"] = Napi::Function::New(env, rawGetDescriptorSetHostMappingVALVE);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkCreateMicromapEXT"] = Napi::Function::New(env, rawCreateMicromapEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkCmdBuildMicromapsEXT"] = Napi::Function::New(env, rawCmdBuildMicromapsEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkBuildMicromapsEXT"] = Napi::Function::New(env, rawBuildMicromapsEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkDestroyMicromapEXT"] = Napi::Function::New(env, rawDestroyMicromapEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkCmdCopyMicromapEXT"] = Napi::Function::New(env, rawCmdCopyMicromapEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkCopyMicromapEXT"] = Napi::Function::New(env, rawCopyMicromapEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkCmdCopyMicromapToMemoryEXT"] = Napi::Function::New(env, rawCmdCopyMicromapToMemoryEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkCopyMicromapToMemoryEXT"] = Napi::Function::New(env, rawCopyMicromapToMemoryEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkCmdCopyMemoryToMicromapEXT"] = Napi::Function::New(env, rawCmdCopyMemoryToMicromapEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkCopyMemoryToMicromapEXT"] = Napi::Function::New(env, rawCopyMemoryToMicromapEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkCmdWriteMicromapsPropertiesEXT"] = Napi::Function::New(env, rawCmdWriteMicromapsPropertiesEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkWriteMicromapsPropertiesEXT"] = Napi::Function::New(env, rawWriteMicromapsPropertiesEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkGetDeviceMicromapCompatibilityEXT"] = Napi::Function::New(env, rawGetDeviceMicromapCompatibilityEXT);
#endif
#ifdef VK_EXT_opacity_micromap
    exports["vkGetMicromapBuildSizesEXT"] = Napi::Function::New(env, rawGetMicromapBuildSizesEXT);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["vkGetShaderModuleIdentifierEXT"] = Napi::Function::New(env, rawGetShaderModuleIdentifierEXT);
#endif
#ifdef VK_EXT_shader_module_identifier
    exports["vkGetShaderModuleCreateInfoIdentifierEXT"] = Napi::Function::New(env, rawGetShaderModuleCreateInfoIdentifierEXT);
#endif
#ifdef VK_EXT_image_compression_control
    exports["vkGetImageSubresourceLayout2EXT"] = Napi::Function::New(env, rawGetImageSubresourceLayout2EXT);
#endif
#ifdef VK_EXT_pipeline_properties
    exports["vkGetPipelinePropertiesEXT"] = Napi::Function::New(env, rawGetPipelinePropertiesEXT);
#endif
#ifdef VK_EXT_metal_objects
    exports["vkExportMetalObjectsEXT"] = Napi::Function::New(env, rawExportMetalObjectsEXT);
#endif
#ifdef VK_QCOM_tile_properties
    exports["vkGetFramebufferTilePropertiesQCOM"] = Napi::Function::New(env, rawGetFramebufferTilePropertiesQCOM);
#endif
#ifdef VK_QCOM_tile_properties
    exports["vkGetDynamicRenderingTilePropertiesQCOM"] = Napi::Function::New(env, rawGetDynamicRenderingTilePropertiesQCOM);
#endif
#ifdef VK_NV_optical_flow
    exports["vkGetPhysicalDeviceOpticalFlowImageFormatsNV"] = Napi::Function::New(env, rawGetPhysicalDeviceOpticalFlowImageFormatsNV);
#endif
#ifdef VK_NV_optical_flow
    exports["vkCreateOpticalFlowSessionNV"] = Napi::Function::New(env, rawCreateOpticalFlowSessionNV);
#endif
#ifdef VK_NV_optical_flow
    exports["vkDestroyOpticalFlowSessionNV"] = Napi::Function::New(env, rawDestroyOpticalFlowSessionNV);
#endif
#ifdef VK_NV_optical_flow
    exports["vkBindOpticalFlowSessionImageNV"] = Napi::Function::New(env, rawBindOpticalFlowSessionImageNV);
#endif
#ifdef VK_NV_optical_flow
    exports["vkCmdOpticalFlowExecuteNV"] = Napi::Function::New(env, rawCmdOpticalFlowExecuteNV);
#endif
#ifdef VK_EXT_device_fault
    exports["vkGetDeviceFaultInfoEXT"] = Napi::Function::New(env, rawGetDeviceFaultInfoEXT);
#endif

    exports["vkGetStructureSizeBySType"] = Napi::Function::New(env, rawGetStructureSizeBySType);
    exports["uint8" ] = Napi::Function::New(env, DebugUint8);
    exports["uint16"] = Napi::Function::New(env, DebugUint16);
    exports["uint32"] = Napi::Function::New(env, DebugUint32);
    exports["uint64"] = Napi::Function::New(env, DebugUint64);
    exports["float32"] = Napi::Function::New(env, DebugFloat32);
    exports["float64"] = Napi::Function::New(env, DebugFloat64);
    exports["nativeAddress"] = Napi::Function::New(env, GetAddress);
    exports["arrayBuffer"] = Napi::Function::New(env, WrapArrayBuffer);
    exports["buffer"] = Napi::Function::New(env, WrapBuffer);
    exports["string"] = Napi::Function::New(env, WrapString);
    exports["stringUtf16"] = Napi::Function::New(env, WrapStringUTF16);
    return exports;
}

NODE_API_MODULE(native, Init)
    